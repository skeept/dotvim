VimL:" Shared definition for Absolute and relative Classes Template, Luc Hermitte
VimL:" Used to define Date and Duration, Point and Distance, ... 
VimL: let s:value_start = '¡'
VimL: let s:value_end   = '¡'
VimL: let s:reindent = 1
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
VimL:"
namespace DETAILS
{
    <+s:tmpl_decl+>class <+s:sharedclsname+>
    {
    public:
	typedef ¡lh#ui#if(s:istemplate, s:tmpl_type, "<+scalar_type+>")¡ scalar_type;
	friend class ¡s:absclsname.s:tmpl¡;
	friend class ¡s:relclsname.s:tmpl¡;
    protected:
	/**@name Construction/destruction
	 */
	//@{
	/** Initialisation constructor.
	 */
	<+s:sharedclsname+>(<+parameters+>)¡lh#ui#if(s:istemplate,"\n<+: +>{<++>}", ";")¡
	/** Protected destructor.
	 */
	~<+s:sharedclsname+>();
	¡lh#cpp#abs_rel#canonicalortodoxform(s:absclsname, ! s:defaultisenough)¡
	//@}

	/**@name Operations
	 */
	//@{
	void add(<+s:sharedclsname+> const& <+s:rhs+>)¡lh#ui#if(s:istemplate,"\n{<++>}", ";")¡
	void dec(<+s:sharedclsname+> const& <+s:rhs+>)¡lh#ui#if(s:istemplate,"\n{<++>}", ";")¡
	void mult(scalar_type <+s:coeff+>)¡lh#ui#if(s:istemplate,"\n{<++>}", ";")¡
	void div(scalar_type <+s:coeff+>)¡lh#ui#if(s:istemplate,"\n{<++>}", ";")¡
	static bool isEqual(
		<+s:sharedclsname+> const& <+s:rhs+>,
		<+s:sharedclsname+> const& <+s:lhs+>)¡lh#ui#if(s:istemplate,"\n{<++>}", ";")¡
	//@}
    private:
	<+representation+>;
    };
}

