VimL:" C++ Singleton-Class Template, Luc Hermitte
VimL:" «Meyers singleton», cf. More Effective C++ Item 26
VimL:" For a more precise definition, cf. A. Alexandrescu's Modern C++ Design
VimL:" hint: Singleton class Wizard
VimL: let s:value_start  = '¡'
VimL: let s:value_end   = s:value_start
VimL: let s:reindent     = 1
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
MuT:  let s:parameters = s:Param('cls_parameters', {})
VimL: call lh#dict#add_new(s:parameters, {'noncopyable': 1, 'final': 1, 'comments': {}})
MuT:  let s:functions = s:Param('functions', lh#cpp#snippets#new_function_list())
VimL: " in case the class name is already known, no need to extract it
VimL: call s:Include('get-class-name', 'cpp/internals')
VimL: " Defines Doxygen comments
MuT:  let s:cls_comments = s:parameters.comments
VimL: let s:cls_comments.brief = lh#dox#brief(s:clsname.' singleton.')
VimL: let s:cls_comments.ingroup = {}
VimL: let s:cls_comments.invariant = lh#marker#txt()
VimL: let s:cls_comments.author = lh#dox#author_value(). ', creation'
VimL: let s:cls_comments.since = lh#dox#since_value()
VimL: " Ask which kind
MuT:  let s:type = confirm('Of what type of the singleton should be?', "&Meyers' (local-static, MT-safe (in C++11), default ctr)\n" .'&Explicit Initialisation (MT-safe)', 2 - lh#cpp#use_cpp11())
MuT:  if s:type == 1
VimL: " ----> Meyers' singleton
VimL:    " --- instance()
MuT:     let s:instance = {'signature': 'static <+__clsname__+> & instance() '.lh#cpp#snippets#noexcept()}
VimL:    let s:instance.implementation = "static <+__clsname__+> s_instance;\nreturn s_instance;"
VimL:    let s:instance.comments = {'brief': 'Singleton Accessor.', 'throw': 'None'}
VimL:    call s:functions.insert(s:instance)
VimL:    " --- Force default-constructor and destructor to private
VimL:    " And set how to defaulted, in not already set
MuT:     let s:default_constructor = s:Param('default-constructor', {})
VimL:    let s:default_constructor.visibility = 'private'
VimL:    let s:default_constructor.comments = {'text': ['Hidden constructor.'], 'see': '`instance()`'}
VimL:    call lh#dict#add_new(s:default_constructor, {'how': 'defaulted'})
MuT:     let s:destructor = s:Param('destructor', {})
VimL:    let s:destructor['visibility'] = 'private'
VimL:    call lh#dict#add_new(s:destructor, {'how': 'defaulted'})
VimL:    " --- Complete Doxygen comments
VimL:    let s:cls_comments.semantics = ['Implicitly initialized with a default constructor', 'MT-safe', 'Non-copyable']
VimL:    " --- Insert the skeleton built
VimL:    call s:Include('class-skeleton', 'cpp/internals', s:parameters)
MuT:  elseif s:type == 2
VimL: " ----> Explicit' singleton
VimL:    call s:AddPostExpandCallback('lh#dev#import#add("<cassert>")')
VimL:    " --- instance()
MuT:     let s:instance = {}
VimL:    let s:instance.comments = {'brief': 'Singleton Accessor.', 'throw': 'None', 'pre': '`ms_instance != nullptr`'}
VimL:    let s:instance.signature = 'static <+__clsname__+> & instance() '.lh#cpp#snippets#noexcept()
VimL:    let s:instance.implementation = 'assert(ms_instance && "Singleton not initialized.");'
VimL:    let s:instance.implementation .= "\nreturn *ms_instance;"
VimL:    call s:functions.insert(s:instance)
VimL:    " --- create()
MuT:     let s:create = {}
VimL:    let s:create.comments = {'brief': 'Singleton Construction.', 'throw': lh#marker#txt('std::exception'), 'pre': ' `ms_instance == nullptr`', 'post': '`ms_instance != nullptr`'}
VimL:    let s:create.signature = 'static void create('.lh#marker#txt('Parameters').')'
VimL:    let s:create.implementation = 'assert(!ms_instance && "Singleton already initialized.");'
VimL:    let s:create.implementation .= "\nms_instance = new <+__clsname__+>(".lh#marker#txt('parameters').');'
VimL:    call s:functions.insert(s:create)
VimL:    " --- release()
MuT:     let s:release = {}
VimL:    let s:release.comments = {'brief': 'Singleton Destruction.', 'throw': 'None', 'pre': ' `ms_instance != nullptr`', 'post': '`ms_instance == nullptr`'}
VimL:    let s:release.signature = 'static void release() '.lh#cpp#snippets#noexcept()
VimL:    let s:release.implementation = 'assert(ms_instance && "Singleton not initialized.");'
VimL:    let s:release.implementation .= "\nms_instance = ".lh#cpp#snippets#nullptr().";"
VimL:    call s:functions.insert(s:release)
VimL:    " --- Define an init-constructor
MuT:     let s:init_constructor = s:functions.get1({'kind' : 'init-constructor'})
VimL:    let s:init_constructor.visibility = 'private'
VimL:    " call s:functions.insert(s:init_constructor)
VimL:    " --- Set destructor to private, set how to defaulted, in not already set
MuT:     let s:destructor = s:Param('destructor', {})
VimL:    let s:destructor['visibility'] = 'private'
VimL:    call lh#dict#add_new(s:destructor, {'how': 'defaulted'})
VimL:    " --- Complete Doxygen comments
VimL:    let s:cls_comments.semantics = ['Explicitly initialized', 'MT-safe', 'Non-copyable']
VimL:    " --- Insert the skeleton built
VimL:    call s:Include('class-skeleton', 'cpp/internals', s:parameters)
// don't forget to move the following definition to <+expand('%:t:r')+>.cpp
<+s:clsname+> *<+s:clsname+>::ms_instance = <+lh#cpp#snippets#nullptr()+>;
MuT:  endif
