" Setup and helpers for all tests.

Before:
  " One-time setup.
  if exists(':NeomakeTestsGlobalBefore') != 2

  function! s:wait_for_jobs(filter)
    let max = 45
    let filter = a:filter
    while 1
      let jobs = copy(neomake#GetJobs())
      if len(a:filter)
        let jobs = filter(jobs, a:filter)
      endif
      if !len(jobs)
        break
      endif
      let max -= 1
      if max == 0
        for j in jobs
          Log "Remaining job: ".string(j)
        endfor
        throw len(jobs).' jobs did not finish after 3s.'
      endif
      exe 'sleep' (max < 25 ? 100 : max < 35 ? 50 : 10).'m'
    endwhile
  endfunction
  command! NeomakeTestsWaitForFinishedJobs call s:wait_for_jobs("!get(v:val, 'finished')")
  command! NeomakeTestsWaitForRemovedJobs call s:wait_for_jobs('')

  function! s:wait_for_next_message()
    let max = 45
    let n = len(g:neomake_test_messages)
    while 1
      let max -= 1
      if max == 0
        throw 'No new message appeared after 3s.'
      endif
      exe 'sleep' (max < 25 ? 100 : max < 35 ? 50 : 10).'m'
      if len(g:neomake_test_messages) != n
        break
      endif
    endwhile
  endfunction
  command! NeomakeTestsWaitForNextMessage call s:wait_for_next_message()

  function! s:wait_for_finished_job()
    let max = 45
    let n = len(neomake#GetJobs())
    while 1
      let max -= 1
      if max == 0
        throw 'No job finished after 3s.'
      endif
      exe 'sleep' (max < 25 ? 100 : max < 35 ? 50 : 10).'m'
      if len(neomake#GetJobs()) != n
        break
      endif
    endwhile
  endfunction
  command! NeomakeTestsWaitForNextFinishedJob call s:wait_for_finished_job()

  command! -nargs=* RunNeomake Neomake <args>
    \ | NeomakeTestsWaitForFinishedJobs
  command! -nargs=* RunNeomakeProject NeomakeProject <args>
    \ | NeomakeTestsWaitForFinishedJobs

  " NOTE: NeomakeSh does not use '-bar'.
  command! -nargs=* RunNeomakeSh call RunNeomakeSh(<q-args>)
  function! RunNeomakeSh(...)
    call call('neomake#Sh', a:000)
    NeomakeTestsWaitForFinishedJobs
  endfunction

  let s:tempname = tempname()

  function! g:NeomakeTestsEnsureExe(name)
    if executable(a:name)
      return
    endif
    let path_separator = exists('+shellslash') ? ';' : ':'
    let dir_separator = exists('+shellslash') ? '\' : '/'
    let tmpbindir = s:tempname . dir_separator . 'neomake-vader-tests'
    if $PATH !~# tmpbindir . path_separator
      Save $PATH
      if !isdirectory(tmpbindir)
        call mkdir(tmpbindir, 'p', 0770)
      endif
      let $PATH = tmpbindir . ':' . $PATH
    endif
    let exe = tmpbindir.dir_separator.a:name
    if !filereadable(exe)
      " XXX: this is dirty (for 'Test Neomake on errors.sh with two makers').
      if a:name == 'shellcheck'
        call writefile(['#!/bin/sh', 'echo $1:1:1: warning: this is just a stub'], exe)
      else
        call writefile([], exe)
      endif
      if exists('*setfperm')
        call setfperm(exe, "rwxrwx---")
      else
        " XXX: Windows support
        call system('chmod 770 '.shellescape(exe))
      endif
    endif
  endfunction

  function! s:AssertNeomakeMessage(msg, ...)
    let level = a:0 ? a:1 : -1
    let jobinfo = a:0 > 1 ? copy(a:2) : -1
    let found_but_before = 0
    let found_but_other_level = -1
    let r = 0
    let idx = -1
    for [l, m, info] in g:neomake_test_messages
      let idx += 1
      if m ==# a:msg
        if level == -1
          let r = 1
        else
          if l == level
            let r = 1
          else
            let found_but_other_level = l
          endif
        endif
      endif
      if r
        if idx > g:neomake_test_messages_last_idx
          break
        endif
        if idx < g:neomake_test_messages_last_idx
          let found_but_before = 1
        endif
        let r = 0
      endif
    endfor
    if r == 1
      if type(jobinfo) == type({})
        " Only compare entries relevant for messages.
        call filter(jobinfo, "index(['id', 'make_id'], v:key) != -1")
        let l:UNDEF = {}
        for [k, v] in items(info)
          let expected = get(jobinfo, k, l:UNDEF)
          if expected is l:UNDEF
            throw printf("[%s] Missing value for jobinfo.%s: "
                \  ."expected nothing, but got '%s'.", a:msg, k, string(v))
          else
            try
              let same = v ==# expected
            catch
              throw printf(
                \ "Could not compare jobinfo entries (expected: %s, actual: %s): %s",
                \ string(expected), string(v), v:exception)
            endtry
            if !same
              throw printf("Got unexpected value for jobinfo.%s: "
                \  ."expected '%s', but got '%s'.", k, string(expected), string(v))
            endif
          endif
          unlet jobinfo[k]
          unlet v  " for old Vim
        endfor
        for [k, expected] in items(jobinfo)
          throw printf("[%s] Missing entry for jobinfo.%s: "
            \  ."expected '%s', but got nothing.", a:msg, k, string(expected))

        endfor
      endif
      let g:neomake_test_messages_last_idx = idx
      " Make it count as a successful assertion.
      Assert 1
      return 1
    endif
    if found_but_other_level != -1
      throw "Message '".a:msg."' found, but for level ".found_but_other_level
    endif
    if found_but_before
      throw "Message '".a:msg."' was found _before_ last asserted one."
    endif
    throw "Message '".a:msg."' not found."
  endfunction
  command! -nargs=+ AssertNeomakeMessage call s:AssertNeomakeMessage(<args>)

  function! s:AssertNeomakeMessageAbsent(msg, ...)
    try
      call call('s:AssertNeomakeMessage', [a:msg] + a:000)
    catch /^Message/
      return 1
    endtry
    throw "Found unexpected message: ".a:msg
  endfunction
  command! -nargs=+ AssertNeomakeMessageAbsent call s:AssertNeomakeMessageAbsent(<args>)

  function! s:NeomakeTestsResetMessages()
    let g:neomake_test_messages = []
    let g:neomake_test_messages_last_idx = -1
  endfunction
  command! NeomakeTestsResetMessages call s:NeomakeTestsResetMessages()

  function! g:NeomakeSetupAutocmdWrappers()
    let g:neomake_test_finished = []
    function! s:OnNeomakeFinished(context)
      let g:neomake_test_finished += [a:context]
    endfunction

    let g:neomake_test_jobfinished = []
    function! s:OnNeomakeJobFinished(context)
      let g:neomake_test_jobfinished += [a:context]
    endfunction

    let g:neomake_test_countschanged = []
    function! s:OnNeomakeCountsChanged(context)
      let g:neomake_test_countschanged += [a:context]
    endfunction

    augroup neomake_tests
      au!
      au User NeomakeFinished call s:OnNeomakeFinished(g:neomake_hook_context)
      au User NeomakeJobFinished call s:OnNeomakeJobFinished(g:neomake_hook_context)
      au User NeomakeCountsChanged call s:OnNeomakeCountsChanged(g:neomake_hook_context)
    augroup END
  endfunction

  function! NeomakeAsyncTestsSetup()
    if neomake#has_async_support()
      call neomake#statusline#ResetCounts()
      call g:NeomakeSetupAutocmdWrappers()
      return 1
    endif
    Log "SKIP: no async support."
  endfunction

  function! NeomakeTestsCommandMaker(name, cmd)
    let maker = neomake#utils#MakerFromCommand(a:cmd)
    return extend(maker, {
    \ 'name': a:name,
    \ 'errorformat': '%m',
    \ 'append_file': 0})
  endfunction

  " Fixtures
  let g:neomake_test_sleep_efm_maker = {
      \ 'name': 'sleep_efm_maker',
      \ 'exe': 'sh',
      \ 'args': ['-c', 'sleep 0.1; echo file1:1:E:error message; '
      \         .'echo file1:2:W:warning; echo file1:1:E:error2'],
      \ 'errorformat': '%f:%l:%t:%m',
      \ 'append_file': 0,
      \ }

  " A maker that generates incrementing errors.
  let g:neomake_test_inc_maker_counter = 0
  function! s:IncMakerArgs()
    let g:neomake_test_inc_maker_counter += 1
    let cmd = ''
    for i in range(g:neomake_test_inc_maker_counter)
      let cmd .= 'echo b'.g:neomake_test_inc_maker_counter.' '.g:neomake_test_inc_maker_counter.':'.i.': buf: '.shellescape(bufname('%')).'; '
    endfor
    return ['-c', cmd]
  endfunction
  let g:neomake_test_inc_maker = {
        \ 'name': 'incmaker',
        \ 'exe': &shell,
        \ 'args': function('s:IncMakerArgs'),
        \ 'errorformat': '%E%f %m',
        \ 'append_file': 0,
        \ }

  function! s:Before()
    let g:neomake_test_messages = []
    let g:neomake_test_log_all_messages = 1
    let g:neomake_test_messages_last_idx = -1

    cgetexpr ''
    lgetexpr ''
  endfunction
  command! NeomakeTestsGlobalBefore call s:Before()

  function! s:After()
    Restore

    " Stop any (non-canceled) jobs.  Canceled jobs might take a while to call the
    " exit handler, but that is OK.
    let jobs = filter(neomake#GetJobs(), "!get(v:val, 'canceled', 0)")
    if len(jobs)
      for job in jobs
        call neomake#CancelJob(job.id, !neomake#has_async_support())
      endfor
      throw 'There were '.len(jobs).' jobs left: '.string(map(jobs, 'v:val.make_id.".".v:val.id'))
    endif

    NeomakeTestsWaitForRemovedJobs

    if exists('#neomake_tests')
      autocmd! neomake_tests
    endif

    if winnr('$') > 1
      let error = "More than 1 window after tests: "
        \ .string(map(range(1, winnr('$')),
        \ "[bufname(winbufnr(v:val)), getbufvar(winbufnr(v:val), '&bt')]"))
      try
        let bufs = sort(tabpagebuflist())
        if exists('*uniq')
          let bufs = uniq(bufs)
        endif
        for b in bufs
          silent exe 'bd!' b
        endfor
      catch
        Log "Error while cleaning windows: ".v:exception
      endtry
      throw error
    endif
  endfunction
  command! NeomakeTestsGlobalAfter call s:After()
  endif
  NeomakeTestsGlobalBefore

After:
  NeomakeTestsGlobalAfter
