Include: include/setup.vader

Execute (neomake#signs#HlexistsAndIsNotCleared):
  AssertEqual neomake#signs#HlexistsAndIsNotCleared('Error'), 1
  AssertEqual neomake#signs#HlexistsAndIsNotCleared('NeomakeCustomHilight'), 0
  hi clear NeomakeCustomHilight
  AssertEqual neomake#signs#HlexistsAndIsNotCleared('NeomakeCustomHilight'), 0
  hi link NeomakeCustomHilight Error
  AssertEqual neomake#signs#HlexistsAndIsNotCleared('NeomakeCustomHilight'), 1
  hi link NeomakeCustomHilight NONE
  AssertEqual neomake#signs#HlexistsAndIsNotCleared('NeomakeCustomHilight'), 0

Execute (neomake#signs#RedefineErrorSign):
  let maker = neomake#utils#MakerFromCommand(
    \ 'echo 1: E: error; echo 1:2: W: warning')
  call extend(maker, {
        \ 'name': 'custom_maker',
        \ 'errorformat': '%E%f:%l: %t: %m,%E%f: %t: %m',
        \ 'append_file': 0,
        \ }, 'error')

  new
  file 1
  let bufnr = bufnr('%')

  call neomake#Make(1, [maker])
  NeomakeTestsWaitForFinishedJobs
  AssertNeomakeMessage 'Placing sign: sign place 5000 line=2 name=neomake_warn buffer='.bufnr('%')

  AssertNeomakeMessage printf("Could not place signs for 1 entries without line number: %s.",
  \ string([{'lnum': 0, 'bufnr': bufnr, 'col': 0, 'valid': 1, 'vcol': 0,
  \          'nr': -1, 'type': 'E', 'maker_name': 'custom_maker', 'pattern': '',
  \          'text': 'error'}]))

  " Test #736.
  call neomake#signs#RedefineErrorSign({'text': 'âœ—', 'texthl': 'ErrorMsg'})

  call neomake#Make(1, [g:success_maker])
  NeomakeTestsWaitForFinishedJobs
  AssertNeomakeMessage 'Cleaning old signs in buffer '.bufnr.':  {'.bufnr.': {2: 5000}}', 3, {}

  bd!
  call neomake#signs#Reset(bufnr, 'file')
  call neomake#signs#CleanAllOldSigns('file')
  AssertNeomakeMessage 'Removing signs {file: {}, project: {}}', 3

Execute (Placing signs in project mode):
  let maker = neomake#utils#MakerFromCommand('echo 1:1: W: warning')
  call extend(maker, {
        \ 'name': 'custom_maker',
        \ 'errorformat': '%E%f:%l: %t: %m',
        \ }, 'error')

  new
  let bufnr = bufnr('%')
  file 1
  call neomake#Make(0, [maker])
  NeomakeTestsWaitForFinishedJobs
  AssertNeomakeMessage 'Placing sign: sign place 7000 line=1 name=neomake_warn buffer='.bufnr
  bd!

  call neomake#signs#Reset(bufnr, 'project')
  call neomake#signs#CleanAllOldSigns('project')
  AssertNeomakeMessage 'Cleaning old signs in buffer '.bufnr.':  {'.bufnr.': {1: 7000}}', 3, {}
  AssertNeomakeMessage 'Unplacing sign: sign unplace 7000 buffer='.bufnr

Execute (Signs are wiped when buffer gets wiped):
  new
  call neomake#signs#PlaceSign({'type': 'E', 'bufnr': bufnr('%'), 'lnum': 1}, 'file')
  bwipe
  " Should not cause 'E158: Invalid buffer name'
  call neomake#signs#RedefineSign('neomake_foobar', {})
