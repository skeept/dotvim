Include: include/setup.vader

" " Execute ():
" "   new
" "   call setloclist(0, [])
" " "   call setloclist(0, [{'lnum': 1, 'bufnr': 0, 'col': 0, 'vcol': 0, 'nr': -1, 'type': 'E', 'maker_name': 'unnamed_maker', 'text': 'error'}], 'r')
" "
" "   call setloclist(0, [{'lnum': 1, 'bufnr': 0, 'col': 0, 'valid': 0, 'vcol': 0, 'nr': -1, 'type': 'E', 'pattern': '', 'text': 'error1'}])
" "   let c = winnr('$')
" "   lwindow
" "   AssertEqual c, winnr('$')
" "   bwipe
" "   Assert 0, 'end'
"
"
" Execute (Postprocessing updates list):
"   new
"   edit tests/fixtures/errors.sh
"   Save &filetype
"   set ft=sh
"   RunNeomake sh
"   let list = getloclist(0)
"   AssertNotEqual list, [], 'loclist is not empty'
"
"   let s:sh_maker = neomake#makers#ft#sh#sh()
"   function Postprocess(entry)
"     let a:entry.text .= ' SUFFIX'
"   endfunction
"   function! neomake#makers#ft#sh#sh()
"     return extend(s:sh_maker, {'postprocess': function('Postprocess')})
"   endfunction
"   let expected_list = map(list, 'extend(v:val, {"text": v:val.text." SUFFIX"})')
"   RunNeomake sh
"   AssertEqual getloclist(0), expected_list
"
"   " Undo monkeypatching.
"   runtime autoload/neomake/makers/ft/sh.vim
"   delfunction Postprocess
"   bwipe
"
" Execute (AddExprCallback with changed windows inbetween):
"   if NeomakeAsyncTestsSetup()
"     Save g:neomake_tests_postprocess_count
"     let g:neomake_tests_postprocess_count = 0
"     function! Postprocess(entry)
"       let a:entry.text .= ' SUFFIX:'.(g:neomake_tests_postprocess_count/2)
"       let g:neomake_tests_postprocess_count += 1
"     endfunction
"
"     Save g:neomake_verbose
"     " For the 'Modified list entry' debug message.
"     let g:neomake_verbose = 3
"
"     let options = {
"       \ 'postprocess': function('Postprocess'),
"       \ 'buffer_output': 0,
"       \ 'append_file': 0,
"       \ }
"     let maker_1 = neomake#utils#MakerFromCommand('echo 1a; sleep .1; echo 1b')
"     call extend(maker_1, extend(copy(options), {'name': 'maker1'}))
"     let maker_2 = neomake#utils#MakerFromCommand('echo 2')
"     call extend(maker_2, extend(copy(options), {'name': 'maker2'}))
"
"     " Start 2 makers.
"     call neomake#Make(1, [maker_1, maker_2])
"     " Wait until partly finished.
"     let maxwait = 50
"     while g:neomake_tests_postprocess_count < 2 && maxwait
"       sleep 10m
"       let maxwait -= 1
"     endwhile
"     Assert maxwait > 0, 'postprocessing was not triggered'
"     AssertEqual g:neomake_tests_postprocess_count, 2, 'postprocess count is != 2: '.g:neomake_tests_postprocess_count
"     let loclist_texts = map(copy(getloclist(0)), 'v:val.text')
"     AssertEqual sort(copy(loclist_texts)), ['1a SUFFIX:0', '2 SUFFIX:0']
"
"     " Start maker in new window (same winnr!)
"     topleft new
"     call neomake#Make(1, [maker_2])
"     " Go to previous window, let previous job finish.
"     wincmd j
"     NeomakeTestsWaitForFinishedJobs
"     AssertNeomakeMessage 'Output left to be processed, not cleaning job yet.'
"     AssertEqual map(copy(getloclist(0)), 'v:val.text'),
"       \ loclist_texts + ['1b SUFFIX:1']
"     wincmd k
"     AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['2 SUFFIX:1']
"     bwipe
"     AssertNeomakeMessage "Modified list entry (postprocess): text: '2' => '2 SUFFIX:1'."
"
"     delfunction Postprocess
"   endif
"
" Execute (Goes back to original window after opening list):
"   Save g:neomake_open_list
"   let g:neomake_open_list = 2
"   new
"   let winnr = winnr()
"   let wincount = winnr('$')
"   call neomake#Make(1, [g:error_maker])
"   NeomakeTestsWaitForFinishedJobs
"
"   AssertEqual winnr, winnr()
"   AssertEqual wincount + 1, winnr('$'), 'Location list appeared'
"   AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type]'), [['error', 'E']]
"
"   CallNeomake 1, [g:true_maker]
"   AssertEqual getloclist(0), []
"   AssertEqual wincount, winnr('$'), 'Location list was closed'
"   bwipe

Execute (open_list=2 handling with get_list_entries maker and invalid entries):
  Save g:neomake_open_list
  let g:neomake_open_list = 2
  new
  let winnr = winnr()
  let wincount = winnr('$')

  let maker1 = {}
  function! maker1.get_list_entries(...)
    return [{'type': 'E', 'lnum': 1, 'text': 'error1'}]
  endfunction
  let maker2 = {}
  function! maker2.get_list_entries(...)
    return [{'type': 'E', 'lnum': 2, 'text': 'error2'}]
  endfunction
  CallNeomake 1, [maker1, maker2]
  AssertEqual map(getloclist(0), '[v:val.text, v:val.type, v:val.valid]'), [
  \ ['error1', 'E', 0],
  \ ['error2', 'E', 0]]

  AssertEqual winnr, winnr()
  if has('patch-7.4.379')
    AssertEqual wincount, winnr('$'), 'Location list did not appear for invalid entries'
  else
    AssertEqual wincount + 1, winnr('$'), 'Location list appeared for invalid entries (fixed in 7.4.379)'
  endif

  CallNeomake 1, [g:true_maker]
  AssertEqual getloclist(0), []
  bwipe

Execute (open_list=2 handling with get_list_entries maker and invalid entries (qflist)):
  Save g:neomake_open_list
  let g:neomake_open_list = 2
  new
  let winnr = winnr()
  let wincount = winnr('$')

  let maker1 = {}
  function! maker1.get_list_entries(...)
    return [{'type': 'E', 'lnum': 1, 'text': 'error1'}]
  endfunction
  let maker2 = {}
  function! maker2.get_list_entries(...)
    return [{'type': 'E', 'lnum': 2, 'text': 'error2'}]
  endfunction
  CallNeomake 0, [maker1, maker2]
  AssertEqual map(getqflist(), '[v:val.text, v:val.type, v:val.valid]'), [
  \ ['error1', 'E', 0],
  \ ['error2', 'E', 0]]

  AssertEqual winnr, winnr()
  if has('patch-7.4.379')
    AssertEqual wincount, winnr('$'), 'Quickfix list did not appear for invalid entries'
  else
    AssertEqual wincount + 1, winnr('$'), 'Quickfix list appeared for invalid entries (fixed in 7.4.379)'
  endif

  CallNeomake 0, [g:true_maker]
  AssertEqual getqflist(), []
  bwipe

Execute (open_list=2 handling with get_list_entries maker and valid entries):
  Save g:neomake_open_list
  let g:neomake_open_list = 2
  new
  let winnr = winnr()
  let wincount = winnr('$')

  let maker = {}
  function! maker.get_list_entries(...)
    return [{'type': 'E', 'lnum': 1, 'text': 'error', 'bufnr': bufnr('%')}]
  endfunction
  CallNeomake 1, [maker]
  AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type, v:val.valid]'), [['error', 'E', 1]]

  AssertEqual winnr, winnr()
  AssertEqual wincount + 1, winnr('$'), 'Location list appeared'

  CallNeomake 1, [g:true_maker]
  AssertEqual getloclist(0), []
  AssertEqual wincount, winnr('$'), 'Location list was closed'
  bwipe

Execute (Stays in location window with :lwindow in QuickFixCmdPost (like vim-qf)):
  if !has('patch-7.4.2299')
    NeomakeTestsSkip 'Only for 7.4.2299 (vim-qf issue)'
  else
    Save g:neomake_open_list
    let g:neomake_open_list = 2
    new
    let winnr = winnr()
    let wincount = winnr('$')

    augroup neomake_tests
      " Simulates vim-qf, opening the list on errors automatically.
      " Should be fixed in vim-qf (https://github.com/romainl/vim-qf/pull/48).
      " Using `:noautocmd` with Neomake's laddexpr is not really an option.
      autocmd QuickFixCmdPost laddexpr lwindow
    augroup END

    call neomake#Make(1, [g:error_maker])
    NeomakeTestsWaitForFinishedJobs
    AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type]'), [['error', 'E']]

    AssertEqual wincount + 1, winnr('$'), 'Location list appeared'
    " Not what you expect when being unaware of the autocmd, but it is like that.
    AssertNotEqual winnr, winnr()
    exe winnr.'wincmd w'
    lclose
    bwipe
  endif

Execute (Goes back to original window with vim-qf):
  if !has('patch-7.4.2299')
    NeomakeTestsSkip 'Only for 7.4.2299 (vim-qf issue)'
  else
    Save g:neomake_open_list
    let g:neomake_open_list = 2

    Save g:loaded_qf, g:qf_auto_open_quickfix, g:qf_auto_open_loclist
    " Simulate vim-qf being used.
    let g:loaded_qf = 1

    new
    let winnr = winnr()
    let wincount = winnr('$')

    augroup neomake_tests
      autocmd QuickFixCmdPost laddexpr AssertEqual g:qf_auto_open_loclist, 0
      autocmd QuickFixCmdPost caddexpr AssertEqual g:qf_auto_open_quickfix, 0
    augroup END

    " Location list.
    call neomake#Make(1, [g:error_maker])
    NeomakeTestsWaitForFinishedJobs
    AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type]'), [['error', 'E']]

    AssertEqual wincount + 1, winnr('$'), 'Location list appeared'
    AssertEqual winnr, winnr()
    exe winnr.'wincmd w'
    lclose
    AssertEqual wincount, winnr('$')
    Assert !exists('g:qf_auto_open_loclist')

    " Quickfix list.
    call neomake#Make(0, [g:error_maker])
    NeomakeTestsWaitForFinishedJobs
    AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type]'), [['error', 'E']]
    Assert !exists('g:qf_auto_open_quickfix')

    AssertEqual wincount + 1, winnr('$'), 'Location list appeared'
    AssertEqual winnr, winnr()
    exe winnr.'wincmd w'
    cclose
    bwipe
  endif

Execute (Goes back to original window with vim-qf (0-setting)):
  if !has('patch-7.4.2299')
    NeomakeTestsSkip 'Only for 7.4.2299 (vim-qf issue)'
  else
    Save g:neomake_open_list
    let g:neomake_open_list = 2

    Save g:loaded_qf, g:qf_auto_open_quickfix, g:qf_auto_open_loclist
    " Simulate vim-qf being used.
    let g:loaded_qf = 1
    let g:qf_auto_open_loclist = 0
    let g:qf_auto_open_quickfix = 0

    new
    let winnr = winnr()
    let wincount = winnr('$')

    augroup neomake_tests
      autocmd QuickFixCmdPost laddexpr AssertEqual g:qf_auto_open_loclist, 0
      autocmd QuickFixCmdPost caddexpr AssertEqual g:qf_auto_open_quickfix, 0
    augroup END

    " Location list.
    call neomake#Make(1, [g:error_maker])
    NeomakeTestsWaitForFinishedJobs
    AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type]'), [['error', 'E']]

    AssertEqual wincount + 1, winnr('$'), 'Location list appeared'
    AssertEqual winnr, winnr()
    exe winnr.'wincmd w'
    lclose
    AssertEqual wincount, winnr('$')

    " Quickfix list.
    call neomake#Make(0, [g:error_maker])
    NeomakeTestsWaitForFinishedJobs
    AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type]'), [['error', 'E']]

    AssertEqual wincount + 1, winnr('$'), 'Location list appeared'
    AssertEqual winnr, winnr()
    exe winnr.'wincmd w'
    cclose
    bwipe
  endif

Execute (Goes back to original window after opening list (wincmd in autocmd)):
  if !has('patch-7.4.2299')
    NeomakeTestsSkip 'Only for 7.4.2299'
  else
    Save g:neomake_open_list
    let g:neomake_open_list = 2
    new
    new
    let winnr = winnr()
    let wincount = winnr('$')

    augroup neomake_tests
      autocmd QuickFixCmdPost laddexpr 2wincmd w
    augroup END

    call neomake#Make(1, [g:error_maker])
    NeomakeTestsWaitForFinishedJobs
    AssertEqual map(copy(getloclist(winnr)), '[v:val.text, v:val.type]'), [['error', 'E']]
    AssertEqual 2, winnr()

    AssertNotEqual wincount + 1, winnr('$'), 'Location list has not appeared yet'
    Assert exists('#neomake_event_queue#WinEnter'), 'autocmd was setup'
    AssertNeomakeMessage 'Queueing action: s:ProcessEntries for WinEnter.'

    " Go to first window for wincmd-p check.
    1wincmd w
    AssertNeomakeMessage 'action queue: processing for WinEnter (1 items, winnr: 1).'
    AssertNeomakeMessage 'action queue: processed 0 items.'
    exe winnr.'wincmd w'
    AssertNeomakeMessage 'action queue: processing for WinEnter (1 items, winnr: 3).'
    AssertEqual wincount + 1, winnr('$'), 'Location list has appeared'

    Assert !exists('#neomake_event_queue#WinEnter'), 'autocmd was deleted'
    AssertNeomakeMessage 'Handling location list: executing lwindow.'
    AssertNeomakeMessage 'action queue: processed 1 items.'

    wincmd p
    AssertEqual 1, winnr()
    3wincmd w
    lclose
    bwipe
    bwipe
  endif

Execute (open_list=1 with job: just opens location window):
  Save g:neomake_open_list
  let g:neomake_open_list = 1
  new
  new
  let winnr = winnr()
  let wincount = winnr('$')

  call neomake#Make(1, [g:error_maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(copy(getloclist(winnr)), '[v:val.text, v:val.type]'), [['error', 'E']]
  AssertEqual wincount + 1, winnr('$'), 'Location list has appeared'

  Assert !exists('#neomake_event_queue#WinEnter'), 'autocmd was not setup'
  AssertNeomakeMessage 'Handling location list: executing lwindow.'

  AssertEqual winnr(), winnr('$'), 'In location window.'
  wincmd p

  call neomake#Make(1, [g:true_maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual wincount, winnr('$'), 'Location list has been closed'
  exe winnr 'wincmd w'

  bwipe
  bwipe

Execute (open_list=0: does not open location window):
  if exists('#neomake_event_queue')
    augroup! neomake_event_queue
  endif
  Save g:neomake_open_list
  let g:neomake_open_list = 0
  new
  let wincount = winnr('$')

  call neomake#Make(1, [g:error_maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type]'), [['error', 'E']]
  AssertEqual wincount, winnr('$'), 'Location list has not appeared'

  Assert !exists('#neomake_event_queue#WinEnter'), 'autocmd was not setup'
  Assert !exists('#neomake_event_queue'), 'augroup does not exist'
  bwipe

Execute (open_list=1 with height=0: does not open location window):
  Save g:neomake_open_list, g:neomake_list_height
  let g:neomake_open_list = 1
  let g:neomake_list_height = 0
  new
  let wincount = winnr('$')

  call neomake#Make(1, [g:error_maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(copy(getloclist(0)), '[v:val.text, v:val.type]'), [['error', 'E']]
  AssertEqual wincount, winnr('$'), 'Location list has not appeared'

  Assert !exists('#neomake_event_queue#WinEnter'), 'autocmd was not setup'
  Assert !exists('#neomake_event_queue'), 'augroup does not exist'
  bwipe

Execute (location list gets created with entries from first job, closed only after all jobs finished):
  Save g:neomake_open_list
  let g:neomake_open_list = 2
  new
  let wincount = winnr('$')

  let b:neomake_serialize = 1
  call neomake#Make(1, [g:error_maker, g:true_maker])
  if neomake#has_async_support()
    NeomakeTestsWaitForNextFinishedJob
    AssertEqual map(getloclist(0), '[v:val.text, v:val.type, v:val.valid]'), [['error', 'E', 1]]
    AssertEqual wincount + 1, winnr('$'), 'Location list has appeared'
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual map(getloclist(0), '[v:val.text, v:val.type, v:val.valid]'), [['error', 'E', 1]]
  AssertEqual wincount + 1, winnr('$'), 'Location list has appeared'

  let maker1 = NeomakeTestsCommandMaker('maker1', 'sleep .1')
  let maker2 = NeomakeTestsCommandMaker('maker2', 'true')
  let b:neomake_serialize = 1
  call neomake#Make(1, [maker1, maker2])
  if neomake#has_async_support()
    NeomakeTestsWaitForNextFinishedJob
    AssertEqual map(getloclist(0), '[v:val.text, v:val.type, v:val.valid]'), [['error', 'E', 1]]
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual getloclist(0), []
  AssertEqual wincount, winnr('$'), 'Location list was closed'
  bwipe
