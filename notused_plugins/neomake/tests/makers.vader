Include: include/setup.vader

Execute (Run EnabledMakers for all filetype makers):
  " This is meant to catch issues like https://github.com/neomake/neomake/pull/555.
  let glob_args = [fnamemodify(g:vader_file, ':p:h')
                 \ .'/../autoload/neomake/makers/ft/*.vim', 1, 1]
  " NOTE: not using a list to support older Vim (on Travis).
  let ft_makers = split(call('glob', glob_args[0:-2]), '\n')

  for maker_file in ft_makers
    let ft = fnamemodify(maker_file, ':t:r')
    let enabled = call('neomake#makers#ft#'.ft.'#EnabledMakers', [])
  endfor
  AssertEqual exists('*neomake#makers#ft#neomake_tests#EnabledMakers'), 1

Execute (neomake#GetEnabledMakers without make_id):
  runtime autoload/neomake.vim

  Save g:neomake_myft_enabled_makers
  let g:neomake_myft_enabled_makers = ['nonexisting_custom']
  let makers = neomake#GetEnabledMakers('myft')
  AssertNeomakeMessage 'Maker not found: nonexisting_custom', 0, {}

Execute (Neomake with non-existing maker (configured)):
  Save &filetype
  set filetype=myft

  Save g:neomake_myft_enabled_makers
  let g:neomake_myft_enabled_makers = ['nonexisting_custom']

  let make_id_before = neomake#GetStatus().last_make_id
  RunNeomake
  let make_id = neomake#GetStatus().last_make_id
  AssertNeomakeMessage 'Maker not found: nonexisting_custom', 0, {'make_id': make_id}
  AssertNeomakeMessage 'Nothing to make: no enabled makers.', 3, {'make_id': make_id}
  AssertEqual len(g:neomake_test_messages), 2
  AssertEqua make_id_before + 1, neomake#GetStatus().last_make_id

Execute (Neomake with non-existing default makers):
  Save &filetype
  set filetype=neomake_tests

  RunNeomake
  AssertNeomakeMessage "Exe (maker_without_exe) of auto-configured maker maker_without_exe is not executable, skipping.", 3

  RunNeomake
  AssertNeomakeMessage "Exe (maker_without_exe) of auto-configured maker maker_without_exe is not executable, skipping.", 3

Execute (Neomake with non-existing default makers, explicitly called):
  Save &filetype
  set filetype=neomake_tests

  RunNeomake maker_without_exe
  AssertNeomakeMessage "Exe (maker_without_exe) of maker maker_without_exe is not executable.", 0

  RunNeomake maker_without_exe
  AssertNeomakeMessage "Exe (maker_without_exe) of maker maker_without_exe is not executable.", 3

Execute (neomake#GetEnabledMakers with defaults):
  Save &filetype
  set filetype=neomake_tests
  let makers = neomake#GetEnabledMakers(&ft)
  AssertEqual map(copy(makers), 'v:val.auto_enabled'), [1]
  AssertEqual len(g:neomake_test_messages), 0

Execute (neomake#GetEnabledMakers with configuration):
  Save &filetype
  set filetype=neomake_tests

  Save b:neomake_neomake_tests_enabled_makers
  let b:neomake_neomake_tests_enabled_makers = ['maker_without_exe']

  let makers = neomake#GetEnabledMakers(&ft)
  AssertEqual map(copy(makers), 'v:val.auto_enabled'), [0]
  AssertEqual len(g:neomake_test_messages), 0

Execute (neomake#GetEnabledMakers without filetype):
  Save g:neomake_enabled_makers
  unlet! g:neomake_enabled_makers

  let makers = neomake#GetEnabledMakers()
  AssertEqual makers, []

  Save g:neomake_mymaker_maker
  let g:neomake_mymaker_maker = {}
  let g:neomake_enabled_makers = ['mymaker']
  let makers = neomake#GetEnabledMakers()
  AssertEqual map(copy(makers), '[v:val.name, v:val.auto_enabled]'),
  \ [['mymaker', 0]]

  " Should use a more specific maker based on &filetype.
  set filetype=myft
  let g:neomake_myft_mymaker_maker = {}
  let makers = neomake#GetEnabledMakers()
  AssertEqual map(copy(makers), '[v:val.name, v:val.auto_enabled]'),
  \ [['mymaker', 0]]

  " Should fallback to global maker if not found through filetype.
  unlet g:neomake_myft_mymaker_maker
  let makers = neomake#GetEnabledMakers()
  AssertEqual map(copy(makers), '[v:val.name, v:val.auto_enabled]'),
  \ [['mymaker', 0]]

  AssertEqual len(g:neomake_test_messages), 0
