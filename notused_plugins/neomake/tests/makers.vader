Include: include/setup.vader

Execute (Instantiate all default makers):
  " This is meant to catch issues like https://github.com/neomake/neomake/pull/555.
  let glob_args = [fnamemodify(g:vader_file, ':p:h')
                 \ .'/../autoload/neomake/makers/ft/*.vim', 1, 1]
  " NOTE: not using a list to support older Vim (on Travis).
  let ft_makers = split(call('glob', glob_args[0:-2]), '\n')

  let errors = []
  for maker_file in ft_makers
    let ft = fnamemodify(maker_file, ':t:r')
    if ft ==# 'haskell'
      NeomakeTestsSkip 'Skipping haskell - expensive setup'
      continue
    endif
    let f = 'neomake#makers#ft#'.ft.'#EnabledMakers'
    try
      call call(f, [])
    catch
      call add(errors, 'Error when calling '.f.': '.v:exception)
    endtry

    for m in neomake#GetMakers(ft)
      try
        let maker = neomake#GetMaker(m, ft)
      catch
        call add(errors, 'Could not load maker '.string(m).' for filetype '.ft.': '.v:exception)
      endtry
    endfor
  endfor

  for m in neomake#GetProjectMakers()
    try
      let maker = neomake#GetMaker(m)
    catch
      call add(errors, 'Could not load project maker '.string(m).': '.v:exception)
    endtry
  endfor
  AssertEqual exists('*neomake#makers#ft#neomake_tests#EnabledMakers'), 1
  Assert empty(errors), "Errors when loading makers:\n - ".join(errors, "\n - ")

Execute (neomake#GetEnabledMakers without make_id):
  runtime autoload/neomake.vim

  Save g:neomake_myft_enabled_makers
  let g:neomake_myft_enabled_makers = ['nonexisting_custom']
  let makers = neomake#GetEnabledMakers('myft')
  AssertNeomakeMessage 'Maker not found (for filetype myft): nonexisting_custom.', 0, {}

Execute (Neomake with non-existing maker (configured)):
  Save &filetype
  set filetype=myft

  Save g:neomake_myft_enabled_makers
  let g:neomake_myft_enabled_makers = ['nonexisting_custom']

  let make_id_before = neomake#GetStatus().last_make_id
  RunNeomake
  let make_id = neomake#GetStatus().last_make_id
  let log_context = {'make_id': make_id, 'bufnr': bufnr('%')}
  AssertNeomakeMessage 'Maker not found (for filetype myft): nonexisting_custom.', 0, log_context
  AssertNeomakeMessage 'Nothing to make: no enabled file mode makers (filetype=myft).', 3, log_context
  AssertNeomakeMessage 'Cleaning make info.', 3, {'make_id': make_id}
  AssertEqual len(g:neomake_test_messages), 3
  AssertEqual make_id_before + 1, neomake#GetStatus().last_make_id

Execute (Neomake with non-existing default makers):
  call g:NeomakeSetupAutocmdWrappers()
  new
  set filetype=neomake_tests
  Save g:neomake_test_enabledmakers
  let g:neomake_test_enabledmakers = ['maker_without_exe', 'nonexisting']
  RunNeomake
  AssertNeomakeMessage 'Maker not found (for filetype neomake_tests): nonexisting.', 3
  AssertNeomakeMessage "Exe (maker_without_exe) of auto-configured maker maker_without_exe is not executable, skipping.", 3
  AssertNeomakeMessage 'Nothing to make: no valid makers.', 3
  AssertEqual 0, len(g:neomake_test_jobfinished)
  AssertEqual 0, len(g:neomake_test_finished)
  bwipe

Execute (Neomake with non-existing default maker handles following makers):
  call g:NeomakeSetupAutocmdWrappers()
  new
  set filetype=neomake_tests
  Save g:neomake_test_enabledmakers
  let g:neomake_test_enabledmakers = ['maker_without_exe', 'echo_maker']
  RunNeomake
  AssertNeomakeMessage "Exe (maker_without_exe) of auto-configured maker maker_without_exe is not executable, skipping.", 3
  AssertNeomakeMessage 'Running makers: echo_maker (auto).'
  AssertEqual 1, len(g:neomake_test_jobfinished), 'echo_maker should have run'
  AssertEqual 1, len(g:neomake_test_finished)

  RunNeomake
  AssertNeomakeMessage "Exe (maker_without_exe) of auto-configured maker maker_without_exe is not executable, skipping.", 3
  bwipe

Execute (Neomake with non-existing default makers, explicitly called):
  Save &filetype
  set filetype=neomake_tests

  RunNeomake maker_without_exe
  AssertNeomakeMessage "Exe (maker_without_exe) of maker maker_without_exe is not executable.", 0

  RunNeomake maker_without_exe
  AssertNeomakeMessage "Exe (maker_without_exe) of maker maker_without_exe is not executable.", 3

Execute (neomake#GetEnabledMakers with defaults):
  new
  set filetype=neomake_tests
  let makers = neomake#GetEnabledMakers(&ft)
  AssertEqual map(copy(makers), 'v:val.auto_enabled'), [1]
  AssertNeomakeMessage 'Maker not found (for filetype neomake_tests): nonexisting.', 3
  AssertEqual len(g:neomake_test_messages), 1
  bwipe

Execute (neomake#GetEnabledMakers with configuration):
  Save &filetype
  set filetype=neomake_tests

  Save b:neomake_neomake_tests_enabled_makers
  let b:neomake_neomake_tests_enabled_makers = ['maker_without_exe']

  let makers = neomake#GetEnabledMakers(&ft)
  AssertEqual map(copy(makers), 'v:val.auto_enabled'), [0]
  AssertEqual len(g:neomake_test_messages), 0

Execute (neomake#GetEnabledMakers without filetype):
  Save g:neomake_enabled_makers
  unlet! g:neomake_enabled_makers

  let makers = neomake#GetEnabledMakers()
  AssertEqual makers, []

  Save g:neomake_mymaker_maker
  let g:neomake_mymaker_maker = {}
  let g:neomake_enabled_makers = ['mymaker']
  let makers = neomake#GetEnabledMakers()
  AssertEqual map(copy(makers), '[v:val.name, v:val.auto_enabled]'),
  \ [['mymaker', 0]]

  " Should use a more specific maker based on &filetype.
  set filetype=myft
  let g:neomake_myft_mymaker_maker = {}
  let makers = neomake#GetEnabledMakers()
  AssertEqual map(copy(makers), '[v:val.name, v:val.auto_enabled]'),
  \ [['mymaker', 0]]

  " Should fallback to global maker if not found through filetype.
  unlet g:neomake_myft_mymaker_maker
  let makers = neomake#GetEnabledMakers()
  AssertEqual map(copy(makers), '[v:val.name, v:val.auto_enabled]'),
  \ [['mymaker', 0]]

  AssertEqual len(g:neomake_test_messages), 0

Execute (neomake#GetMaker errors):
  AssertThrows call neomake#GetMaker('cargo', 'foo')
  AssertEqual g:vader_exception, 'Neomake: Maker not found (for filetype foo): cargo'

Execute (neomake#GetMaker for project maker):
  Save g:neomake_enabled_makers
  let g:neomake_enabled_makers = ['cargo']
  set ft=myft

  AssertThrows call neomake#GetMaker('cargo', 'foo')
  AssertEqual g:vader_exception, 'Neomake: Maker not found (for filetype foo): cargo'

Execute (maker.fn can set env var):
  let maker = {
  \ 'exe': 'sh',
  \ 'args': ['-c', 'echo MYENV:$MYENV'],
  \ 'append_file': 0,
  \ 'errorformat': '%m',
  \ }
  function! maker.fn(jobinfo)
    let self.args = ['MYENV=custom', self.exe] + self.args
    let self.exe = 'env'
    let self.errorformat = '%m'
    return self
  endfunction

  let prev_maker = deepcopy(maker)
  call neomake#Make(1, [maker])
  AssertEqual maker, prev_maker
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(getloclist(0), 'v:val.text'), ['MYENV:custom']

Execute (Set env from maker config):
  Save g:neomake_rust_cargo_maker

  let maker = neomake#GetMaker('cargo', 'rust')
  let maker.args = ['-c', 'env MYENV:$MYENV'] + [maker.exe] + maker.args
  let maker.exe = 'sh'

  let g:neomake_rust_cargo_maker = maker

  let makers = neomake#GetEnabledMakers('rust')
  AssertEqual makers[0], extend(maker, {'auto_enabled': 1})

Execute (Correct function binding from base maker):
  let maker = neomake#GetMaker({'name': 'maker1'})
  AssertEqual maker.exe, 'maker1'
  " Not sure about this one, but it asserts that there is no dict in the string
  " representation of the object's function, when dumping the object.  This was
  " different before, when assigning the function from the base maker dict.
  Assert string(maker) =~# '\v''_get_argv'': function\(''\d+''\),', 'Simple _get_argv'

Execute (Makers: process_output):
  call neomake#statusline#ResetCounts()
  call g:NeomakeSetupAutocmdWrappers()

  Save g:neomake_test_entries
  let g:neomake_test_entries = [{
    \ 'bufnr': bufnr('%'),
    \ 'filename': 'not_used_with_valid_bufnr',
    \ 'lnum': 23,
    \ 'pattern': '',
    \ 'col': 42,
    \ 'vcol': 0,
    \ 'nr': 4711,
    \ 'text': 'error message',
    \ 'type': 'E',
    \ }]

  function! Neomake_test_maker_process_output(context) abort
    AssertEqual ['maker_output'], a:context.output
    AssertEqual 'stdout', a:context.source
    return deepcopy(g:neomake_test_entries)
  endfunction

  let maker = {
  \ 'name': 'mymaker',
  \ 'exe': 'printf',
  \ 'args': ['maker_output'],
  \ 'append_file': 0,
  \ 'process_output': function('Neomake_test_maker_process_output')}

  call neomake#Make(1, [maker])
  NeomakeTestsWaitForFinishedJobs

  let expected = copy(g:neomake_test_entries)[0]
  " valid=1 gets added
  let expected.valid = 1
  " filename is removed
  unlet expected.filename
  AssertEqual getloclist(0), [expected]

  AssertEqual len(g:neomake_test_countschanged), 1
  AssertEqual len(g:neomake_test_jobfinished), 1
  AssertEqual len(g:neomake_test_finished), 1

Execute (Makers: get_list_entries):
  call neomake#statusline#ResetCounts()
  call g:NeomakeSetupAutocmdWrappers()

  Save g:neomake_test_entries
  let g:neomake_test_entries = [{
    \ 'bufnr': bufnr('%'),
    \ 'filename': 'not_used_with_valid_bufnr',
    \ 'lnum': 23,
    \ 'pattern': '',
    \ 'col': 42,
    \ 'vcol': 0,
    \ 'nr': 4711,
    \ 'text': 'error message',
    \ 'type': 'E',
    \ }]

  let maker = {}
  function! maker.get_list_entries(...) abort dict
    let jobinfo = a:1
    AssertEqual keys(jobinfo.maker), ['name', 'get_list_entries']
    Assert !has_key(self, 'errorformat'), 'errorformat is not required'
    return deepcopy(g:neomake_test_entries)
  endfunction

  let maker = neomake#GetMaker(maker)
  let jobinfos = neomake#Make(1, [maker])
  Assert len(jobinfos), 1

  " valid=1 gets added
  let expected = map(copy(g:neomake_test_entries), "extend(v:val, {'valid': 1})")
  " filename and maker_name is removed
  let expected = map(expected, "filter(v:val, 'v:key != \"filename\"')")
  AssertEqual getloclist(0), g:neomake_test_entries

  AssertEqual len(g:neomake_test_countschanged), 1
  AssertEqual len(g:neomake_test_jobfinished), 1
  AssertEqual len(g:neomake_test_finished), 1

Execute (Makers: get_list_entries with non-list return value):
  call neomake#statusline#ResetCounts()
  call g:NeomakeSetupAutocmdWrappers()

  let maker = {}
  function! maker.get_list_entries(...) abort dict
  endfunction

  CallNeomake 1, [maker]
  AssertNeomakeMessage 'unnamed_maker: getting entries via get_list_entries.'
  AssertNeomakeMessage 'The get_list_entries method for maker unnamed_maker did not return a list, but: 0.', 0

  AssertEqual len(g:neomake_test_countschanged), 0
  AssertEqual len(g:neomake_test_jobfinished), 1
  AssertEqual len(g:neomake_test_finished), 1

Execute (Makers: get_list_entries via config):
  call g:NeomakeSetupAutocmdWrappers()
  let maker = {'name': 'mymaker', 'exe': 'doesnotexist'}

  Save g:neomake_test_entries
  let g:neomake_test_entries = [{
    \ 'filename': 'unloaded_filename_without_bufnr',
    \ 'lnum': 23,
    \ 'pattern': '',
    \ 'col': 42,
    \ 'vcol': 0,
    \ 'nr': 4711,
    \ 'text': 'error message',
    \ 'type': 'E',
    \ }]

  function! NeomakeTestGetEntries(...) abort dict
    let a = a:000
    Assert !has_key(self, 'errorformat'), 'errorformat is not required'
    return deepcopy(g:neomake_test_entries)
  endfunction

  new
  let bufnr = bufnr('%')
  set filetype=neomake_tests
  let b:neomake_neomake_tests_enabled_makers = [maker]
  let b:neomake_neomake_tests_mymaker_get_list_entries = function('NeomakeTestGetEntries')
  RunNeomake

  " valid=1 gets added
  let expected = map(copy(g:neomake_test_entries), "extend(v:val, {'valid': 1})")
  " filename is removed
  let expected = map(expected, "filter(v:val, 'v:key != \"filename\"')")
  " Unlisted buffer gets added for filename.
  let unlisted_bufnr = bufnr('unloaded_filename_without_bufnr')
  Assert !empty(unlisted_bufnr), 'unlisted_bufnr is not empty'
  let expected[0].bufnr = unlisted_bufnr

  AssertEqual getloclist(0), expected

  AssertEqual len(g:neomake_test_countschanged), 1
  AssertEqual len(g:neomake_test_jobfinished), 1
  AssertEqual len(g:neomake_test_finished), 1
  bwipe
  bwipe unloaded_filename_without_bufnr

Execute (get_list_entries: based on example from doc):
  NeomakeTestsMonkeypatchHighlights

  new
  call g:NeomakeSetupAutocmdWrappers()
  let buf1 = bufnr('%')
  file get_list_entries_buf1

  let winnr = winnr()

  let maker = {'name': 'My maker', 'my_orig_bufnr': buf1}
  function! maker.get_list_entries(jobinfo) abort
    " Change bufnr.
    new
    return [
      \ {'text': 'Some error', 'lnum': 1, 'bufnr': a:jobinfo.bufnr},
      \ {'text': 'Some warning without bufnr', 'type': 'W', 'lnum': 2,
      \  'col': 1, 'length': 5},
      \ {'text': 'Some warning', 'type': 'W', 'lnum': 2, 'col': 1,
      \  'bufnr': a:jobinfo.maker.my_orig_bufnr, 'length': 2},
      \ {'text': 'Some info', 'type': 'I', 'lnum': 3, 'col': 1,
      \  'filename': '/path/to/file'},
      \ {'text': 'Some non-type', 'type': '', 'lnum': 4, 'col': 1, 'length': 23,
      \  'filename': 'get_list_entries_buf1'},
      \ ]
  endfunction
  call neomake#Make(1, [maker])
  AssertNeomakeMessage 'Queueing action: s:ProcessEntries for WinEnter.'
  AssertEqual [], g:neomake_tests_highlight_lengths, 'No highlights have been added yet'
  AssertEqual [], getloclist(0)

  wincmd p
  AssertEqual winnr, winnr()
  AssertEqual [[1, -1], [2, 2], [3, -1], [4, 23]], g:neomake_tests_highlight_lengths

  let llist = getloclist(0)

  " Check that unlisted buffer was created for filename.
  let unlisted_bufnr = bufnr('/path/to/file')
  Assert !empty(unlisted_bufnr), 'Unlisted buffer was created (1)'
  Assert !buflisted(unlisted_bufnr), 'Unlisted buffer was created (2)'

  " Check that existing buffer was used for filename.
  AssertEqual llist[4].bufnr, buf1, 'get_list_entries_buf1 was picked up'

  AssertEqual llist, [
  \ {'lnum': 1, 'bufnr': buf1, 'col': 0, 'valid': 1, 'vcol': 0, 'nr': -1,
  \  'type': 'E', 'pattern': '', 'text': 'Some error'},
  \ {'lnum': 2, 'bufnr': 0, 'col': 1, 'valid': 0, 'vcol': 0, 'nr': -1,
  \  'type': 'W', 'pattern': '', 'text': 'Some warning without bufnr'},
  \ {'lnum': 2, 'bufnr': buf1, 'col': 1, 'valid': 1, 'vcol': 0, 'nr': -1,
  \  'type': 'W', 'pattern': '', 'text': 'Some warning'},
  \ {'lnum': 3, 'bufnr': unlisted_bufnr, 'col': 1, 'valid': 1, 'vcol': 0, 'nr': -1,
  \  'type': 'I', 'pattern': '', 'text': 'Some info'},
  \ {'lnum': 4, 'bufnr': buf1, 'col': 1, 'valid': 1, 'vcol': 0, 'nr': -1,
  \  'type': '', 'pattern': '', 'text': 'Some non-type'} ]
  wincmd p
  bwipe
  bwipe
  exe 'bwipe '.unlisted_bufnr

  AssertEqual len(g:neomake_test_countschanged), 1
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_jobfinished), 1

Execute (neomake#Make can be called with dict):
  call neomake#Make({})
  AssertNeomakeMessage 'Nothing to make: no enabled file mode makers (filetype=).', 3
