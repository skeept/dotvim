Include: include/setup.vader

Execute (GetEnabledMakers for javascript.jsx):
  AssertEqual map(neomake#GetEnabledMakers('javascript.jsx'), 'v:val.name'),
  \ ['jshint', 'eslint', 'jshint', 'jscs', 'eslint']

Execute (GetEnabledMakers for javascript):
  AssertEqual map(neomake#GetEnabledMakers('javascript'), 'v:val.name'),
  \ ['jshint', 'jscs', 'eslint']

Execute (GetEnabledMakers for jsx):
  AssertEqual map(neomake#GetEnabledMakers('jsx'), 'v:val.name'),
  \ ['jshint', 'eslint']


Execute (GetMakers for javascript.jsx):
  AssertEqual neomake#GetMakers('javascript.jsx'),
  \ ['eslint', 'eslint_d', 'jshint', 'jsxhint', 'rjsx', 'flow', 'gjslint', 'jscs', 'semistandard', 'standard', 'xo']

Execute (GetMakers for javascript):
  AssertEqual neomake#GetMakers('javascript'),
  \ ['eslint', 'eslint_d', 'flow', 'gjslint', 'jscs', 'jshint', 'rjsx', 'semistandard', 'standard', 'xo']

Execute (GetMakers for jsx):
  AssertEqual neomake#GetMakers('jsx'),
  \ ['eslint', 'eslint_d', 'jshint', 'jsxhint', 'rjsx']

Execute (standard maker in javascript.jsx):
  new
  set filetype=javascript.jsx
  let b:neomake_javascript_enabled_makers = ['standard']
  let b:neomake_javascript_standard_exe = 'true'
  let b:neomake_jsx_jshint_exe = 'true'
  let b:neomake_jsx_eslint_exe = 'true'
  AssertEqual map(neomake#GetEnabledMakers('javascript'), 'v:val.name'), ['standard']
  AssertEqual map(neomake#GetEnabledMakers('jsx'), 'v:val.name'), ['jshint', 'eslint']
  AssertEqual map(neomake#GetEnabledMakers('jsx.javascript'), 'v:val.name'), ['jshint', 'eslint', 'standard']
  AssertEqual neomake#utils#GetSortedFiletypes('jsx.javascript'), ['jsx', 'javascript']
  Neomake
  NeomakeTestsWaitForFinishedJobs
  AssertNeomakeMessage 'Running makers: jshint (auto), eslint (auto), standard'

  let b:neomake_jsx_enabled_makers = ['standard']
  Neomake
  NeomakeTestsWaitForFinishedJobs
  AssertNeomakeMessage 'Running makers: standard'
  bwipe
