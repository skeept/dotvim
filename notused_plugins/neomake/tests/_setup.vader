" Setup and helpers for all tests.

Before:
  if exists('g:neomake_verbose')
    let g:save_neomake_verbose = g:neomake_verbose
  endif
  let g:neomake_verbose = 3

After:
  if exists('g:save_neomake_verbose')
    let g:neomake_verbose = g:save_neomake_verbose
    unlet g:save_neomake_verbose
  else
    unlet g:neomake_verbose
  endif
  Restore

Execute:
  function! s:wait_for_finished_jobs()
    while len(neomake#GetJobs())
      sleep 10m
    endwhile
  endfunction
  command! NeomakeTestsWaitForFinishedJobs call s:wait_for_finished_jobs()

  command! -nargs=* RunNeomake Neomake <args>
    \ | NeomakeTestsWaitForFinishedJobs
  command! -nargs=* RunNeomakeProject NeomakeProject <args>
    \ | NeomakeTestsWaitForFinishedJobs

  " NOTE: NeomakeSh does not use '-bar'.
  command! -nargs=* RunNeomakeSh call RunNeomakeSh(<q-args>)
  function! RunNeomakeSh(...)
    call call('neomake#Sh', a:000)
    NeomakeTestsWaitForFinishedJobs
  endfunction

  function! g:NeomakeTestsGetMessages()
    return split(neomake#utils#redir('mess'), '\n')
  endfunction

  let s:tempname = tempname()

  function! g:NeomakeTestsEnsureExe(name)
    if executable(a:name)
      return
    endif
    let path_separator = exists('+shellslash') ? ';' : ':'
    let dir_separator = exists('+shellslash') ? '\' : '/'
    let tmpbindir = s:tempname . dir_separator . 'neomake-vader-tests'
    if $PATH !~# tmpbindir . path_separator
      call mkdir(tmpbindir, 'p', 0770)
      let $PATH = tmpbindir . ':' . $PATH
    endif
    let exe = tmpbindir.dir_separator.a:name
    if !filereadable(exe)
      " XXX: this is dirty (for 'Test Neomake on errors.sh with two makers').
      if a:name == 'shellcheck'
        call writefile(['#!/bin/sh', 'echo $1:1:1: warning: this is just a stub'], exe)
      else
        call writefile([], exe)
      endif
      if exists('*setfperm')
        call setfperm(exe, "rwxrwx---")
      else
        " XXX: Windows support
        call system('chmod 770 '.shellescape(exe))
      endif
    endif
    Log exe
  endfunction
