Include: include/setup.vader

Execute (Test Neomake on errors.sh with one maker):
  call g:NeomakeSetupAutocmdWrappers()
  e! tests/fixtures/errors.sh
  AssertEqual getline(1), '#! /bin/bash'

  call g:NeomakeTestsEnsureExe('shellcheck')
  AssertEqual neomake#GetEnabledMakers('sh'), ['sh', 'shellcheck']

  AssertEqual len(g:neomake_test_finished), 0
  AssertEqual len(g:neomake_test_countschanged), 0
  RunNeomake sh
  AssertNotEqual getloclist(0), [], 'loclist was not filled'
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_countschanged), 1

  let bufnr = bufnr('%')
  RunNeomake sh
  AssertEqual len(g:neomake_test_countschanged), 2
  for idx in range(0, len(g:neomake_test_countschanged))
    AssertEqual [idx, g:neomake_test_countschanged[1].file_mode], [idx, 1]
    AssertEqual [idx, g:neomake_test_countschanged[1].bufnr], [idx, bufnr]
  endfor

  " Basic verification that signs are placed.
  AssertNeomakeMessage 'Placing sign: sign place 5000 line=5 name=neomake_err buffer='.bufnr, 3, {}
  AssertNeomakeMessage 'Unplacing sign: sign unplace 5000 buffer='.bufnr, 3, {}
  AssertNeomakeMessage 'Placing sign: sign place 5000 line=5 name=neomake_err buffer='.bufnr, 3, {}

  let signs = split(neomake#utils#redir('sign place'), '\n')
  call map(signs, "substitute(substitute(v:val, '\\m^\\s\\+', '', ''), '\\m\\s\\+$', '', '')")
  AssertEqual signs, [
    \ '--- Signs ---',
    \ 'Signs for tests/fixtures/errors.sh:',
    \ 'line=5  id=5000  name=neomake_err']

Execute (Test Neomake on errors.sh with two makers):
  call g:NeomakeSetupAutocmdWrappers()
  call g:NeomakeTestsEnsureExe('shellcheck')
  e! tests/fixtures/errors.sh
  RunNeomake sh shellcheck
  AssertEqual len(g:neomake_test_countschanged), 2
  AssertEqual len(g:neomake_test_finished), 1
  AssertNeomakeMessage 'Running makers: sh, shellcheck'

Execute (Neomake: handle result for current window):
  call g:NeomakeSetupAutocmdWrappers()
  let orig_winnr = winnr()
  call neomake#Make(1, [g:neomake_test_sleep_efm_maker])
  lgetexpr ''
  if neomake#has_async_support()
    new
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_countschanged), 0
    AssertEqual len(g:neomake_test_finished), 0, "output pending"
    AssertEqual map(copy(getloclist(0)), 'v:val.text'), []
    quit
    AssertEqual winnr(), orig_winnr
    AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['error message', 'warning', 'error2']
  endif
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_countschanged), 1

Execute (Neomake: handle output for removed window):
  if NeomakeAsyncTestsSetup()
    call g:NeomakeSetupAutocmdWrappers()
    let orig_winnr = winnr()
    call neomake#Make(1, [g:neomake_test_sleep_efm_maker])
    let jobinfo = neomake#GetJobs()[0]
    let bufnr = bufnr('%')
    new
    exe 'bd' bufnr
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_countschanged), 0,
      \ "counts changed (".len(g:neomake_test_countschanged).")"
    AssertEqual len(g:neomake_test_finished), 1

    AssertNeomakeMessage 'No window found for output!', 2, jobinfo
    AssertEqual neomake#CancelJob(jobinfo.id), 0, "stale job was removed"
  endif

Execute (Neomake: handle wiped buffer):
  " Check that there is no error, e.g. for highlights.
  if NeomakeAsyncTestsSetup()
    new
    e! tests/fixtures/errors.sh
    let bufnr = bufnr('%')
    Neomake sh
    bwipe
    let jobinfo = neomake#GetJobs()[0]
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_countschanged), 0,
      \ "counts changed (".len(g:neomake_test_countschanged).")"
    AssertEqual len(g:neomake_test_finished), 1

    AssertNeomakeMessage 'No window found for output!', 2, jobinfo
    AssertNeomakeMessage 'File-level errors cleaned in buffer '.bufnr
    AssertEqual neomake#CancelJob(jobinfo.id), 0, "stale job was removed"
  endif

Execute (NeomakeSh: true):
  call neomake#statusline#ResetCounts()
  call g:NeomakeSetupAutocmdWrappers()
  AssertEqual g:neomake_test_countschanged, []
  let bufnr = bufnr('%')
  RunNeomakeSh true
  AssertEqual g:neomake_test_countschanged, []
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual getqflist(), []

  call g:NeomakeSetupAutocmdWrappers()
  RunNeomakeSh true
  AssertEqual g:neomake_test_countschanged, []
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual getqflist(), []

Execute (NeomakeSh: echo foo):
  call g:NeomakeSetupAutocmdWrappers()
  AssertEqual g:neomake_test_countschanged, []
  let bufnr = bufnr('%')
  RunNeomakeSh echo foo
  AssertEqual getqflist(),
    \ [{'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 1, 'vcol': 0, 'nr': -1,
    \   'type': '', 'pattern': '', 'text': 'foo'}]
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual g:neomake_test_countschanged, [{'bufnr': bufnr, 'file_mode': 0}]

Execute (NeomakeSh: non-existing command):
  call g:NeomakeSetupAutocmdWrappers()
  RunNeomakeSh 'nonexistingcommand'
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual g:neomake_test_countschanged, [{'file_mode': 0, 'bufnr': bufnr('%')}]
  AssertEqual len(getqflist()), 1
  AssertNeomakeMessage "exit: sh: 'nonexistingcommand': 127", 3
  if neomake#has_async_support()
    AssertNeomakeMessage 'sh: ''nonexistingcommand'': completed with exit code 127.', 3
  endif
  let qflist_text = getqflist()[0].text
  AssertNotEqual match(qflist_text, 'command not found'), -1, "error in qflist: ".qflist_text

Execute (NeomakeSh!: handle unfinished output on exit):
  call g:NeomakeSetupAutocmdWrappers()
  NeomakeSh! sh -c 'echo 1; printf 2; sleep 0.1; echo -n 3'
  if neomake#has_async_support()
    for i in range(0, 10)
      if len(g:neomake_test_countschanged) == 1
        AssertEqual map(copy(getqflist()), 'v:val.text'), ['1'],
        \ "only the first line should be there (buffer_output=0)"
        break
      endif
      sleep 50m
    endfor
    AssertNotEqual i, 10, "counts should have changed after 500ms"
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getqflist()), 'v:val.text'), ['1', '23']
  AssertEqual len(g:neomake_test_countschanged), 2

Execute (NeomakeSh: buffers output):
  call g:NeomakeSetupAutocmdWrappers()
  NeomakeSh sh -c 'echo 1; printf 2; sleep 0.1; echo -n 3'
  if neomake#has_async_support()
    for i in range(0, 10)
      if len(g:neomake_test_countschanged)
        break
      endif
      sleep 50m
    endfor
    AssertNotEqual i, 10, "counts should have changed after 500ms"
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getqflist()), 'v:val.text'), ['1', '23']
  AssertEqual len(g:neomake_test_countschanged), 1

Execute (NeomakeSh: project: handle removed window on exit (quit)):
  call g:NeomakeSetupAutocmdWrappers()
  new
  let bufnr = bufnr('%')
  NeomakeSh sh -c 'sleep 0.1; echo finished'
  let make_id = neomake#GetStatus().last_make_id
  quit
  if neomake#has_async_support()
    AssertEqual len(g:neomake_test_finished), 0
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getqflist()), 'v:val.text'), ['finished']
  AssertEqual g:neomake_test_finished, [{'file_mode': 0, 'make_id': make_id}]
  AssertEqual g:neomake_test_countschanged, [{'bufnr': bufnr, 'file_mode': 0}]

Execute (NeomakeSh: project: handle removed window on exit (bwipe)):
  call g:NeomakeSetupAutocmdWrappers()
  new
  let bufnr = bufnr('%')
  NeomakeSh sh -c 'sleep 0.1; echo finished'
  let make_id = neomake#GetStatus().last_make_id
  bwipe
  Assert bufnr != bufnr('%'), 'buffer has been wiped'
  if neomake#has_async_support()
    AssertEqual len(g:neomake_test_finished), 0
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual map(copy(getqflist()), 'v:val.text'), ['finished']
  AssertEqual g:neomake_test_finished, [{'file_mode': 0, 'make_id': make_id}]
  AssertEqual g:neomake_test_countschanged, [{'bufnr': bufnr, 'file_mode': 0}]

Execute (NeomakeInfo):
  Save g:neomake_c_enabled_makers
  let g:neomake_c_enabled_makers = ['doesnotexist']
  let g:neomaker_not_a_setting = 1

  let info = split(neomake#utils#redir('NeomakeInfo'), '\n')
  Assert len(filter(copy(info), "v:val =~ '\\v^#+ Settings$'")), 'Settings header exists'
  Assert index(info, "g:neomake_c_enabled_makers = ['doesnotexist']") != -1,
  \ 'neomake_c_enabled_makers setting gets reported'
  AssertEqual filter(copy(info), "v:val =~ 'neomaker'"), []

Execute (NeomakeInfo with FuncRef):
  Save g:neomake_c_enabled_makers
  set filetype=c
  let g:neomake_c_enabled_makers = ['doesnotexist']
  let g:neomake_c_doesnotexist_maker = {
  \ 'args': function('getcwd'),
  \ 'errorformat': 'custom_efm: %m'}

  let info = split(neomake#utils#redir('NeomakeInfo'), '\n')
  Log info
  let idx = 0
  for line in [
      \ 'For the current filetype (with :Neomake):',
      \ ' - doesnotexist',
      \ '   errorformat: ''custom_efm: %m''',
      \ '   args: function(''getcwd'')',
      \ '   exe: ''doesnotexist''']
    let i = index(info, line)
    Assert i > idx, 'line not found: '.line
    let idx = i
  endfor

Execute (Having an invalid &errorformat is OK):
  Save &errorformat
  let &efm = '%E%W'
  NeomakeSh sh -c 'true'
  NeomakeTestsWaitForFinishedJobs

Execute (Neomake with windo):
  if NeomakeAsyncTestsSetup()
    Assert winnr() == 1, "Starting at window 1"
    topleft new
    file b1
    topleft new
    file b2
    topleft new
    file b3
    AssertEqual winnr(), 1
    windo call neomake#Make(1, [g:neomake_test_inc_maker])
    3wincmd w
    AssertEqual getloclist(3), []

    NeomakeTestsWaitForFinishedJobs
    AssertEqual getloclist(1), []
    AssertEqual getloclist(2), []
    let ll_3 = getloclist(3)[0].text
    1wincmd w
    let ll_1 = getloclist(1)[0].text
    2wincmd w
    let ll_2 = getloclist(2)[0].text
    Assert ll_3 > ll_2, "Loclist 3 is newer than 2"
    Assert ll_2 > ll_1, "Loclist 2 is newer than 1"

    AssertEqual neomake#statusline#LoclistCounts(winbufnr(1)), {'E': 3}
    AssertEqual neomake#statusline#LoclistCounts(winbufnr(2)), {'E': 2}
    AssertEqual neomake#statusline#LoclistCounts(winbufnr(3)), {'E': 1}

    bd b1
    bd b2
    bd b3
  endif

Execute (NeomakeSh: two jobs after each other):
  if NeomakeAsyncTestsSetup()
    NeomakeSh sh -c 'echo 1'
    NeomakeSh sh -c 'echo 2'
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_finished), 2
    " NOTE: 2nd job clears list.
    " TODO: add a command/option to skip that, e.g. NeomakeSh -append?!
    AssertEqual len(getqflist()), 1, 'only one quickfix entry'
    AssertEqual len(g:neomake_test_finished), 2, 'two jobs have run'
  endif

Execute (Neomake#Make: two jobs after each other):
  if NeomakeAsyncTestsSetup()
    let g:neomake_maker1_maker = {
        \ 'name': '1',
        \ 'exe': 'sh',
        \ 'args': ['-c', 'echo 1'],
        \ 'errorformat': '%m',
        \ }
    let g:neomake_maker2_maker = {
        \ 'name': '2',
        \ 'exe': 'sh',
        \ 'args': ['-c', 'echo 2'],
        \ 'errorformat': '%m',
        \ }
    let b:neomake_enabled_makers = ['maker1', 'maker2']
    Neomake! maker1 maker2
    NeomakeTestsWaitForFinishedJobs
    AssertEqual sort(map(copy(getqflist()), 'v:val.text')), ['1', '2']
    AssertEqual len(g:neomake_test_countschanged), 2, 'counts have changed: '.len(g:neomake_test_countschanged)
    AssertEqual len(g:neomake_test_finished), 1
  endif

Execute (Neomake: non-existing and proper job):
  if NeomakeAsyncTestsSetup()
    " TODO: Trigger failed job (but raising an exception) with Vim.
    " Should find a way to trigger a "failed" job by itself!
    "   Save g:neomake_extend_job_opts_vim
    "   let g:neomake_extend_job_opts_vim = {
    "             \ 'in_io': 'file',
    "             \ 'in_name': '/doesnotexist',
    "             \ }

    let g:neomake_maker1_maker = {
        \ 'name': '1',
        \ 'exe': 'doesnotexist',
        \ 'args': [],
        \ 'errorformat': '%m',
        \ }
    let g:neomake_maker2_maker = neomake#utils#MakerFromCommand('echo 1')
    let b:neomake_enabled_makers = ['maker1', 'maker2']
    Neomake! maker1 maker2
    NeomakeTestsWaitForFinishedJobs
    if has('nvim-0.1.8')
      AssertNeomakeMessage "Failed to start Neovim job: Executable not found: ['doesnotexist']", 0
    elseif has('nvim')
      AssertNeomakeMessage 'Failed to start Neovim job: [''doesnotexist'']: '
        \ .'Vim(let):E902: "doesnotexist" is not an executable'
    else
      AssertNeomakeMessage 'Vim job failed to run: executing job failed: No such file or directory'
    endif
    AssertEqual map(copy(getqflist()), 'v:val.text'), ['1']
    " AssertEqual len(g:neomake_test_finished), 1
    AssertEqual len(g:neomake_test_countschanged), 1,
      \ 'counts have changed'
  endif

Execute (Neomake: remove_invalid_entries):
  let maker = neomake#utils#MakerFromCommand('echo invalid; echo "E: valid"')
  call extend(maker, {
      \ 'name': 'custom_maker',
      \ 'remove_invalid_entries': 1,
      \ 'errorformat': 'E: %m',
      \ 'append_file': 0,
      \ })
  call neomake#Make(1, [maker])
  NeomakeTestsWaitForFinishedJobs
  AssertNeomakeMessage "Removing invalid entry: invalid ({'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 0, 'vcol': 0, 'nr': -1, 'type': '', 'maker_name': 'custom_maker', 'pattern': ''})"
  " XXX: the setloclist() makes the entry invalid?!
  AssertEqual getloclist(0),
    \ [{'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 0, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'text': 'valid'}]

Execute (Neomake: entry.valid < 0):
  let maker = neomake#utils#MakerFromCommand('echo invalid; echo "E: valid"')
  call extend(maker, {
      \ 'name': 'custom_maker',
      \ 'remove_invalid_entries': 0,
      \ 'errorformat': 'E: %m',
      \ 'append_file': 0,
      \ })

  function maker.postprocess(entry) abort
    if !a:entry.valid
      let a:entry.valid = -1
    endif
  endfunction

  call neomake#Make(1, [maker])
  NeomakeTestsWaitForFinishedJobs
  AssertNeomakeMessage "Removing invalid entry: invalid ({'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': -1, 'vcol': 0, 'nr': -1, 'type': '', 'maker_name': 'custom_maker', 'pattern': ''})"
  AssertEqual getloclist(0),
    \ [{'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 0, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'text': 'valid'}]

Execute (Neomake: append_file from settings):
  let maker = {
      \ 'exe': 'echo',
      \ 'args': ['output'],
      \ 'name': 'custom_maker',
      \ 'errorformat': '%m',
      \ }
  e! tests/fixtures/errors.sh
  set ft=myft

  call neomake#Make(1, [maker])
  let bufname = expand('%:p')
  NeomakeTestsWaitForFinishedJobs
  AssertEqual getloclist(0),
    \ [{'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'text': 'output '.bufname}]

  let g:neomake_myft_custom_maker_maker = copy(maker)
  let g:neomake_myft_custom_maker_append_file = 0
  RunNeomake custom_maker
  AssertEqual getloclist(0),
    \ [{'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'text': 'output'}]
  let g:neomake_myft_custom_maker_append_file = 1
  RunNeomake custom_maker
  AssertEqual getloclist(0),
    \ [{'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'text': 'output '.bufname}]

  let maker.append_file = 0
  call neomake#Make(1, [maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual getloclist(0),
    \ [{'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'text': 'output '.bufname}]

  unlet g:neomake_myft_custom_maker_append_file
  call neomake#Make(1, [maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual getloclist(0),
    \ [{'lnum': 0, 'bufnr': 0, 'col': 0, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'text': 'output'}]

Execute (Quickfix list should be cleared only after maker finished):
  cgetexpr 'init'
  AssertEqual getqflist()[0].text, 'init'

  NeomakeSh echo finished
  if neomake#has_async_support()
    AssertEqual getqflist()[0].text, 'init'
  else
    AssertEqual getqflist()[0].text, 'finished'
  endif
  NeomakeTestsWaitForFinishedJobs
  if neomake#has_async_support()
    AssertEqual getqflist()[0].text, 'finished'
  endif

Execute (neomake#Sh: exit_callback):
  let g:neomake_test_cb = 0
  function! g:NeomakeTestsAfterExit(job_status)
    let g:neomake_test_cb = 1
  endfunction
  call neomake#Sh('true', function('g:NeomakeTestsAfterExit'))
  NeomakeTestsWaitForFinishedJobs
  AssertEqual g:neomake_test_cb, 1

Execute (neomake#Make: exit_callback):
  let g:neomake_test_cb = 0
  function! g:NeomakeTestsAfterExit(job_status)
    let g:neomake_test_cb = 1
  endfunction
  let maker = {'exe': 'true'}
  call neomake#Make(0, [maker], function('g:NeomakeTestsAfterExit'))
  NeomakeTestsWaitForFinishedJobs
  AssertEqual g:neomake_test_cb, 1
