Include: include/setup.vader

Execute (Neomake uses temporary file for unsaved buffer):
  new
  norm iline1
  norm oline2

  let maker = {
  \ 'exe': 'cat',
  \ 'append_file': 1,
  \ 'errorformat': '%m',
  \ 'tempfile_enabled': 1,
  \ }
  call neomake#Make(1, [maker])
  if neomake#has_async_support()
    let make_info = values(neomake#GetStatus().make_info)[0]
    let temp_file = make_info.tempfile
    AssertEqual fnamemodify(temp_file, ':h:h'), fnamemodify(tempname(), ':h')
    AssertEqual getfperm(temp_file), 'rw-r--r--'
    NeomakeTestsWaitForFinishedJobs
  endif

  AssertEqual getloclist(0), [{
  \ 'lnum': 0,
  \ 'bufnr': bufnr('%'),
  \ 'col': 0,
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': -1,
  \ 'type': '',
  \ 'pattern': '',
  \ 'text': 'line1'},
  \ {
  \ 'lnum': 0,
  \ 'bufnr': bufnr('%'),
  \ 'col': 0,
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': -1,
  \ 'type': '',
  \ 'pattern': '',
  \ 'text': 'line2'}]

  if neomake#has_async_support()
    AssertEqual filereadable(temp_file), 0, 'temp_file was removed'
    AssertNeomakeMessage 'Removing temporary file: '.temp_file
  else
    AssertEqual len(filter(copy(g:neomake_test_messages), "v:val[1] =~# '^Removing temporary file:'")), 1, 'msg found'
  endif

  bwipe!

Execute (Uses temporary file for unreadable buffer):
  new
  set ft=neomake_tests
  let b:neomake_neomake_tests_enabled_makers = ['true']
  let b:neomake_neomake_tests_true_tempfile_enabled = 1
  file doesnotexist

  let fname = fnamemodify(bufname('%'), ':p')
  RunNeomake

  let bufnr = bufnr('%')
  AssertNeomakeMessage '\m^Using tempfile for unreadable buffer:', 3

  bwipe

Execute (2nd maker uses temporary file):
  call g:NeomakeSetupAutocmdWrappers()

  new
  set ft=python
  file doesnotexist

  let maker1 = {
      \ 'exe': 'true',
      \ 'name': 'true_maker',
      \ 'errorformat': '%m',
      \ 'append_file': 0,
      \ 'tempfile_enabled': 1,
      \ }
  let maker2 = copy(maker1)
  let maker2.append_file = 1
  let maker3 = copy(maker1)

  let fname = fnamemodify(bufname('%'), ':p')
  call neomake#Make(1, [maker1, maker2, maker3])
  let make_id = neomake#GetStatus().last_make_id

  let bufnr = bufnr('%')
  AssertNeomakeMessage '\m^Using tempfile for unreadable buffer:'
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_jobfinished), 3
  bd!

Execute (Maker can specify temporary file to use via fn):
  Save g:neomake_test_tempfile
  let g:neomake_test_tempfile = tempname() . 'injected/with/subdir'

  function! NeomakeTestsF(jobinfo) abort dict
    let self.tempfile_name = g:neomake_test_tempfile
  endfunction
  let maker = {
  \ 'exe': 'true',
  \ 'fn': function('NeomakeTestsF'),
  \ }

  new
  let bufnr = bufnr('%')
  file unreadable
  let maker = neomake#GetMaker(maker)
  AssertEqual maker.args, []
  let jobinfo = NeomakeTestsFakeJobinfo()
  call maker.fn(jobinfo)
  AssertEqual maker.args, []
  call maker._get_argv(jobinfo)
  AssertEqual maker.args, []
  AssertEqual maker.tempfile_name, g:neomake_test_tempfile
  let make_info = values(neomake#GetStatus().make_info)[0]
  AssertEqual make_info.tempfile, maker.tempfile_name
  AssertNeomakeMessage '\m^Using tempfile for unreadable buffer: '.g:neomake_test_tempfile, 3, {'jobinfo': jobinfo, 'make_id': jobinfo.make_id, 'bufnr': bufnr}

  call neomake#Make(1, [maker])
  AssertNeomakeMessage 'Using tempfile for unreadable buffer: '.g:neomake_test_tempfile, 3
  NeomakeTestsWaitForFinishedJobs
  if neomake#has_async_support()
    AssertNeomakeMessage "Starting async job: ['true', '".g:neomake_test_tempfile."']"
  else
    AssertNeomakeMessage "Starting: true ".fnameescape(g:neomake_test_tempfile)
  endif
  bwipe

Execute (maker._get_argv uses jobinfo for bufnr):
  let maker = neomake#GetMaker({'name': 'my_maker', 'append_file': 1})

  new
  let b:neomake_tempfile_enabled = 1
  let bufnr = bufnr('%')
  let jobinfo = NeomakeTestsFakeJobinfo()
  call maker._get_argv(jobinfo)
  let make_info = values(neomake#GetStatus().make_info)[0]
  Assert !empty(make_info.tempfile), 'make_info has tempfile_name'

  let jobinfo = NeomakeTestsFakeJobinfo()
  let maker = neomake#GetMaker({'name': 'my_maker', 'append_file': 1})
  e! tests/fixtures/errors.py
  call maker._get_argv(jobinfo)
  Assert !has_key(jobinfo, 'tempfile_name')

  wincmd p
  let jobinfo = {'file_mode': 1, 'bufnr': bufnr, 'ft': ''}
  let expected = ['my_maker', fnameescape(fnamemodify(bufname(bufnr), ':p'))]
  if neomake#has_async_support()
    AssertEqual expected, maker._get_argv(jobinfo)
  else
    AssertEqual join(expected), maker._get_argv(jobinfo)
  endif

  wincmd p
  bwipe

Execute (_get_fname_for_buffer handles modified buffer with disabled tempfiles):
  new
  let b:neomake_tempfile_enabled = 0
  file file1
  set modified
  let maker = neomake#GetMaker({})
  let jobinfo = {'bufnr': bufnr('%'), 'ft': ''}
  let fname = maker._get_fname_for_buffer(jobinfo)
  AssertEqual fname, 'file1'
  bwipe!

Execute (_get_fname_for_buffer does not add trailing newline):
  new
  let maker = neomake#GetMaker({})
  let jobinfo = NeomakeTestsFakeJobinfo()
  let b:neomake_tempfile_enabled = 1
  call maker._get_fname_for_buffer(jobinfo)
  let make_info = values(neomake#GetStatus().make_info)[0]
  AssertEqual readfile(make_info.tempfile), []

  let jobinfo = NeomakeTestsFakeJobinfo()
  let make_info = values(neomake#GetStatus().make_info)[0]
  normal! iline1
  call maker._get_fname_for_buffer(jobinfo)
  AssertEqual readfile(make_info.tempfile), ['line1']
  bwipe!

Execute (neomake#utils#write_tempfile):
  Save &endofline, &binary
  let vim_temp = tempname()
  let neomake_temp = tempname()

  if !exists('+fixeol')
    NeomakeTestsSkip 'Skipping +fixeol variants'
    let variants = [
    \ 'endofline   binary',
    \ 'endofline   nobinary',
    \ 'noendofline binary',
    \ 'noendofline nobinary',
    \ ]
  else
    Save &fixeol
    let variants = [
    \ 'fixeol   endofline   binary',
    \ 'fixeol   endofline   nobinary',
    \ 'fixeol   noendofline binary',
    \ 'fixeol   noendofline nobinary',
    \ 'nofixeol endofline   binary',
    \ 'nofixeol endofline   nobinary',
    \ 'nofixeol noendofline binary',
    \ 'nofixeol noendofline nobinary',
    \ ]
  endif

  for variant in variants
    new
    let bufnr = bufnr('%')
    exe 'set' variant

    exe 'w!' vim_temp
    new
    call neomake#utils#write_tempfile(bufnr, neomake_temp)
    AssertEqual readfile(vim_temp, 'b'), readfile(neomake_temp, 'b')

    b#
    normal! ifoo
    exe 'w!' vim_temp
    b#
    call neomake#utils#write_tempfile(bufnr, neomake_temp)
    AssertEqual readfile(vim_temp, 'b'), readfile(neomake_temp, 'b')

    bwipe!
    bwipe
  endfor

Execute (same tempfile is used for all jobs (serialized)):
  if NeomakeAsyncTestsSetup()
    new
    let maker = NeomakeTestsCommandMaker('echo_file', 'cat')
    let maker.append_file = 1
    let maker2 = NeomakeTestsCommandMaker('echo_file', 'cat')
    let maker2.append_file = 1
    let maker2.tempfile_name = tempname()
    let b:neomake_tempfile_enabled = 1
    let b:neomake_serialize = 1
    normal! iline1
    AssertEqual len(g:neomake_test_jobfinished), 0

    call neomake#Make(1, [maker, g:sleep_maker, maker2, maker, g:sleep_maker])
    let make_info = values(neomake#GetStatus().make_info)[0]
    NeomakeTestsWaitForNextFinishedJob
    normal! oline2
    NeomakeTestsWaitForNextFinishedJob

    AssertNotEqual make_info.tempfile, maker2.tempfile_name
    AssertEqual readfile(make_info.tempfile), readfile(maker2.tempfile_name)

    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 5

    AssertEqual [
    \ 'cat '.make_info.tempfile,
    \ 'sleep .1; echo slept',
    \ 'cat '.maker2.tempfile_name,
    \ 'cat '.make_info.tempfile,
    \ 'sleep .1; echo slept'], map(copy(g:neomake_test_jobfinished),
    \                              'v:val.jobinfo.maker.args[-1]')

    AssertEqual map(copy(getloclist(0)), 'v:val.text'),
    \ ['line1', 'slept', 'line1', 'line1', 'slept']
    bwipe!
  endif

Execute (same tempfile contents is used for all jobs):
  if NeomakeAsyncTestsSetup()
    call g:NeomakeSetupAutocmdWrappers()
    new
    let b:neomake_serialize = 1
    let maker1 = {'name': 'maker1', 'exe': 'cat', 'append_file': 1}
    let maker2 = {'name': 'maker2', 'exe': 'cat', 'append_file': 1}

    Save g:maker2_tempfile
    let g:maker2_tempfile = tempname()
    function! maker2.fn(jobinfo)
      let self.tempfile_name = g:maker2_tempfile
    endfunction

    Save g:maker2_tempfile_contents, g:global_tempfile_contents
    augroup neomake_test_finished
      au!
      autocmd User NeomakeJobFinished
      \ let m = g:neomake_hook_context.jobinfo.maker
      \ | if m.name == 'maker2'
      \ |  let g:maker2_tempfile_contents = readfile(m.tempfile_name)
      \ | endif
      autocmd User NeomakeFinished
      \ let make_info = values(neomake#GetStatus().make_info)[0]
      \ | let g:global_tempfile_contents = readfile(make_info.tempfile)
    augroup END

    normal! iline1

    let b:neomake_tempfile_enabled = 1
    let b:neomake_serialize = 1
    call neomake#Make(1, [maker1, maker2])
    let make_info = values(neomake#GetStatus().make_info)[0]

    normal! oline2
    let g:neomake_test_messages = []
    NeomakeTestsWaitForFinishedJobs

    AssertEqual len(g:neomake_test_jobfinished), 2
    AssertNeomakeMessage 'Using tempfile for unnamed buffer: '.g:maker2_tempfile

    let bound_maker2 = g:neomake_test_jobfinished[1].jobinfo.maker
    AssertEqual bound_maker2.tempfile_name, g:maker2_tempfile
    AssertNotEqual make_info.tempfile, bound_maker2.tempfile_name
    AssertEqual g:global_tempfile_contents, g:maker2_tempfile_contents

    AssertEqual map(copy(getloclist(0)), 'v:val.text'),
    \ ['line1', 'line1']

    bwipe!
    au! neomake_test_finished
    augroup neomake_test_finished
  endif
