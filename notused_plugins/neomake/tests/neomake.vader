" Main entry point to run all Vader tests.
" You can run the included files by itself (since they also include
" include/setup.vader).

~ Features
Include (Cancellation): cancellation.vader
Include (Completion): completion.vader
Include (Compat): compat.vader
Include (Config): config.vader
Include (Current working dir): cwd.vader
Include (Environment variables): env.vader
Include (Error handling): errors.vader
Include (Filetype handling): filetypes.vader
Include (Hooks): hooks.vader
Include (Highlights): highlights.vader
Include (Integration tests): integration.vader
Include (JSON): json.vader
Include (Lists): lists.vader
Include (Maker args): args.vader
Include (Makers): makers.vader
Include (Maker errors): maker_errors.vader
Include (Mapexpr): mapexpr.vader
Include (Postprocess): postprocess.vader
Include (Processing): processing.vader
Include (Serialize): serialize.vader
Include (Signs): signs.vader
Include (Statusline): statusline.vader
Include (Temporary files): tempfiles.vader
Include (Utils): utils.vader
Include (Verbosity): verbosity.vader

~ Filetype specific
Include (Haskell): ft_haskell.vader
Include (Perl): ft_perl.vader
Include (Python): ft_python.vader
Include (Shell): ft_sh.vader
Include (Text): ft_text.vader
Include (Elixir): ft_elixir.vader
Include (Elm): ft_elm.vader
Include (PHP): ft_php.vader
Include (Cs): ft_cs.vader
Include (Css): ft_css.vader
Include (Idris): ft_idris.vader
Include (Vim): ft_vim.vader
Include (SQL): ft_sql.vader
Include (Rust): ft_rust.vader
Include (Help): ft_help.vader
Include (Asciidoc): ft_asciidoc.vader
Include (Markdown): ft_markdown.vader
Include (Pandoc): ft_pandoc.vader
Include (TypeScript): ft_typescript.vader
Include (JavaScript): ft_javascript.vader
Include (PureScript): ft_purescript.vader
Include (Go): ft_go.vader

* Old/unorganized tests
Include: include/setup.vader

Execute (neomake#GetMakers):
  AssertEqual neomake#GetMakers('non-existent'), []
  AssertEqual neomake#GetMakers('pug'), ['puglint']

  let sh_makers = ['checkbashisms', 'dash', 'sh', 'shellcheck']
  AssertEqual sort(neomake#GetMakers('sh')), sh_makers

  Save g:neomake_sh_enabled_makers
  let g:neomake_sh_enabled_makers = ['sh']
  AssertEqual sort(neomake#GetMakers('sh')), sh_makers

Execute (neomake#GetMaker with non-existent maker throws errors):
  AssertEqual neomake#GetMaker('non-existent'), {}
  AssertNeomakeMessage 'Invalid maker name: "non-existent".', 0, {}
  AssertThrows call neomake#GetMaker('nonexistent')
  AssertEqual g:vader_exception, 'Neomake: project maker not found: nonexistent'
  Assert len(g:neomake_test_messages), 1

Execute (Neomake with unknown maker):
  " Prevent 'Skipping User autocmd NeomakeCountsChanged: no hooks.' message.
  runtime autoload/neomake/statusline.vim

  Neomake doesnotexist
  let make_id = neomake#GetStatus().last_make_id
  AssertEqual g:neomake_test_messages, [
  \ [0, 'Maker not found (for empty filetype): doesnotexist.', {'make_id': make_id}],
  \ [3, 'Nothing to make: no valid makers.', {'make_id': make_id, 'bufnr': bufnr('%')}]]

Execute (Neomake with unknown maker for multiple fts):
  new
  set filetype=ft1.ft2
  Neomake doesnotexist
  let make_id = neomake#GetStatus().last_make_id
  AssertEqual g:neomake_test_messages, [
  \ [0, 'Maker not found (for filetype ft1.ft2): doesnotexist.', {'make_id': make_id}],
  \ [3, 'Nothing to make: no valid makers.', {'make_id': make_id, 'bufnr': bufnr('%')}]]
  bwipe

Execute (neomake#GetMaker uses defined errorformat with makeprg):
  Save &errorformat
  let &errorformat = '%Gcustom'
  AssertEqual neomake#GetMaker('makeprg', '').errorformat, '%Gcustom'

Execute (neomake#GetMaker uses defaults from b:/g:):
  Save g:neomake_test_remove_invalid_entries
  Save b:neomake_test_remove_invalid_entries

  let maker = {'name': 'test'}

  " Default.
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 0,
  \ "default is ok"

  let maker.remove_invalid_entries = 1
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 1
  let g:neomake_test_remove_invalid_entries = 2
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 2
  let b:neomake_test_remove_invalid_entries = 3
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 3

Execute (neomake#GetMaker uses defaults from b:/g: based on maker):
  Save g:neomake_test_remove_invalid_entries

  let maker = {'name': 'test'}
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 0
  let maker.remove_invalid_entries = 1
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 1
  let g:neomake_test_remove_invalid_entries = 2
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 2
  let b:neomake_test_remove_invalid_entries = 3
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 3

Execute (neomake#Make in file mode with no filetype and no makers):
  AssertEqual &ft, ''
  AssertEqual neomake#Make(1, []), []
  let make_id = neomake#GetStatus().last_make_id
  AssertNeomakeMessage 'Nothing to make: no enabled file mode makers (filetype=).',
  \ 3, {'make_id': make_id, 'bufnr': bufnr('%')}
  Assert len(g:neomake_test_messages), 1

Execute (neomake#Make in project mode with no filetype and no makers):
  Save makeprg
  let &makeprg = 'sh -c "sleep 0.1"'
  let job_ids = neomake#Make(0, [])
  AssertEqual len(job_ids), 1
  let jobs = neomake#GetJobs()
  if neomake#has_async_support()
    let jobs_by_ids = neomake#GetJobs(job_ids)
    let job_by_id = neomake#GetJob(job_ids[0])
    AssertEqual len(jobs), 1
    AssertEqual jobs, [job_by_id]
    AssertEqual jobs, jobs_by_ids
    AssertEqual job_by_id.maker.name, 'makeprg'
    NeomakeTestsWaitForFinishedJobs
  else
    AssertEqual len(jobs), 0
  endif

  " New interface to neomake#Make (dict).
  let jobinfos = neomake#Make({'file_mode': 0})
  AssertEqual len(jobinfos), 1
  let jobs = neomake#GetJobs()
  if neomake#has_async_support()
    let job_ids = map(copy(jobinfos), 'v:val.id')
    let jobs_by_ids = neomake#GetJobs(job_ids)
    let job_by_id = neomake#GetJob(job_ids[0])
    AssertEqual len(jobs), 1
    AssertEqual jobs, [job_by_id]
    AssertEqual jobs, jobs_by_ids
    AssertEqual job_by_id.maker.name, 'makeprg'
    AssertEqual job_by_id, jobinfos[0]
    NeomakeTestsWaitForFinishedJobs
  else
    AssertEqual len(jobs), 0
  endif

Execute (neomake#GetMaker from g:neomake_foo_maker):
  let g:neomake_custom_maker = {
    \ 'exe': 'my-exe'
    \ }
  let maker = neomake#GetMaker('custom')
  AssertEqual maker.exe, 'my-exe'
  AssertEqual maker.name, 'custom'

Execute (neomake#GetMaker without name):
  let maker = neomake#GetMaker({})
  AssertEqual maker.exe, 'unnamed_maker'
  AssertEqual maker.name, 'unnamed_maker'

Execute (Reports exit status: 7):
  call neomake#Sh("sh -c 'exit 7'")
  let exit_msg = 'sh: sh -c ''exit 7'': completed with exit code 7.'
  if neomake#has_async_support()
    let jobinfo = neomake#GetJobs()[-1]
    NeomakeTestsWaitForFinishedJobs
    AssertNeomakeMessage 'exit: sh: sh -c ''exit 7'': 7.', 3, jobinfo
    AssertNeomakeMessage exit_msg, 3, jobinfo
  else
    " XXX: jobinfo gets used in messages, but is hard to get here, so we do not
    "      compare it.
    AssertNeomakeMessage 'exit: sh: sh -c ''exit 7'': 7.', 3
    AssertThrows AssertNeomakeMessage exit_msg, 3
    AssertEqual g:vader_exception, 'Vim(call):E121: Undefined variable: exit_msg'
  endif

Execute (neomake#Sh: job_id):
  let job_id = neomake#Sh('true')
  Assert job_id > 0, 'Correct job_id: '.job_id
  NeomakeTestsWaitForFinishedJobs

Execute (neomake#CompleteJobs):
  if neomake#has_async_support()
    AssertEqual neomake#CompleteJobs(), ''
    let job_ids = [neomake#Sh('sleep 0.1')]
    AssertEqual neomake#CompleteJobs(), job_ids[0].': sh: sleep 0.1'
    let job_ids += [neomake#Sh('sleep 0.11')]
    AssertEqual neomake#CompleteJobs(), printf(
      \ "%d: sh: sleep 0.1\n%d: sh: sleep 0.11", job_ids[0], job_ids[1])
    NeomakeCancelJobs
    NeomakeTestsWaitForFinishedJobs
  endif

Execute (Neomake picks up custom maker correctly):
  let g:neomake_c_lint_maker = {
    \ 'exe': 'echo',
    \ 'args': ['%:p', '--foo', 'bar'],
    \ 'append_file': 0,
    \ 'errorformat': '%f:%l:%c: %m',
    \ }
  new
  file file1
  let fname = expand('%:p')
  Save &filetype
  set filetype=c

  Neomake lint
  if neomake#has_async_support()
    AssertNeomakeMessage "Starting async job: ['echo', '".fname."', '--foo', 'bar']."
    NeomakeTestsWaitForFinishedJobs
  else
    AssertNeomakeMessage printf('Starting: echo %s --foo bar.', fname)
  endif
  bwipe
