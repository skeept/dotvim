Include: _setup.vader

Execute (neomake#GetMakers):
  AssertEqual neomake#GetMakers('non-existent'), []
  AssertEqual neomake#GetMakers('pug'), ['puglint']
  AssertEqual sort(neomake#GetMakers('sh')), ['checkbashisms', 'sh', 'shellcheck']

Execute (neomake#GetMaker with non-existent maker prints errors):
  AssertEqual neomake#GetMaker('non-existent'), {}
  AssertEqual g:neomake_test_messages[-1], [0, 'Invalid maker name: non-existent']
  AssertEqual neomake#GetMaker('nonexistent'), {}
  AssertEqual g:neomake_test_messages[-1], [0, 'Maker not found: nonexistent']

Execute (neomake#GetMaker uses defaults from b:/g:):
  Save g:neomake_test_remove_invalid_entries

  let maker = {'name': 'test'}

  " Default.
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 1

  let maker.remove_invalid_entries = 1
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 1
  let g:neomake_test_remove_invalid_entries = 2
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 2
  let b:neomake_test_remove_invalid_entries = 3
  AssertEqual neomake#GetMaker(maker).remove_invalid_entries, 3

Execute (neomake#Make in file mode with no filetype and no makers):
  AssertEqual &ft, ''
  AssertEqual neomake#Make(1, []), []
  AssertEqual g:neomake_test_messages[-1], [3, 'Nothing to make: no enabled makers.']

Execute (neomake#Make in project mode with no filetype and no makers):
  Save makeprg
  let &makeprg = 'sh -c "sleep 0.1"'
  let job_ids = neomake#Make(0, [])
  if neomake#has_async_support()
    AssertEqual len(job_ids), 1
    let jobs = neomake#GetJobs()
    AssertEqual len(jobs), 1
    let [job_id, job] = items(jobs)[0]
    AssertEqual job.maker.name, 'makeprg'
  else
    AssertEqual len(job_ids), 0
  endif

  NeomakeTestsWaitForFinishedJobs

Execute (neomake#GetMaker from g:neomake_foo_maker):
  let g:neomake_foo_maker = {
    \ 'exe': 'my-foo'
    \ }
  let maker = neomake#GetMaker('foo')
  AssertEqual maker.exe, 'my-foo'

Execute (neomake#CancelJob):
  if neomake#has_async_support()
    let job_id = neomake#Sh("sh -c 'while true; do sleep 0.1; done'")
    AssertEqual neomake#CancelJob(job_id), 1

    " The job is still in the table, therefore 'E900: Invalid job id'.
    AssertThrows neomake#CancelJob(job_id)

    NeomakeTestsWaitForFinishedJobs
    AssertEqual neomake#CancelJob(job_id), 0
  endif

Execute (Reports exit status):
  if neomake#has_async_support()
    let job_id = neomake#Sh("sh -c 'exit 7'")
    let jobinfo = neomake#GetJobs()[job_id]
    NeomakeTestsWaitForFinishedJobs

    AssertNeomakeMessage 'sh: sh -c ''exit 7'': completed with exit code 7.', 1

    let msg = printf('[#%d.%d] exit: sh: sh -c ''exit 7'': 7',
      \ jobinfo.make_id, job_id)
    AssertNeomakeMessage msg, 3
  endif

Execute (neomake#Sh: job_id):
  let job_id = neomake#Sh('true')
  if neomake#has_async_support()
    Assert job_id >= 0, 'Correct job_id for async.'
    NeomakeTestsWaitForFinishedJobs
  else
    Assert job_id == -1, 'Correct job_id for sync.'
  endif
