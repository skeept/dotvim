Include: _setup.vader

Execute (neomake#utils#LogMessage writes to logfile always):
  let neomake_verbose = 0
  Save neomake_logfile
  let g:neomake_logfile = tempname()
  call neomake#utils#LogMessage(1, 'msg1')
  let logfile_msg = readfile(g:neomake_logfile)[0]
  Assert logfile_msg =~# '\v\[\d+-\d\d-\d\dT\d\d:\d\d:\d\d\+\d+ \@\d+\.\d\d\d, quiet\] msg1$'
  Restore

Execute (NeomakeTestsEnsureExe creates exe):
  Assert !executable('boobar')
  call g:NeomakeTestsEnsureExe('boobar')
  Assert executable('boobar')

Execute (neomake#utils#CompressWhitespace):
  function! F(text)
    let entry = {'text': a:text}
    call neomake#utils#CompressWhitespace(entry)
    return entry.text
  endfunction
  AssertEqual F('foo'), 'foo'
  AssertEqual F(' foo'), 'foo'
  AssertEqual F('foo '), 'foo'
  AssertEqual F('foo bar '), 'foo bar'
  AssertEqual F("foo\nbar "), 'foo bar'
  AssertEqual F("foo\n bar "), 'foo bar'

Execute (neomake#utils#GetSetting serialize):
  let g:maker = {'name': 'mymaker'}
  function! GetSetting()
    return neomake#utils#GetSetting('serialize', g:maker, 'default',
                                  \ ['myft'], bufnr('%'))
  endfunction

  AssertEqual GetSetting(), 'default'
  let g:neomake_serialize = 5
  AssertEqual GetSetting(), 5
  let b:neomake_serialize = 4
  AssertEqual GetSetting(), 4
  let g:maker.serialize = 3
  AssertEqual GetSetting(), 3
  let g:neomake_myft_mymaker_serialize = 2
  AssertEqual GetSetting(), 2
  let b:neomake_myft_mymaker_serialize = 1
  AssertEqual GetSetting(), 1

Execute (neomake#utils#GetSetting accepts lists):
  let g:maker = {'name': 'mymaker'}
  function! GetSetting()
    return neomake#utils#GetSetting('args', g:maker, 'default',
                                  \ ['myft'], bufnr('%'))
  endfunction

  let g:neomake_myft_mymaker_args = [ 'global', 'shallow', 'list' ]
  AssertEqual GetSetting(), [ 'global', 'shallow', 'list' ]
  let b:neomake_myft_mymaker_args = [ 'buffer', 'shallow', 'list' ]
  AssertEqual GetSetting(), [ 'buffer', 'shallow', 'list' ]

Execute(neomake#utils#redir):
  command! NeomakeTestCommand echo 1 | echo 2
  command! NeomakeTestErrorCommand echoerr 'error'
  AssertEqual neomake#utils#redir('echon 1'), "1"
  AssertEqual neomake#utils#redir('echo 1'), "\n1"
  AssertEqual neomake#utils#redir('NeomakeTestCommand'), "\n1\n2"
  AssertThrows call neomake#utils#redir('NeomakeTestErrorCommand')
  if exists('g:vader_exception')
    " https://github.com/junegunn/vader.vim/issues/86
    AssertEqual g:vader_exception, 'Vim(echoerr):error'
  endif
  AssertEqual neomake#utils#redir(['NeomakeTestCommand', 'echon 3']), "\n1\n23"
  AssertThrows neomake#utils#redir(['NeomakeTestCommand', 'echoerr 3'])

Execute (Should expand arguments that start with %):
  let param1 = '%'
  let param2 = '%:h'
  let param3 = '--param1=%:h'
  let args = [param1, param2, param3]
  let expected_args = [expand(param1), expand(param2), param3]
  call neomake#utils#ExpandArgs(args)
  AssertEqual expected_args, args

Execute (Should expand arguments that start with escape char \):
  let param1 = '\%'
  let param2 = '\%:p'
  let args = [param1, param2]
  let expected_args = [expand(param1), expand(param2)]
  call neomake#utils#ExpandArgs(args)
  AssertEqual expected_args, args

Execute (Should not expand arguments that start with double %):
  let args = ['%%:h', '%%']
  let expected_args = ['%%:h', '%%']
  call neomake#utils#ExpandArgs(args)
  AssertEqual expected_args, args
