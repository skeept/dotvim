priority -50

snippet doc "multiline documentation"
<#
.Synopsis
   $(1:Short description}
.DESCRIPTION
   ${2:Long description}
.EXAMPLE
   ${3:Example of how to use this cmdlet}
.INPUTS
   ${4:Inputs to this cmdlet (if any)}
.OUTPUTS
   ${5:Output from this cmdlet (if any)}
.NOTES
   ${6:General notes}
.COMPONENT
   ${7:The component this cmdlet belongs to}
.ROLE
   ${8:The role this cmdlet belongs to}j
.FUNCTIONALITY
   ${9:The functionality that best describes this cmdlet}
#>
endsnippet

snippet comm "Multiline Comment"
<#
	${1:Comment}
#>
endsnippet

snippet funfull
Function ${1:Verb-Noun}
{
	Param
	(
		# Param1 help description
		[Parameter(Mandatory=$true, 
			ValueFromPipeline=$true,
			ValueFromPipelineByPropertyName=$true, 
			ValueFromRemainingArguments=$false, 
			Position=0,
			ParameterSetName='Parameter Set 1')]
		[ValidateNotNull()]
		[ValidateNotNullOrEmpty()]
		[ValidateCount(0,5)]
		[ValidateSet("sun", "moon", "earth")]
		[Alias("p1")] 
		$Param1,

		# Param2 help description
		[Parameter(ParameterSetName='Parameter Set 1')]
		[AllowNull()]
		[AllowEmptyCollection()]
		[AllowEmptyString()]
		[ValidateScript({$true})]
		[ValidateRange(0,5)]
		[int]
		$Param2,

		# Param3 help description
		[Parameter(ParameterSetName='Another Parameter Set')]
		[ValidatePattern("[a-z]*")]
		[ValidateLength(0,15)]
		[String]
		$Param3
	)

	Begin
	{
	}
	Process
	{
		if ($pscmdlet.ShouldProcess("Target", "Operation"))
		{
		}
	}
	End
	{
	}
}
endsnippet

snippet do-until "Do until condition"
Do {
	${1}
} Until (${2:condition})
endsnippet

snippet do-while "Do while condition"
Do {
	${1}
} While (${2:condition})
endsnippet

snippet foreach "ForEach item in collection"
Foreach(\$${1:item} in @(\$${2:collection})) {
	${3}
}
endsnippet

snippet if "If Condition"
If(${1:condition}) {
	${2}
}${3}
endsnippet

snippet ife "If  - Else"
If(${1:condition}) {
	${2}
} else {
	${3}
}${4}
endsnippet

snippet ifeol "If else in one line"
If(${1:condition}) {${2}} Else {${3}}${4}
endsnippet




# vim:ft=snippets:
