*projectile.txt* *projectile* Project configuration

Author:  Tim Pope <http://tpo.pe/>
Repo:    https://github.com/tpope/vim-projectile
License: Same terms as Vim itself (see |license|)

SETUP                                           *projectile-setup*

Projections are maps from file names and globs to sets of properties
describing the file.  The simplest way to define them is to create a
".projections.json" in the root of the project.  Here's a simple example for a
Maven project:
>
    {
      "src/main/java/*.java": {
        "alternate": "src/test/java/{}.java",
        "command": "source"
      },
      "src/test/java/*.java": {
        "alternate": "src/main/java/{}.java",
        "command": "test"
      },
      "*.java": {"dispatch": ["javac", "{file}"]},
      "*": {"make": ["mvn", "-f", "{project}/pom.xml"]}
    }
<
In property values, "{}" will be replaced by the portion of the glob matched
by the "*".  You can also chain one or more transformations inside the braces
separated by bars, e.g. "{dot|hyphenate}".  The complete list of available
transformations is as follows:

Name           Behavior ~
dot            / to .
underscore     / to _
backslash      / to \
colons         / to ::
hyphenate      _ to -
blank          _ and - to space
uppercase      uppercase
camelcase      foo/bar_baz to Foo/BarBaz
dirname        remove last slash separated component
basename       remove all but last slash separated component
file           absolute path to file
project        absolute path to project
open           literal {
close          literal }

From a globbing perspective, "*" is actually a stand in for "**/*".  For
advanced cases, you can include both globs explicitly: "test/**/test_*.rb".
When expanding with {}, the inner portion is collapsed to a single slash.

The full list of available properties in a projection is as follows:

						*projectile-alternate*
"alternate" ~
	Determines the destination of the |projectile-:A| command.  If this is a
	list, the first readable file will be used.
						*projectile-command*
"command" ~
        Names a family of navigation commands to be created.  Use the same
        name on multiple projections to combine them into a single command.
        If this option is provided for a literal filename rather than a glob,
        it is used as the default destination of the navigation command when
        no argument is given.
						*projectile-dispatch*
"dispatch" ~
        Default task to use for |:Dispatch| in dispatch.vim.  If not provided,
        the option for any existing alternate file is used instead.  Set to a
        list of arguments and they will be shell escaped and joined.
						*projectile-make*
"make" ~
        Sets 'makeprg'.  Also loads a |:compiler| plugin if one is available
        matching the executable name.  This is useful to set from a "*"
        projection.  Set to a list of arguments and they will be shell escaped
        and joined.
						*projectile-start*
"start" ~
        Command to run to "boot" the project.  Examples include `lein run`,
        `rails server`, and `foreman start`.  It will be used as a default
        task for |:Start| in dispatch.vim.  This is useful to set from a "*"
        projection.  Set to a list of arguments and they will be shell escaped
        and joined.
						*projectile-template*
"template" ~
        Array of lines to use when creating a new file.

                                                *g:projectiles*
In addition to ".projections.json", projections can be defined globally
through use of the |projectile-autocmds| API or through the variable
g:projectiles, a |Dictionary| mapping between a string describing the root of
the project and a set of projections.  The keys of the dictionary are files
and directories that can be found in the root of a project, with & separating
multiple requirements and | separating multiple alternatives.

In the example below, the first key requires a directory named
lib/heroku/ and a file named init.rb, and the second requires a directory
named etc/rbenv.d/ or one or more files matching the glob bin/rbenv-*.
>
    let g:projectiles = {
          \ "lib/heroku/&init.rb": {
          \   "lib/heroku/command/*.rb": {"command": "command"}
          \ },
          \ "etc/rbenv.d/|bin/rbenv-*": {
          \   "bin/rbenv-*": {"command": "command"},
          \   "etc/rbenv.d/*.bash": {"command": "hook"}
          \ }}

Note the use of VimScript |line-continuation|.

COMMANDS                                        *projectile-commands*

In addition to any navigation commands provided by your projections (which
take the form :Efoo, :Sfoo, :Vfoo, :Tfoo, and :Dfoo), the following commands
are available.

                                                *projectile-:A*
:A                      Edit the alternate file for the current buffer, as
                        defined by the "alternate" key.

:A {file}               Edit {file} relative to the innermost root.
                                                *projectile-:AS*
:AS [file]              Like :A, but open in a split.
                                                *projectile-:AV*
:AV [file]              Like :A, but open in a vertical split.
                                                *projectile-:AT*
:AT [file]              Like :A, but open in a tab.

                                                *projectile-:AD*
:AD [file]              Like :A, but |:read| the file into the current buffer.

                                                *projectile-:Cd*
:Cd                     |:cd| to the innermost root.

:Cd {path}              |:cd| to {path} in the innermost root.

                                                *projectile-:Lcd*
:Lcd [path]             Like :Cd, but use |:lcd|.

                                                *projectile-:ProjectDo*
:ProjectDo {cmd}        Change directory to the project root, execute the
                        given command, and change back.  This won't work if
                        {cmd} leaves the focus in a different window.  Tab
                        complete will erroneously reflect the current working
                        directory, not the project root.

AUTOCOMMANDS                                    *projectile-autocmds*

Projectile.vim dispatches a |User| *ProjectileDetect* event when searching for
projections for a buffer.  You can call *projectile#append()* to register
projections for the file found in *g:projectile_file* .
>
    autocmd User ProjectileDetect
          \ if SomeCondition(g:projectile_file) |
          \   call projectile#append(root, projections) |
          \ endif
<
The |User| *ProjectileActivate* event is triggered when one or more sets of
projections are found.  You can call *projectile#query()* to retrieve an
array of pairs of project roots and values for a given key.  Since typically
you only care about the first (most precisely targeted) value, the following
pattern may prove useful:
>
    autocmd User ProjectileActivate call s:activate()

    function! s:activate() abort
      for [root, value] in projectile#query('wrap')
        let &textwidth = value
        break
      endfor
    endfunction
<
You can also call *projectile#path()* to get the root of the innermost set of
projections, which is useful for implementing commands like |projectile-:Cd|.

 vim:tw=78:et:ft=help:norl:
