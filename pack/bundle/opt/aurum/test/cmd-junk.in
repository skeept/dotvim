:command -nargs=? -bar CS :execute 'Run AuStatus '.<q-args> | bwipeout! | bwipeout! | for file in split(glob(g:curtest.'repo/test/*'), "\n") | call delete(file) | endfor | R silent AuUpdate!
:W{{{1 :AuJ
:R silent edit hglines.lst
:try | AuJunk | catch | endtry
:CS
:W{{{1 :AuJ :
:R silent edit hglines.lst
:AuJunk :
:R call WriteFile('hglines.lst: '.filereadable('hglines.lst'))
:CS
:W{{{1 :AuJ forget :
:R silent edit hglines.lst
:AuJunk forget :
:R call WriteFile('hglines.lst: '.filereadable('hglines.lst'))
:CS
:W{{{1 :AuJ remove :
:R silent edit hglines.lst
:AuJunk remove :
:R call WriteFile('hglines.lst: '.filereadable('hglines.lst'))
:CS
:W{{{1 :AuJ ignore :
:R silent edit hglines.lst
:AuJunk ignore :
:R call WriteFile('hglines.lst: '.filereadable('hglines.lst'))
:R call WriteFile(['.hgignore:']+map(readfile('.hgignore'), '"  ".v:val'))
:CS
:W{{{1 :AuJ ignoreglobs *
:R silent edit hglines.lst
:R AuJunk ignoreglobs *
:R call WriteFile('hglines.lst: '.filereadable('hglines.lst'))
:R call WriteFile(['.hgignore:']+map(readfile('.hgignore'), '"  ".v:val'))
:CS show all
:W{{{1 :AuJ *
:R silent edit hglines.lst
:R silent AuJunk *
:CS
:source addmessages.vim
