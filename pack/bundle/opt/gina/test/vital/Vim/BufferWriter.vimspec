scriptencoding utf8

Describe Vim.BufferWriter
  Before all
    let BufferWriter = vital#gina#import('Vim.BufferWriter')
    let Path = vital#gina#import('System.Filepath')
    let utf8_encoding = Path.realpath('test/vital/_testdata/Vim/BufferWriter/utf8-encoding.txt')
    let cp1250_encoding = Path.realpath('test/vital/_testdata/Vim/BufferWriter/cp1250-encoding.txt')
  End

  Before
    %bwipeout!
  End

  Describe .assign_content({bufnr}, {content})
    Context python
      Before
        if !has('python')
          Skip This Vim does not support python interface
        endif
        let BufferWriter.use_python = 1
        let BufferWriter.use_python3 = 0
      End

      It returns 0 if a buffer with {bufnr} does not exist
        let ret = BufferWriter.assign_content(bufnr('$') + 1, ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 0 if a buffer with {bufnr} is not shown in a window
        edit foo1
        edit foo2
        let ret = BufferWriter.assign_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 1 if a buffer with {bufnr} is shown in a window
        edit foo1
        vnew foo2
        let ret = BufferWriter.assign_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 1)
      End

      It assigns a content of a {bufnr} buffer to {content}
        edit foo1
        vnew foo2
        let bufnr = bufnr('foo1')
        call BufferWriter.assign_content(bufnr, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.assign_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello', 'World'])

        call BufferWriter.assign_content(bufnr, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [''])
      End

      It assigns a content of a {bufnr} buffer (utf-8) to {content} (utf-8)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It assigns a content of a {bufnr} buffer (utf-8) to {content} (cp1250)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])
      End

      It assigns a content of a {bufnr} buffer (cp1250) to {content} (cp1250)
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It assigns a content of a {bufnr} buffer (cp1250) to {content} (utf-8)
        if !empty(&termencoding)
          Skip &termencoding is specified. The test may fail by character treatement differenct so skip.
        endif
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])

      End
    End

    Context python3
      Before
        if !has('python3')
          Skip This Vim does not support python3 interface
        endif
        let BufferWriter.use_python = 0
        let BufferWriter.use_python3 = 1
      End

      It returns 0 if a buffer with {bufnr} does not exist
        let ret = BufferWriter.assign_content(bufnr('$') + 1, ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 0 if a buffer with {bufnr} is not shown in a window
        edit foo1
        edit foo2
        let ret = BufferWriter.assign_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 1 if a buffer with {bufnr} is shown in a window
        edit foo1
        vnew foo2
        let ret = BufferWriter.assign_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 1)
      End

      It assigns a content of a {bufnr} buffer to {content}
        edit foo1
        vnew foo2
        let bufnr = bufnr('foo1')
        call BufferWriter.assign_content(bufnr, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.assign_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello', 'World'])

        call BufferWriter.assign_content(bufnr, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [''])
      End

      It assigns a content of a {bufnr} buffer (utf-8) to {content} (utf-8)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It assigns a content of a {bufnr} buffer (utf-8) to {content} (cp1250)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])
      End

      It assigns a content of a {bufnr} buffer (cp1250) to {content} (cp1250)
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It assigns a content of a {bufnr} buffer (cp1250) to {content} (utf-8)
        if !empty(&termencoding)
          Skip &termencoding is specified. The test may fail by character treatement differenct so skip.
        endif
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])

      End
    End

    Context vim
      Before
        let BufferWriter.use_python = 0
        let BufferWriter.use_python3 = 0
      End

      It returns 0 if a buffer with {bufnr} does not exist
        let ret = BufferWriter.assign_content(bufnr('$') + 1, ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 0 if a buffer with {bufnr} is not shown in a window
        edit foo1
        edit foo2
        let ret = BufferWriter.assign_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 1 if a buffer with {bufnr} is shown in a window
        edit foo1
        vnew foo2
        let ret = BufferWriter.assign_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 1)
      End

      It returns 1 if a {bufnr} is v:null
        edit foo1
        let ret = BufferWriter.assign_content(v:null, ['Hello'])
        Assert Equals(ret, 1)
      End

      It assigns a content of a {bufnr} buffer to {content}
        edit foo1
        vnew foo2
        let bufnr = bufnr('foo1')
        call BufferWriter.assign_content(bufnr, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.assign_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello', 'World'])

        call BufferWriter.assign_content(bufnr, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [''])
      End

      It assigns a content of a {bufnr} buffer (utf-8) to {content} (utf-8)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It assigns a content of a {bufnr} buffer (utf-8) to {content} (cp1250)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])
      End

      It assigns a content of a {bufnr} buffer (cp1250) to {content} (cp1250)
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It assigns a content of a {bufnr} buffer (cp1250) to {content} (utf-8)
        if !empty(&termencoding)
          Skip &termencoding is specified. The test may fail by character treatement differenct so skip.
        endif
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.assign_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])

      End

      It assigns a content of a current buffer to {content} if {bufnr} is v:null
        edit foo1
        let bufnr = bufnr('%')
        call BufferWriter.assign_content(v:null, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.assign_content(v:null, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello', 'World'])

        call BufferWriter.assign_content(v:null, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [''])
      End

      It assigns a content of a current buffer (utf-8) to {content} (utf-8) if {bufnr} is v:null
        edit foo1 | setlocal fileencoding=utf-8
        let bufnr = bufnr('%')
        let content = readfile(utf8_encoding)
        call BufferWriter.assign_content(v:null, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It assigns a content of a current buffer (utf-8) to {content} (cp1250) if {bufnr} is v:null
        edit foo1 | setlocal fileencoding=utf-8
        let bufnr = bufnr('%')
        let content = readfile(cp1250_encoding)
        call BufferWriter.assign_content(v:null, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])
      End

      It assigns a content of a current buffer (cp1250) to {content} (cp1250) if {bufnr} is v:null
        edit foo1 | setlocal fileencoding=cp1250
        let bufnr = bufnr('%')
        let content = readfile(cp1250_encoding)
        call BufferWriter.assign_content(v:null, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding'), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It assigns a content of a current buffer (cp1250) to {content} (utf-8) if {bufnr} is v:null
        if !empty(&termencoding)
          Skip &termencoding is specified. The test may fail by character treatement differenct so skip.
        endif
        edit foo1 | setlocal fileencoding=cp1250
        let bufnr = bufnr('%')
        let content = readfile(utf8_encoding)
        call BufferWriter.assign_content(v:null, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])

      End
    End
  End

  Describe .extend_content({bufnr}, {content})
    Context python
      Before
        if !has('python')
          Skip This Vim does not support python interface
        endif
        let BufferWriter.use_python = 1
        let BufferWriter.use_python3 = 0
      End

      It returns 0 if a buffer with {bufnr} does not exist
        let ret = BufferWriter.extend_content(bufnr('$') + 1, ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 0 if a buffer with {bufnr} is not shown in a window
        edit foo1
        edit foo2
        let ret = BufferWriter.extend_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 1 if a buffer with {bufnr} is shown in a window
        edit foo1
        vnew foo2
        let ret = BufferWriter.extend_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 1)
      End

      It extends a content of a {bufnr} buffer with {content}
        edit foo1
        vnew foo2
        let bufnr = bufnr('foo1')
        call BufferWriter.extend_content(bufnr, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['HelloHello', 'World'])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(bufnr, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])
      End

      It extends a content of a {bufnr} buffer (utf-8) with {content} (utf-8)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉPUnix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It extends a content of a {bufnr} buffer (utf-8) with {content} (cp1250)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9PUnix EOL",
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])
      End

      It extends a content of a {bufnr} buffer (cp1250) with {content} (cp1250)
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉPUnix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It extends a content of a {bufnr} buffer (cp1250) with {content} (utf-8)
        if !empty(&termencoding)
          Skip &termencoding is specified. The test may fail by character treatement differenct so skip.
        endif
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰PUnix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])
      End
    End

    Context python3
      Before
        if !has('python3')
          Skip This Vim does not support python3 interface
        endif
        let BufferWriter.use_python = 0
        let BufferWriter.use_python3 = 1
      End

      It returns 0 if a buffer with {bufnr} does not exist
        let ret = BufferWriter.extend_content(bufnr('$') + 1, ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 0 if a buffer with {bufnr} is not shown in a window
        edit foo1
        edit foo2
        let ret = BufferWriter.extend_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 1 if a buffer with {bufnr} is shown in a window
        edit foo1
        vnew foo2
        let ret = BufferWriter.extend_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 1)
      End

      It extends a content of a {bufnr} buffer with {content}
        edit foo1
        vnew foo2
        let bufnr = bufnr('foo1')
        call BufferWriter.extend_content(bufnr, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['HelloHello', 'World'])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(bufnr, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])
      End

      It extends a content of a {bufnr} buffer with {content}
        edit foo1
        vnew foo2
        let bufnr = bufnr('foo1')
        call BufferWriter.extend_content(bufnr, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['HelloHello', 'World'])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(bufnr, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])
      End

      It extends a content of a {bufnr} buffer (utf-8) with {content} (utf-8)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉPUnix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It extends a content of a {bufnr} buffer (utf-8) with {content} (cp1250)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9PUnix EOL",
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])
      End

      It extends a content of a {bufnr} buffer (cp1250) with {content} (cp1250)
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉPUnix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It extends a content of a {bufnr} buffer (cp1250) with {content} (utf-8)
        if !empty(&termencoding)
          Skip &termencoding is specified. The test may fail by character treatement differenct so skip.
        endif
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰PUnix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])
      End
    End

    Context vim
      Before
        let BufferWriter.use_python = 0
        let BufferWriter.use_python3 = 0
      End

      It returns 0 if a buffer with {bufnr} does not exist
        let ret = BufferWriter.extend_content(bufnr('$') + 1, ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 0 if a buffer with {bufnr} is not shown in a window
        edit foo1
        edit foo2
        let ret = BufferWriter.extend_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 0)
      End

      It returns 1 if a buffer with {bufnr} is shown in a window
        edit foo1
        vnew foo2
        let ret = BufferWriter.extend_content(bufnr('foo1'), ['Hello'])
        Assert Equals(ret, 1)
      End

      It returns 1 if a {bufnr} is v:null
        edit foo1
        let ret = BufferWriter.extend_content(v:null, ['Hello'])
        Assert Equals(ret, 1)
      End

      It extends a content of a {bufnr} buffer with {content}
        edit foo1
        vnew foo2
        let bufnr = bufnr('foo1')
        call BufferWriter.extend_content(bufnr, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['HelloHello', 'World'])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(bufnr, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(bufnr, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])
      End

      It extends a content of a {bufnr} buffer (utf-8) with {content} (utf-8)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉPUnix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It extends a content of a {bufnr} buffer (utf-8) with {content} (cp1250)
        edit foo1 | setlocal fileencoding=utf-8
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9PUnix EOL",
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])
      End

      It extends a content of a {bufnr} buffer (cp1250) with {content} (cp1250)
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(cp1250_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉPUnix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It extends a content of a {bufnr} buffer (cp1250) with {content} (utf-8)
        if !empty(&termencoding)
          Skip &termencoding is specified. The test may fail by character treatement differenct so skip.
        endif
        edit foo1 | setlocal fileencoding=cp1250
        vnew foo2
        let bufnr = bufnr('foo1')
        let content = readfile(utf8_encoding)
        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])

        call BufferWriter.extend_content(bufnr, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰PUnix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])
      End

      It extends a content of a current buffer with {content} if {bufnr} is v:null
        edit foo1
        let bufnr = bufnr('%')
        call BufferWriter.extend_content(v:null, ['Hello'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['Hello'])

        call BufferWriter.extend_content(v:null, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), ['HelloHello', 'World'])

        call BufferWriter.extend_content(v:null, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(v:null, ['Hello', 'World'])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])

        call BufferWriter.extend_content(v:null, [])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'HelloHello',
              \ 'WorldHello',
              \ 'WorldHello',
              \ 'World',
              \])
      End

      It extends a content of a current buffer (utf-8) with {content} (utf-8) if {bufnr} is v:null
        edit foo1 | setlocal fileencoding=utf-8
        let bufnr = bufnr('%')
        let content = readfile(utf8_encoding)
        call BufferWriter.extend_content(v:null, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])

        call BufferWriter.extend_content(v:null, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉPUnix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It extends a content of a current buffer (utf-8) with {content} (cp1250) if {bufnr} is v:null
        edit foo1 | setlocal fileencoding=utf-8
        let bufnr = bufnr('%')
        let content = readfile(cp1250_encoding)
        call BufferWriter.extend_content(v:null, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'utf-8')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])

        call BufferWriter.extend_content(v:null, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9PUnix EOL",
              \ "\xe1rv\xedzt\xfbr\xf5 t\xfck\xf6rf\xfar\xf3g\xe9p",
              \ "\xc1RV\xcdZT\xdbR\xd5 T\xdcK\xd6RF\xdaR\xd3G\xc9P",
              \])
      End

      It extends a content of a current buffer (cp1250) with {content} (cp1250) if {bufnr} is v:null
        edit foo1 | setlocal fileencoding=cp1250
        let bufnr = bufnr('%')
        let content = readfile(cp1250_encoding)
        call BufferWriter.extend_content(v:null, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])

        call BufferWriter.extend_content(v:null, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉPUnix EOL',
              \ 'árvíztűrő tükörfúrógép',
              \ 'ÁRVÍZTŰRŐ TÜKÖRFÚRÓGÉP',
              \])
      End

      It extends a content of a current buffer (cp1250) with {content} (utf-8) if {bufnr} is v:null
        if !empty(&termencoding)
          Skip &termencoding is specified. The test may fail by character treatement differenct so skip.
        endif
        edit foo1 | setlocal fileencoding=cp1250
        let bufnr = bufnr('%')
        let content = readfile(utf8_encoding)
        call BufferWriter.extend_content(v:null, content)
        Assert Equals(getbufvar(bufnr, '&fileencoding', &encoding), 'cp1250')
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])

        call BufferWriter.extend_content(v:null, content)
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Unix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰PUnix EOL',
              \ 'ĂˇrvĂ­ztĹ±rĹ‘ tĂĽkĂ¶rfĂşrĂłgĂ©p',
              \ 'Ă??RVĂŤZTĹ°RĹ?? TĂśKĂ–RFĂšRĂ“GĂ‰P',
              \])
      End
    End
  End

  Describe .new({options})
    It returns a new writer instance
      let writer = BufferWriter.new()
      Assert KeyExists(writer, 'bufnr')
      Assert KeyExists(writer, 'updatetime')
      Assert KeyExists(writer, 'start')
      Assert KeyExists(writer, 'stop')
      Assert KeyExists(writer, 'clear')
      Assert KeyExists(writer, 'write')
      Assert KeyExists(writer, 'flush')
    End

    Describe A writer instance
      Before
        edit foo1
        vnew foo2
        let bufnr = bufnr('foo1')
      End

      It repeatedly flush a queued content into the assigned buffer
        let waittime = (BufferWriter.updatetime * 5) . 'm'
        let writer = BufferWriter.new({'bufnr': bufnr})
        call writer.write(['Hello', ''])
        call writer.write(['Hello', ''])
        call writer.write(['Hello', ''])
        execute 'sleep' waittime
        Assert Equals(getbufline(bufnr, 1, '$'), [''])
        call writer.start()
        execute 'sleep' waittime
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Hello',
              \ 'Hello',
              \ '',
              \])
        call writer.write(['Hello', ''])
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Hello',
              \ 'Hello',
              \ '',
              \])
        execute 'sleep' waittime
        Assert Equals(getbufline(bufnr, 1, '$'), [
              \ 'Hello',
              \ 'Hello',
              \ 'Hello',
              \ 'Hello',
              \ '',
              \])
      End
    End
  End
End
