if &encoding ==# 'latin1'
  set encoding=utf-8
endif

" Force English interface
language message C
set helplang=en

let s:assert = themis#helper('assert')
call themis#option('recursive', 1)
call themis#option('reporter', 'dot')
call themis#helper('command').with(s:assert)

call themis#log('***********************************************************')
call themis#log('v:progname:     ' . v:progname)
call themis#log('v:version:      ' . v:version)
call themis#log('has("lua"):     ' . has('lua'))
call themis#log('has("python"):  ' . has('python'))
call themis#log('has("python3"): ' . has('python3'))
call themis#log('$LANG:          ' . $LANG)
call themis#log('&encoding:      ' . &encoding)
call themis#log('&termencoding:  ' . &termencoding)
call themis#log('&fileencodings: ' . &fileencodings)
call themis#log('&fileformats:   ' . &fileformats)
call themis#log('&shellslash:    ' . (exists('&shellslash') ? &shellslash : 'DISABLED'))
call themis#log('&hidden:        ' . &hidden)
call themis#log('&autoread:      ' . &autoread)
call themis#log('&autowrite:     ' . &autowrite)
call themis#log('&autowriteall:  ' . &autowriteall)
call themis#log('&runtimepath:')
for s:runtimepath in split(&runtimepath, ',')
  call themis#log('  ' . s:runtimepath)
endfor
call themis#log('-----------------------------------------------------------')


" Synchronous Gina command for test
command! -nargs=* -range=% -bang
      \ -complete=customlist,gina#command#complete
      \ GinaSync
      \ call gina#command#call(<q-bang>, [<line1>, <line2>], <q-args>, <q-mods>) |
      \ call gina#process#wait()


" Git ------------------------------------------------------------------------
let s:is_windows = has('win32') || has('win64')
let s:scriptroot = expand('<sfile>:p:h')
let s:separator = s:is_windows ? '\' : '/'
execute 'source' fnameescape(s:scriptroot . s:separator . 'slit.vim')

call themis#log('git version:     ' . g:git_version)
call themis#log('  worktree:      ' . g:git_support_worktree)
call themis#log('git config:')
for record in split(system('git config --list'), '\r\?\n')
  call themis#log('  ' . record)
endfor
call themis#log('***********************************************************')


