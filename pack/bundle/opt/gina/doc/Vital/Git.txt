*Vital/Git.txt*			A git repository library

Version: 0.1.0
Author : Alisue <lambdalisue@hashnote.net>
License: MIT license
Support: Vim 8.0.0134 and above
Support: Neovim 0.1.7 and above


=============================================================================
CONTENTS					*Vital.Git-content*

INTRODUCTION					|Vital.Git-introduction|
INTERFACE					|Vital.Git-interface|
  FUNCTION					|Vital.Git-function|


=============================================================================
INTRODUCTION					*Vital.Git-introduction*

*Vital.Git* is a |Vital| module used for find/parse a git repository.


=============================================================================
INTERFACE					*Vital.Git-interface*

-----------------------------------------------------------------------------
FUNCTION					*Vital.Git-function*

						*Vital.Git.new()*
.new({path})
	Create and return a new git instance of {path} or an empty dict.
	It recursively go up the directory to find a ".git" file/directory
	rather than executing "git" command to quickly find a git repository.
	A git instance has the following attributes.

	"worktree"	An absolute path of the working tree.
	"repository"	An absolute path of the repository (.git).
	"commondir"	An absolute path of the repository common directory.

						*Vital.Git.resolve()*
.resolve({git}, {path})
	Resolve {path} in a repository of {git} instance and return an
	absolute path.
	If respects "commondir" attribute of {git} when a corresponding file
	of {path} is not found in "repository" attribute of {git}.
>
	echo Git.resolve(git, 'HEAD')
	" a/path/to/worktree/.git/HEAD
	echo Git.resolve(git, 'refs/heads/master')
	" a/path/to/worktree/.git/refs/heads/master
<

						*Vital.Git.get_config()*
.get_config({git}[, {fail-silently}])
	Return a dictionary of "config" file in a repository of {git}.

						*Vital.Git.get_remote_of()*
.get_remote_of({git}, {remote}[, {config}])
	Return [remote "{remote}"] section of "config" file in a repository
	of {git}. When {config} dictionary is omitted, {config} is retrieved
	internally.

						*Vital.Git.get_branch_of()*
.get_branch_of({git}, {branch}[, {config}])
	Return [branch "{branch}"] section of "config" file in a repository
	of {git}. When {config} dictionary is omitted, {config} is retrieved
	internally.

						*Vital.Git.get_hashref_of()*
.get_hashref_of({git}, {ref})
	Return a hashref of {ref}.
>
	let hashref = Git.get_hashref_of(git, 'HEAD')
	let hashref = Git.get_hashref_of(git, 'refs/heads/master')
	let hashref = Git.get_hashref_of(git, 'refs/remotes/origin/master')
<

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
