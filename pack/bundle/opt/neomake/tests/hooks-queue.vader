Include: include/setup.vader

Execute (hook handling gets queued for global g:neomake_hook_context):
  call g:NeomakeSetupAutocmdWrappers()
  let maker = copy(g:success_maker)
  " No postprocessing (defaults to neomake#utils#CompressWhitespace).
  let maker.postprocess = []

  " Change to initial window to trigger processing there.
  let s:finished_called = []
  function! s:OnFinished(...)
    wincmd p
    let s:finished_called += [a:000]
  endfunction
  augroup neomake_tests
    au User NeomakeFinished nested call s:OnFinished()
  augroup END

  new
  let s:win1 = winnr()
  call neomake#Make({'enabled_makers': [maker]})
  norm! V
  NeomakeTestsWaitForFinishedJobs
  new
  call neomake#Make({'enabled_makers': [maker]})
  NeomakeTestsWaitForFinishedJobs
  wincmd p

  bwipe
  exe s:win1 . 'wincmd w'
  bwipe

  Assert !exists('g:neomake_hook_context'), 'Hook context was cleaned.'
  AssertEqual len(g:neomake_test_jobfinished), 2
  AssertEqual len(s:finished_called), 2

Execute (hook handling gets queued for global g:neomake_hook_context (with postprocessing)):
  call g:NeomakeSetupAutocmdWrappers()
  let maker = copy(g:success_maker)
  let maker.postprocess = ['neomake#utils#CompressWhitespace']

  " Change to initial window to trigger processing there.
  let s:finished_called = []
  function! s:OnFinished(...)
    wincmd p
    let s:finished_called += [a:000]
  endfunction
  augroup neomake_tests
    au User NeomakeFinished nested call s:OnFinished()
  augroup END

  new
  let s:win1 = winnr()
  call neomake#Make({'enabled_makers': [maker]})
  norm! V
  NeomakeTestsWaitForFinishedJobs
  new
  call neomake#Make({'enabled_makers': [maker]})
  NeomakeTestsWaitForFinishedJobs
  wincmd p

  bwipe
  exe s:win1 . 'wincmd w'
  bwipe

  Assert !exists('g:neomake_hook_context'), 'Hook context was cleaned.'
  AssertEqual len(g:neomake_test_jobfinished), 2
  AssertEqual len(s:finished_called), 2

Execute (Nested neomake#utils#hook):
  function! s:nested_hook_cb(c)
      AssertEqual g:neomake_hook_context, {'context': a:c}
      let next = a:c + 1
      call neomake#utils#hook('Event'.next, {'context': next})
  endfunction

  augroup neomake_tests
    au User Event1 call s:nested_hook_cb(1)
    au User Event2 call s:nested_hook_cb(2)
    au User Event3 call s:nested_hook_cb(3)
  augroup END
  call neomake#utils#hook('Event1', {'context': 1})
  AssertNeomakeMessage "Calling User autocmd Event1 with context: {'context': 1}.", 2
  AssertNeomakeMessage "Calling User autocmd Event2 with context: {'context': 2}.", 2
  AssertNeomakeMessage "Calling User autocmd Event3 with context: {'context': 3}.", 2
  AssertNeomakeMessage 'Skipping User autocmd Event4: no hooks.'

Execute (Nested neomake#utils#hook with exception):
  function! s:nested_hook_cb(c)
    AssertEqual g:neomake_hook_context, {'context': a:c}
    let next = a:c + 1
    if a:c == 2
      throw 'Exception'
    endif
    call neomake#utils#hook('Event'.next, {'context': next})
  endfunction

  augroup neomake_tests
    au User Event1 call s:nested_hook_cb(1)
    au User Event2 call s:nested_hook_cb(2)

    au User Event3 let g:neomake_hook_context = 'changed'
  augroup END
  call neomake#utils#hook('Event1', {'context': 1})
  AssertNeomakeMessage "Calling User autocmd Event1 with context: {'context': 1}.", 2
  AssertNeomakeMessage "Calling User autocmd Event2 with context: {'context': 2}.", 2
  AssertNeomakeMessage 'Error during User autocmd for Event2: Exception.', 0
  Assert !exists('g:neomake_hook_context'), 'g:neomake_hook_context was cleared'

  call neomake#utils#hook('Event3', {'context': 'fake'})
  AssertNeomakeMessage 'Error during User autocmd for Event3: Vim(let):E741: Value is locked: g:neomake_hook_context.', 0
  Assert !exists('g:neomake_hook_context'), 'g:neomake_hook_context was cleared'
