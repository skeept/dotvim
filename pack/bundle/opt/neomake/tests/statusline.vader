Include: include/setup.vader

Execute (LoclistCounts):
  call neomake#statusline#ResetCounts()
  call neomake#statusline#ResetCountsForBuf(99)
  call neomake#statusline#AddLoclistCount(99, {'type': 'E', 'bufnr': 99})
  call neomake#statusline#AddLoclistCount(99, {'type': 'W', 'bufnr': 99})
  AssertEqual neomake#statusline#LoclistCounts(), {}
  " With 'buf ==# "all"' this matched 0.
  AssertEqual neomake#statusline#LoclistCounts(0), {}

  " 0 could refer to current buffer, but does not currently.
  let curbufnr = bufnr('%')
  call neomake#statusline#AddLoclistCount(curbufnr, {'type': 'E', 'bufnr': curbufnr})
  AssertEqual neomake#statusline#LoclistCounts(0), {}

  AssertEqual neomake#statusline#LoclistCounts(1), {}
  AssertEqual neomake#statusline#LoclistCounts(99), {'E': 1, 'W': 1}
  AssertEqual filter(neomake#statusline#LoclistCounts('all'), 'v:key == 99'),
    \ {'99': {'E': 1, 'W': 1}}

Execute (neomake#statusline#ResetCounts):
  call neomake#statusline#ResetCounts()
  call neomake#statusline#AddLoclistCount(99, {'type': 'E', 'bufnr': 99})
  call neomake#statusline#AddLoclistCount(99, {'type': 'W', 'bufnr': 99})
  AssertEqual neomake#statusline#LoclistCounts('all'), {'99': {'E': 1, 'W': 1}}
  call neomake#statusline#AddQflistCount({'type': 'S', 'bufnr': 99})
  AssertEqual neomake#statusline#QflistCounts(), {'S': 1}

  call neomake#statusline#ResetCounts()
  AssertEqual neomake#statusline#LoclistCounts('all'), {}
  AssertEqual neomake#statusline#QflistCounts(), {}

Execute (LoclistCounts returns number):
  call g:NeomakeSetupAutocmdWrappers()
  new
  let bufnr = bufnr('%')
  call neomake#statusline#AddLoclistCount(bufnr, {'type': 'E', 'bufnr': bufnr})
  AssertEqual neomake#statusline#LoclistCounts(bufnr), {'E': 1}
  AssertEqual [], g:neomake_test_countschanged
  call neomake#statusline#ResetCountsForBuf(bufnr)
  AssertEqual bufnr, g:neomake_test_countschanged[0].bufnr
  call setbufvar(g:neomake_test_countschanged[0].bufnr, 'test', 1)
  AssertEqual 1, getbufvar(g:neomake_test_countschanged[0].bufnr, 'test')
  bwipe

Execute (LoclistCounts for wiped buffer should clean s:loclist_counts):
  call g:NeomakeSetupAutocmdWrappers()
  new
  let bufnr = bufnr('%')
  call neomake#statusline#AddLoclistCount(bufnr, {'type': 'E', 'bufnr': bufnr})
  AssertEqual neomake#statusline#LoclistCounts(bufnr), {'E': 1}
  bwipe
  AssertEqual neomake#statusline#LoclistCounts(bufnr), {'E': 1}
  AssertEqual [], g:neomake_test_countschanged

  call neomake#statusline#ResetCounts()
  AssertEqual bufnr, g:neomake_test_countschanged[0].bufnr
  call setbufvar(g:neomake_test_countschanged[0].bufnr, 'test', 1)
  AssertEqual '', getbufvar(g:neomake_test_countschanged[0].bufnr, 'test')

Execute (neomake#statusline#get_status):
  let bufnr = bufnr('')
  AssertEqual neomake#statusline#get_status(bufnr, {}), '?'

  AssertEqual neomake#statusline#get_status(bufnr, {'format_loclist_unknown': '{{running_job_names}}'}), ''
  " {{running_jobs}} is only available with 'format_running' (internally).
  AssertEqual neomake#statusline#get_status(bufnr, {'format_loclist_unknown': '{{running_jobs}}'}), '{{running_jobs}}'
  AssertNeomakeMessage 'Unknown statusline format: {{running_jobs}}.', 0

  call neomake#Make({'enabled_makers': [g:sleep_maker]})
  if neomake#has_async_support()
    AssertEqual neomake#statusline#get_status(bufnr, {}), '… (sleep-maker)'
    AssertEqual neomake#statusline#get_status(bufnr, {'format_running': '...'}), '...'
    AssertEqual neomake#statusline#get_status(bufnr, {'format_running': ''}), ''
    " format_running=0 disables display of running state.
    AssertEqual neomake#statusline#get_status(bufnr, {'format_running': 0}), '?'
    AssertEqual neomake#statusline#get_status(bufnr, {'format_running': '{{running_job_names}}'}), 'sleep-maker'

    Assert neomake#statusline#get_status(bufnr, {'format_running': '{{running_jobs}}'}) =~# '\m^{''', '{{running_jobs}} is replaced in format_running'

    call neomake#statusline#get_status(bufnr(''), {'format_running': 'Neomake: {{does_not_exist}}'})
    AssertNeomakeMessage 'Unknown statusline format: {{does_not_exist}}.', 0
    NeomakeTestsWaitForFinishedJobs
  else
    AssertEqual neomake#statusline#get_status(bufnr, {'format_running': '...'}), '%#NeomakeStatusGood#✓'
    AssertEqual neomake#statusline#get_status(bufnr, {'format_loclist_ok': 'dandy!'}), 'dandy!'
    AssertEqual neomake#statusline#get_status(bufnr, {'format_loclist_ok': '{{running_job_names}}'}), ''
  endif

  call neomake#statusline#get_status(bufnr(''), {'format_loclist_ok': 'Neomake: {{does_not_exist}}'})
  AssertNeomakeMessage 'Unknown statusline format: {{does_not_exist}}.', 0

  AssertEqual neomake#statusline#get_status(bufnr, {}), '%#NeomakeStatusGood#✓'
  AssertEqual neomake#statusline#get(bufnr, {}), '%#NeomakeStatusGood#✓'
  call neomake#statusline#ResetCountsForBuf(bufnr)
  AssertEqual neomake#statusline#get_status(bufnr, {}), '?'
  AssertEqual neomake#statusline#get(bufnr, {}), '?'

Execute (neomake#statusline#get_status: clears cache with new job (file mode)):
  new
  let bufnr = bufnr('%')
  CallNeomake {'enabled_makers': [g:error_maker]}
  AssertEqual neomake#statusline#get(bufnr, {}), '%#NeomakeStatColorTypeE# E:1 '

  call neomake#Make({'enabled_makers': [g:success_maker]})
  if neomake#has_async_support()
    AssertEqual neomake#statusline#get(bufnr, {}), '… (success-maker)'
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual neomake#statusline#get(bufnr, {}), '%#NeomakeStatusGood#✓'
  bwipe

Execute (neomake#statusline#get_status: clears cache with new job (project mode)):
  new
  let bufnr = bufnr('%')
  CallNeomake {'file_mode': 0, 'enabled_makers': [g:error_maker]}
  AssertEqual neomake#statusline#get(bufnr, {}), '%#NeomakeStatColorQuickfixTypeE# QE:1 '

  call neomake#Make({'file_mode': 0, 'enabled_makers': [g:true_maker]})
  if neomake#has_async_support()
    AssertEqual neomake#statusline#get(bufnr, {}), '… (true-maker!)'
  endif
  call neomake#Make({'file_mode': 0, 'enabled_makers': [g:success_maker]})
  if neomake#has_async_support()
    AssertEqual neomake#statusline#get(bufnr, {}), '… (true-maker!, success-maker!)'
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual neomake#statusline#get(bufnr, {}), '%#NeomakeStatusGood#✓'
  bwipe
