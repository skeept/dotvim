Include: include/setup.vader

Execute (Setup):
  function! NeomakeTestsAssertAutomakeAutocommands(events) abort
    let expected = []
    for e in a:events
      call add(expected, 'neomake_automake  '.e.':     *         call s:neomake_automake('''.e.''', expand(''<abuf>''))')
    endfor

    if exists('#neomake_automake')
      redir => redir_output
      silent au neomake_automake
      redir END
      let output = split(redir_output, "\n")[1:-1]
      let sort_output = []
      for i in range(1, len(output), 2)
        let sort_output += [output[i-1].': '.output[i]]
      endfor
    else
      let sort_output = []
    endif
    AssertEqual join(sort(expected), "\n"), join(sort(sort_output), "\n")
  endfunction
  call add(g:neomake_test_funcs_before, 'NeomakeTestsAssertAutomakeAutocommands')

Execute (augroup neomake_automake does not exist by default):
  Save g:neomake
  Assert !exists('#neomake_automake')
  call neomake#configure#automake()
  Assert !exists('#neomake_automake')

Execute (short setup: 'n'):
  Save g:neomake
  call neomake#configure#automake('n')
  if exists('##TextChanged') && has('timers')
    let event = 'TextChanged'
  else
    let event = 'CursorHold'
    AssertNeomakeMessage 'automake: using CursorHold instead of TextChanged.', 3
  endif
  call NeomakeTestsAssertAutomakeAutocommands(['InsertLeave', event])
  Assert exists('#neomake_automake')

Execute (short setup: 'i'):
  Save g:neomake
  call neomake#configure#automake('i')
  if exists('##TextChangedI') && has('timers')
    let event = 'TextChangedI'
  else
    let event = 'CursorHoldI'
    AssertNeomakeMessage 'automake: using CursorHoldI instead of TextChangedI.', 3
  endif
  call NeomakeTestsAssertAutomakeAutocommands([event])
  Assert exists('#neomake_automake'), 1

Execute (short setup: 'w'):
  Save g:neomake
  call neomake#configure#automake('w')
  call NeomakeTestsAssertAutomakeAutocommands(['BufWritePost'])
  if has('timers')
    AssertEqual g:neomake, {'automake': {'events': {'BufWritePost': {'delay': 0}}}}
  else
    AssertEqual g:neomake, {'automake': {'events': {'BufWritePost': {}}}}
  endif

Execute (short setup: 'w' with delay):
  Save g:neomake
  call neomake#configure#automake('w', 100)
  call NeomakeTestsAssertAutomakeAutocommands(['BufWritePost'])
  if has('timers')
    AssertEqual g:neomake, {'automake': {'events':
    \ {'BufWritePost': {'delay': 0}}}, 'automake_delay': 100}
  else
    AssertEqual g:neomake, {'automake': {'events':
    \ {'BufWritePost': {}}}, 'automake_delay': 0}
  endif

Execute (short setup: 'r'):
  Save g:neomake
  call neomake#configure#automake('r')
  call NeomakeTestsAssertAutomakeAutocommands(['BufWinEnter', 'FileChangedShellPost', 'FileType'])

Execute (setup: short vs. long):
  Save g:neomake
  call neomake#configure#automake('w', 500)
  let short_config = copy(g:neomake)
  unlet g:neomake
  call neomake#configure#automake({
  \ 'BufWritePost': has('timers') ? {'delay': 0} : {},
  \ }, 500)
  AssertEqual short_config, g:neomake

  " TODO: sync with doc"
  unlet g:neomake
  call neomake#configure#automake('nrw', 500)
  let short_config = copy(g:neomake)

  unlet g:neomake
  if exists('#TextChanged')
    call neomake#configure#automake({
    \ 'TextChanged': {},
    \ 'InsertLeave': {},
    \ 'FileType': {},
    \ 'FileChangedShellPost': {},
    \ 'BufWritePost': {'delay': 0},
    \ 'BufWinEnter': {},
    \ }, 500)
  else
    call neomake#configure#automake({
    \ 'CursorHold': {},
    \ 'FileType': {},
    \ 'FileChangedShellPost': {},
    \ 'InsertLeave': {},
    \ 'BufWritePost': {},
    \ 'BufWinEnter': {},
    \ }, 0)
  endif
  AssertEqual short_config, g:neomake

Execute (Automake supports custom buffer config):
  Save g:neomake

  new
  set filetype=neomake_tests
  Save g:neomake_test_enabledmakers
  let g:neomake_test_enabledmakers = [g:entry_maker]
  call g:NeomakeSetupAutocmdWrappers()

  call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 0}})
  call neomake#configure#automake({'BufWinEnter': {'delay': 0}})

  AssertEqual b:neomake.automake.events, {'CursorHold': {'delay': 0}}
  AssertNeomakeMessage 'automake: registered events: BufWinEnter, CursorHold.'

  doautocmd BufWinEnter
  AssertNeomakeMessage 'automake: automake for event BufWinEnter.'
  AssertNeomakeMessage 'automake: event is not registered.'
  AssertEqual g:neomake_test_finished, []
  doautocmd CursorHold
  AssertEqual len(g:neomake_test_finished), 1

  " Remove custom buffer config.
  unlet b:neomake.automake.events
  doautocmd BufWinEnter
  AssertNeomakeMessage 'automake: automake for event BufWinEnter.'
  AssertEqual len(g:neomake_test_finished), 1
  AssertNeomakeMessage 'automake: buffer was not changed.', 3

  " Resetting global config does not reset tick?!
  call neomake#configure#automake({'BufWinEnter': {'delay': 0}})
  doautocmd BufWinEnter
  AssertNeomakeMessage 'automake: buffer was not changed.', 3
  AssertEqual len(g:neomake_test_finished), 1

  " Changing buffer config resets tick.
  call neomake#configure#automake_for_buffer({'BufWinEnter': {'delay': 0}}, 0, [g:entry_maker])
  AssertNeomakeMessage 'automake: resetting tick because of config changes.', 3
  doautocmd BufWinEnter
  AssertNeomakeMessage 'entry_maker: getting entries via get_list_entries.'

  " Changing buffer options resets tick.
  call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 0}}, 0, [g:entry_maker])
  doautocmd CursorHold
  AssertNeomakeMessage 'entry_maker: getting entries via get_list_entries.'
  bwipe

Execute (Automake config via dict):
  Save g:neomake

  call neomake#configure#automake({
  \ 'BufWinEnter': {'delay': 200},
  \ 'TextChanged': {'delay': 200}})

  let expected = {'automake': {'events': {}}}
  if has('timers')
    let expected.automake.events.BufWinEnter = {'delay': 200}
  else
    AssertNeomakeMessage 'automake: timer support is required for automaking, removing event BufWinEnter.'
  endif
  if exists('##TextChanged')
    if !has('timers')
      AssertNeomakeMessage 'automake: timer support is required for automaking, removing event TextChanged.'
    else
      let expected.automake.events.TextChanged = {'delay': 200}
    endif
  else
    AssertNeomakeMessage 'automake: event TextChanged does not exist.', 0
  endif
  AssertEqual g:neomake, expected

Execute (Error with unsupported events):
  Save g:neomake

  call neomake#configure#automake({
  \ 'EventDoesNotExist': {'delay': 10}})
  AssertNeomakeMessage 'automake: event EventDoesNotExist does not exist.', 0

Execute (Automake):
  Save g:neomake

  call g:NeomakeSetupAutocmdWrappers()

  call neomake#configure#automake('n', 10)
  if exists('##TextChanged') && has('timers')
    let event = 'TextChanged'
  else
    let event = 'CursorHold'
  endif

  AssertEqual &buftype, 'nofile'
  new
  let bufnr = bufnr('%')
  let b:neomake_tempfile_enabled = 1
  let len_before = len(g:neomake_test_messages)
  setfiletype neomake_tests
  AssertEqual len_before, len(g:neomake_test_messages), 'Nothing happened on FileType, since buffer is not configured.'
  if exists('#TextChanged')
    AssertNeomakeMessage 'automake: registered events: InsertLeave, TextChanged.'
  else
    AssertNeomakeMessage 'automake: registered events: CursorHold, InsertLeave.'
  endif
  normal! iline1

  AssertNeomakeMessage 'Maker not found (for filetype neomake_tests): nonexisting.', 3
  AssertNeomakeMessage 'Exe (maker_without_exe) of auto-configured maker maker_without_exe is not executable, skipping.'
  AssertNeomakeMessage 'automake: configured buffer for ft=neomake_tests (no enabled makers).', 3
  AssertNeomakeMessage 'automake: setting tick for new buffer.', 3
  AssertNeomakeMessage 'automake: no enabled makers.', 3

  " TODO: better to have automake.ft.neomake_tests.enabled_makers ?!
  call neomake#config#set('ft.neomake_tests.automake.enabled_makers', ['true'])
  doautocmd FileType
  AssertNeomakeMessage 'automake: configured buffer for ft=neomake_tests (true (global)).', 3
  AssertNeomakeMessage 'automake: resetting tick because of registration changes.', 3
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 0

  doautocmd InsertLeave
  NeomakeTestsWaitForFinishedJobs
  AssertNeomakeMessage 'automake: tick changed (new).', 3, {'bufnr': bufnr}
  if has('timers')
    NeomakeTestsWaitForNextFinishedJob
  endif
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 1

  " Tick was not reset on FileType-reconfig (no changes).
  doautocmd FileType
  AssertNeomakeMessage 'automake: configured buffer for ft=neomake_tests (true (global)).', 3
  doautocmd InsertLeave
  if has('timers')
    NeomakeTestsWaitForMessage 'automake: buffer was not changed.', 3
  endif
  AssertEqual len(g:neomake_test_jobfinished), 1

  normal! ifoo
  NeomakeTestsWaitForNextFinishedJob
  AssertEqual len(g:neomake_test_jobfinished), 2

  " Should not run without changes to the buffer.
  exe 'doautocmd' event
  if has('patch-8.0.1494') && !has('patch-8.0.1633')
    exe 'doautocmd' event
  endif
  NeomakeTestsWaitForMessage 'automake: handling event '.event.'.', 3
  AssertNeomakeMessage 'automake: buffer was not changed.'
  AssertEqual len(g:neomake_test_jobfinished), 2

  " Should run with changes to the buffer.
  norm oline2
  exe 'doautocmd' event
  NeomakeTestsWaitForNextFinishedJob
  AssertEqual len(g:neomake_test_jobfinished), 3

  norm oline4
  if has('timers')
    AssertEqual len(g:neomake_test_jobfinished), 3
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+).', 3, {'bufnr': bufnr}
    let timer = g:neomake_test_matchlist[1]
    exe 'doautocmd' event
    AssertEqual len(g:neomake_test_jobfinished), 3
    AssertNeomakeMessage 'automake: stopped existing timer: '.timer.'.', 3, {'bufnr': bufnr}
    NeomakeTestsWaitForNextFinishedJob
    AssertNeomakeMessage 'automake: started timer (10ms): '.(timer+1).'.', 3, {'bufnr': bufnr}
  endif

  AssertEqual len(g:neomake_test_jobfinished), 4

  new
  exe 'doautocmd' event
  if has('patch-8.0.1494') && !has('patch-8.0.1633')
    exe 'doautocmd' event
  endif
  AssertNeomakeMessage 'automake: configured buffer for ft= (no enabled makers).'
  AssertNeomakeMessage 'automake: no enabled makers.'

  let b:neomake_automake_enabled_makers = ['foo']
  doautocmd FileType
  AssertNeomakeMessage 'automake: configured buffer for ft= (no enabled makers).'
  let b:neomake = {'automake': {'enabled_makers': ['configured_maker']}}
  let n = len(g:neomake_test_messages)
  exe 'doautocmd' event
  let m = len(g:neomake_test_messages)
  AssertEqual g:neomake_test_messages[n : m], [
  \ [3, 'automake: handling event '.event.'.', {'bufnr': bufnr('%')}],
  \ [3, 'automake: no enabled makers.', {'bufnr': bufnr('%')}],
  \ ]

  call neomake#configure#automake('nw')
  normal! ifoo
  AssertNeomakeMessage "Using setting automake.enabled_makers=['configured_maker'] from 'buffer'.", 3
  AssertNeomakeMessage 'Maker not found (for empty filetype): configured_maker.', 0
  AssertNeomakeMessage 'automake: configured buffer for ft= (no enabled makers).'
  AssertNeomakeMessage 'automake: no enabled makers.'

  let tmpfile = tempname()
  exe 'file' tmpfile
  w
  NeomakeTestsWaitForFinishedJobs

  AssertNeomakeMessage 'automake: handling event BufWritePost.', 3
  AssertNeomakeMessage 'automake: no enabled makers.', 3

  bwipe!
  bwipe!

Execute (Automake: skips non-default buftypes):
  Save g:neomake

  call neomake#configure#automake('n', 10)
  if !exists('##TextChanged') || !has('timers')
    AssertNeomakeMessage 'automake: using CursorHold instead of TextChanged.', 3
    let event = 'CursorHold'
  else
    let event = 'TextChanged'
  endif
  Assert exists('#neomake_automake')
  new
  setfiletype neomake_tests
  Save g:neomake_test_enabledmakers
  let g:neomake_test_enabledmakers = ['true']
  set buftype=nofile

  call g:NeomakeSetupAutocmdWrappers()

  exe 'doautocmd '.event
  if has('patch-8.0.1494') && !has('patch-8.0.1633')
    exe 'doautocmd' event
  endif
  NeomakeTestsWaitForMessage 'automake: ignoring '.event.' for buftype=nofile.', 3
  AssertEqual len(g:neomake_test_jobfinished), 0
  bwipe!

Execute (neomake#configure#automake_for_buffer does not set up autocommands for no makers):
  new
  set buftype=nofile
  call neomake#configure#automake_for_buffer('n', 10)
  AssertNeomakeMessage 'automake: configured buffer for ft= (no enabled makers).'
  AssertNeomakeMessage 'automake: registered events: .', 3
  Assert !exists('#neomake_automake')
  bwipe

Execute (neomake#configure#automake_for_buffer sets up autocommands with makers):
  new
  setfiletype neomake_tests
  let g:neomake_test_enabledmakers = ['true']
  call neomake#configure#automake_for_buffer('n', 10)
  AssertNeomakeMessage 'automake: configured buffer for ft=neomake_tests (true (default)).'
  if exists('#TextChanged')
    AssertNeomakeMessage 'automake: registered events: InsertLeave, TextChanged.'
  else
    AssertNeomakeMessage 'automake: registered events: CursorHold, InsertLeave.'
  endif
  bwipe

Execute (neomake#configure#automake_for_buffer logs error for unknown maker):
  new
  " This is fine for now, since it is still considered to be experimental API.
  call neomake#configure#automake_for_buffer('n', 0, ['another_maker'])
  AssertNeomakeMessage 'Maker not found (for empty filetype): another_maker.'
  bwipe

Execute (neomake#configure#automake_for_buffer sets up BufWritePost without delay):
  new
  set buftype=nofile
  set filetype=neomake_tests
  let g:neomake_test_enabledmakers = ['true']
  call neomake#configure#automake_for_buffer('w')
  call NeomakeTestsAssertAutomakeAutocommands(['BufWritePost'])
  if has('timers')
    AssertEqual b:neomake, {'automake': {'events': {'BufWritePost': {'delay': 0}}}}
  else
    AssertEqual b:neomake, {'automake': {'events': {'BufWritePost': {}}}}
  endif
  bwipe

Execute (neomake#configure#automake_for_buffer sets up BufWritePost with delay):
  new
  set buftype=nofile
  set filetype=neomake_tests
  let g:neomake_test_enabledmakers = ['true']
  call neomake#configure#automake_for_buffer('w', 5)
  call NeomakeTestsAssertAutomakeAutocommands(['BufWritePost'])
  if has('timers')
    AssertEqual b:neomake, {'automake': {'events': {
    \ 'BufWritePost': {'delay': 0}}}, 'automake_delay': 5}
  else
    AssertNeomakeMessage 'automake: timer support is required for delayed events.', 1
    AssertEqual b:neomake, {'automake': {'events': {
    \ 'BufWritePost': {}}}, 'automake_delay': 0}
  endif

  let tempname = tempname()
  exe 'w' tempname
  AssertNeomakeMessage 'automake: ignoring BufWritePost for buftype=nofile.'

  set buftype=
  set filetype=neomake_tests
  exe 'w!' tempname
  NeomakeTestsWaitForFinishedJobs
  bwipe

Execute (neomake#configure#automake_for_buffer skips non-default buftypes):
  tabnew
  let bufnr = bufnr('%')
  set buftype=nofile
  call neomake#configure#automake('r', 0)
  AssertNeomakeMessage 'automake: registered events: FileChangedShellPost, FileType, BufWinEnter.', 3
  bwipe

Execute (neomake#configure#automake_for_buffer can configure makers (dict)):
  new
  let bufnr = bufnr('%')
  set buftype=nofile
  call neomake#configure#automake_for_buffer('r', 0, {'makers': ['foo_maker']})
  AssertNeomakeMessage 'Maker not found (for empty filetype): foo_maker.', 0
  AssertNeomakeMessage 'automake: configured buffer for ft= (no enabled makers).', 3
  AssertNeomakeMessage 'automake: registered events: .', 3

  let maker = {'name': 'my-maker'}
  call neomake#configure#automake_for_buffer('r', 0, {'makers': [maker]})
  AssertNeomakeMessage 'Exe (my-maker) of maker my-maker is not executable.', 0

  let maker = {'name': 'true'}
  call neomake#configure#automake_for_buffer('r', 0, {'makers': [maker]})
  AssertNeomakeMessage 'automake: configured buffer for ft= (true (options)).', 3
  AssertNeomakeMessage 'automake: registered events: FileChangedShellPost, FileType, BufWinEnter.', 3
  bwipe

Execute (neomake#configure#automake_for_buffer can configure makers (list)):
  new
  let bufnr = bufnr('%')
  set buftype=nofile
  call neomake#configure#automake_for_buffer('r', 0, ['maker_1', 'maker_2'])
  AssertNeomakeMessage 'Maker not found (for empty filetype): maker_1.', 0
  AssertNeomakeMessage 'Maker not found (for empty filetype): maker_2.', 0

  let maker1 = {'name': 'maker_1', 'exe': 'true'}
  let maker2 = {'name': 'maker_2'}
  call neomake#configure#automake_for_buffer('r', 0, [maker1, maker2])
  AssertNeomakeMessage 'Exe (maker_2) of maker maker_2 is not executable.', 0
  AssertNeomakeMessage 'automake: configured buffer for ft= (maker_1 (options)).', 3
  AssertNeomakeMessage 'automake: registered events: FileChangedShellPost, FileType, BufWinEnter.', 3
  bwipe

Execute (neomake#configure#automake_for_buffer can configure makers (buffer var)):
  new
  set filetype=myft
  let b:neomake_myft_my_maker_maker = {'name': 'my_maker', 'exe': 'true'}
  call neomake#configure#automake_for_buffer('n', 300, ['my_maker'])
  AssertNeomakeMessage 'automake: configured buffer for ft=myft (my_maker (options)).', 3

  let b:neomake_myft_my_other_maker_maker = {'name': 'my_other_maker', 'exe': 'true'}
  call neomake#configure#automake_for_buffer('n', 300, {'makers': ['my_other_maker']})
  AssertNeomakeMessage 'automake: configured buffer for ft=myft (my_other_maker (options)).', 3
  bwipe

Execute (neomake#configure#automake_for_buffer can configure other buffers):
  let maker = {'name': 'my_maker', 'exe': 'true'}
  new
  let bufnr = bufnr('%')
  call neomake#configure#automake_for_buffer('n', 300, {'makers': [maker], 'bufnr': bufnr})
  AssertNeomakeMessage 'automake: configured buffer for ft= (my_maker (options)).', 3, {'bufnr': bufnr}

  " Configuration for another buffer.
  let my_other_maker = {'name': 'my_other_maker', 'exe': 'true'}
  new
  call neomake#configure#automake_for_buffer('n', 300, {'makers': [my_other_maker], 'bufnr': bufnr})
  Assert !exists('b:neomake')
  bwipe
  AssertNeomakeMessage 'automake: configured buffer for ft= (my_other_maker (options)).', 3, {'bufnr': bufnr}
  bwipe

Execute (neomake#configure#automake_for_buffer re-uses configured makers):
  Save g:neomake
  new
  call neomake#configure#automake_for_buffer({'InsertLeave': {'delay': 0}}, 0, [g:entry_maker])
  AssertNeomakeMessage 'automake: configured buffer for ft= (entry_maker (options)).', 3
  AssertNeomakeMessage 'automake: resetting tick because of config changes.', 3
  doautocmd InsertLeave
  AssertNeomakeMessage 'entry_maker: getting entries via get_list_entries.', 2

  call neomake#configure#automake_for_buffer({'InsertLeave': {'delay': 0}}, 0, [g:true_maker])
  AssertNeomakeMessage 'automake: resetting tick because of registration changes.', 3
  doautocmd InsertLeave
  AssertNeomakeMessage 'Running makers: true-maker.', 3
  NeomakeTestsWaitForFinishedJobs

  let len_before = len(g:neomake_test_messages)
  doautocmd FileType
  AssertEqual len_before, len(g:neomake_test_messages), 'Nothing happened.'
  bwipe

Execute (Automake handles unchanged buffer):
  " XXX: run for all?!
  if !has('timers')
    NeomakeTestsSkip 'Only with timers feature'
  else
    call g:NeomakeSetupAutocmdWrappers()
    call neomake#configure#automake({
    \ 'TextChanged': {'delay': 10}})
    new
    let g:neomake_test_enabledmakers = [g:sleep_maker]
    set filetype=neomake_tests
    doautocmd TextChanged
    if has('patch-8.0.1494') && !has('patch-8.0.1633')
      doautocmd TextChanged
    endif
    let make_id = neomake#GetStatus().last_make_id
    NeomakeTestsWaitForMessage '\vautomake: callback for timer \d+'
    doautocmd TextChanged
    NeomakeTestsWaitForFinishedJobs
    AssertNeomakeMessage 'automake: buffer was not changed.'

    AssertEqual len(g:neomake_test_finished), 1
    AssertEqual len(g:neomake_test_jobfinished), 1
    bwipe
  endif

Execute (BufWritePost does not run for unchanged buffer):
  call g:NeomakeSetupAutocmdWrappers()

  Save g:neomake
  call neomake#configure#automake('w')

  new
  let b:neomake_test_enabledmakers = ['true']
  set filetype=neomake_tests
  exe 'w' tempname()
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 1

  w
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 1
  AssertNeomakeMessage 'automake: buffer was not changed.'

  normal! ifoo
  w
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 2

  w
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 2
  AssertNeomakeMessage 'automake: buffer was not changed.'

  normal! oline2
  call neomake#Make(1, [])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_jobfinished), 3

  w
  AssertNeomakeMessage 'automake: buffer was not changed.'
  AssertEqual len(g:neomake_test_jobfinished), 3

  bwipe

Execute (BufWritePost does not run for unchanged buffer (delayed)):
  call g:NeomakeSetupAutocmdWrappers()

  Save g:neomake
  call neomake#configure#automake({'BufWritePost': {'delay': 5}})
  if !has('timers')
    AssertNeomakeMessage 'automake: timer support is required for automaking, removing event BufWritePost.', 0
  else
    new
    let b:neomake_test_enabledmakers = ['true']
    set filetype=neomake_tests
    exe 'w' tempname()
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    NeomakeTestsWaitForNextFinishedJob
    AssertEqual len(g:neomake_test_jobfinished), 1

    w
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 1
    AssertNeomakeMessage 'automake: buffer was not changed.'

    normal! ifoo
    w
    NeomakeTestsWaitForNextFinishedJob
    AssertEqual len(g:neomake_test_jobfinished), 2

    w
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 2
    AssertNeomakeMessage 'automake: buffer was not changed.'
    w
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_jobfinished), 2
    AssertNeomakeMessage 'automake: buffer was not changed.'
    bwipe
  endif

Execute (Automake stops previous jobs):
  if NeomakeAsyncTestsSetup()
    call g:NeomakeSetupAutocmdWrappers()
    call neomake#configure#automake({
    \ 'TextChanged': {'delay': 10}})
    new
    let maker = NeomakeTestsCommandMaker('sleep-maker', 'sleep .1; echo slept')
    let g:neomake_test_enabledmakers = [maker]

    set filetype=neomake_tests
    doautocmd TextChanged
    if has('patch-8.0.1494') && !has('patch-8.0.1633')
      doautocmd TextChanged
    endif
    NeomakeTestsWaitForMessage '\vautomake: callback for timer \d+'
    let first_make_id = neomake#GetStatus().last_make_id
    AssertEqual [first_make_id], b:neomake_automake_make_ids

    normal! ifoo
    doautocmd TextChanged
    NeomakeTestsWaitForMessage '\vautomake: started jobs: \[\d+\].'
    AssertNeomakeMessage '\vautomake: stopping previous make runs: '.first_make_id
    AssertNeomakeMessage '\vautomake: callback for timer \d+'
    let second_make_id = neomake#GetStatus().last_make_id
    Assert index(b:neomake_automake_make_ids, second_make_id) > -1, 'Second make is registered'
    NeomakeTestsWaitForFinishedJobs
    bwipe!
  endif

Execute (Automake for normal mode handles ciw):
  Save g:neomake
  call g:NeomakeSetupAutocmdWrappers()
  call neomake#configure#automake('n', 10)
  new
  if has('timers')
    AssertEqual g:neomake, {'automake': {'events': {
    \ 'InsertLeave': {}, 'TextChanged': {}}}, 'automake_delay': 10}
  else
    AssertEqual g:neomake, {'automake': {'events': {
    \ 'CursorHold': {}, 'InsertLeave': {}}}, 'automake_delay': 0}
  endif
  let g:neomake_test_enabledmakers = [g:sleep_maker]
  set filetype=neomake_tests

  normal! ifoo
  if has('timers')
    NeomakeTestsWaitForNextMessage
  else
    doautocmd CursorHold
  endif
  AssertNeomakeMessage 'Running makers: sleep-maker (auto).'
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_jobfinished), 1
  bwipe!

Execute (Automake stops if context changed (CursorHold)):
  if !has('timers')
    NeomakeTestsSkip 'only with timers feature'
  else
    new
    norm! iword1 word2
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 5}})
    doautocmd CursorHold
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    norm! ^
    NeomakeTestsWaitForMessage '\Vautomake: context/position changed: [\d\+, [0, 1, 11, 0], ''n''] => [\d\+, [0, 1, 1, 0], ''n''].', 3
    bwipe!
  endif

Execute (Automake restarts if popup menu is visible):
  if !has('timers')
    NeomakeTestsSkip 'only with timers feature'
  else
    new
    file file_sleep_efm
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call append(0, ['word1', 'word2'])

    function s:close_pum(...)
      call feedkeys("\<c-e>\<esc>")
    endfunction

    call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 5}})
    doautocmd CursorHold
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    let base_timer = g:neomake_test_matchlist[1]

    " Trigger popup menu.
    call timer_start(100, 's:close_pum')
    call feedkeys("oword\<C-p>", 'x!')

    AssertNeomakeMessage 'automake: callback for timer '.base_timer.' (via CursorHold).'
    AssertNeomakeMessage 'automake: postponing automake during completion.', 3
    AssertNeomakeMessage 'automake: re-starting postponed automake.'
    AssertNeomakeMessage 'automake: tick changed (new).'
    " +2 since we use timer_start above.
    AssertNeomakeMessage 'automake: started timer (5ms): '.(base_timer + 2).'.'
    NeomakeTestsWaitForMessage 'automake: callback for timer '.(base_timer + 2).' (via CursorHold).'
    AssertNeomakeMessage 'automake: neomake_do_automake: CursorHold.'
    AssertNeomakeMessage 'automake: tick changed (new).'
    AssertNeomakeMessage '\vautomake: Updating tick: \d+.'
    AssertNeomakeMessage 'automake: enabled makers: true-maker.'

    NeomakeTestsWaitForFinishedJobs

    bwipe!
  endif

Execute (Automake cleans up buffer context when restarting after popup menu fails):
  if !has('timers')
    NeomakeTestsSkip 'only with timers feature'
  else
    new
    file file_sleep_efm
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call append(0, ['word1', 'word2'])

    function! s:close_pum(...)
      call feedkeys("\<c-e>\<esc>")
    endfunction

    call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 5}})
    doautocmd CursorHold
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    let base_timer = g:neomake_test_matchlist[1]

    " Trigger popup menu.
    call timer_start(100, 's:close_pum')
    noautocmd call feedkeys("oword\<C-p>", 'x!')

    AssertNeomakeMessage 'automake: callback for timer '.base_timer.' (via CursorHold).'
    AssertNeomakeMessage 'automake: postponing automake during completion.', 3

    Assert exists('#neomake_automake_retry#InsertLeave#<buffer='.bufnr('%').'>')
    Assert exists('#neomake_automake_retry#CompleteDone#<buffer='.bufnr('%').'>')
    Assert exists('b:_neomake_postponed_automake_context')
    doautocmd InsertLeave
    Assert !exists('#neomake_automake_retry#InsertLeave#<buffer='.bufnr('%').'>')
    Assert !exists('#neomake_automake_retry#CompleteDone#<buffer='.bufnr('%').'>')
    Assert !exists('b:_neomake_postponed_automake_context')

    AssertNeomakeMessage 'automake: postponed automake: unexpected step 2, cleaning up.', 3

    bwipe!
  endif

Execute (Timer callback ignores wiped buffer):
  if !has('timers')
    NeomakeTestsSkip 'only with timers feature'
  else
    new
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 5}})
    doautocmd CursorHold
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    let timer = g:neomake_test_matchlist[1]
    bwipe
    AssertNeomakeMessage 'automake: stopped timer for wiped buffer: '.timer.'.'
  endif

Execute (Timer callback ignores wiped buffer with noautocmd):
  if !has('timers')
    NeomakeTestsSkip 'only with timers feature'
  else
    new
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call neomake#configure#automake_for_buffer({'CursorHold': {'delay': 5}})
    doautocmd CursorHold
    AssertNeomakeMessage '\vautomake: started timer \(5ms\): (\d+)'
    let timer = g:neomake_test_matchlist[1]
    noautocmd bwipe
    NeomakeTestsWaitForMessage 'automake: buffer does not exist anymore for timer '.timer.'.'
  endif

Execute (Toggling disables automaking):
  Save g:neomake
  new
  let bufnr = bufnr('%')
  let log_context = {'bufnr': bufnr}
  set filetype=neomake_tests
  let b:neomake_enabled_makers = [g:true_maker]
  NeomakeToggleBuffer
  AssertNeomakeMessage 'automake: disabling buffer '.bufnr.'.', 3, log_context
  AssertNeomakeMessage 'Neomake is disabled (buffer).', 3
  AssertNeomakeMessage 'automake: registered events: .', 3, log_context
  call neomake#configure#automake({'InsertLeave': {'delay': 0}})
  AssertNeomakeMessage 'automake: registered events: InsertLeave.', 3, log_context
  doautocmd InsertLeave
  NeomakeTestsWaitForMessage "Using setting disabled=1 from 'buffer'.", 3, log_context
  AssertNeomakeMessage 'automake: disabled (buffer).', 3, log_context
  bwipe

Execute (Handles timeout in another buffer):
  if NeomakeAsyncTestsSetup()
    new
    let bufnr1 = bufnr('%')
    set filetype=neomake_tests
    let g:neomake_test_enabledmakers = [g:sleep_maker]
    call neomake#configure#automake({
    \ 'TextChanged': {'delay': 10}})
    doautocmd TextChanged
    if has('patch-8.0.1494') && !has('patch-8.0.1633')
      doautocmd TextChanged
    endif
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)'
    let timer = g:neomake_test_matchlist[1]
    new
    let bufnr2 = bufnr('%')
    NeomakeTestsWaitForMessage printf('automake: callback for timer %d (via TextChanged).', timer)
    AssertNeomakeMessage printf('automake: buffer changed: %d => %d.', bufnr1, bufnr2)
    bwipe
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_finished), 0
    bwipe!
  endif

Execute (Error with non-existing configured maker):
  new
  let b:neomake = {'automake': {'enabled_makers': ['configured_maker']}}
  call neomake#configure#automake({'CursorHold': {}})
  doautocmd CursorHold
  NeomakeTestsWaitForFinishedJobs

  AssertNeomakeMessage 'automake: registered events: CursorHold.', 3
  AssertNeomakeMessage 'automake: handling event CursorHold.', 3
  AssertNeomakeMessage "Using setting automake.enabled_makers=['configured_maker'] from 'buffer'.", 3
  AssertNeomakeMessage 'Maker not found (for empty filetype): configured_maker.', 0
  AssertNeomakeMessage 'automake: configured buffer for ft= (no enabled makers).'
  AssertNeomakeMessage 'automake: no enabled makers.'
  bwipe

Execute (No warning with delay=0 if there is no timer support):
  if has('timers')
    NeomakeTestsSkip 'only without timers feature'
  else
    new
    Save g:neomake
    call neomake#configure#automake({'BufWritePost': {'delay': 5}})
    AssertNeomakeMessage 'automake: timer support is required for automaking, removing event BufWritePost.', 0
    AssertNeomakeMessage 'automake: registered events: .', 3

    call neomake#configure#automake({'BufWritePost': {'delay': 0}})
    AssertNeomakeMessage 'automake: registered events: BufWritePost.', 3

    call neomake#configure#automake_for_buffer('w', 5)
    AssertNeomakeMessage 'automake: timer support is required for delayed events.', 1

    call neomake#configure#automake_for_buffer('w', 0)
    AssertNeomakeMessageAbsent 'automake: timer support is required for delayed events.', 1
    bwipe
  endif

Execute (Automake pre-creates maker_job instances):
  Save g:neomake

  new
  let s:call_count = 0
  let maker = {'exe': 'true', 'cwd': '%:h'}
  function maker.fn(...)
    let s:call_count += 1
  endfunction
  let b:neomake_enabled_makers = [maker]
  call neomake#configure#automake('n', 0)

  doautocmd InsertLeave
  AssertNeomakeMessage 'cwd: '.getcwd().'.'
  AssertNeomakeMessage '\v^automake: started jobs:'
  NeomakeTestsWaitForFinishedJobs
  AssertEqual s:call_count, 1

  normal! ifoo
  AssertNeomakeMessage '\v^automake: started jobs:'
  " .fn gets called only once.
  AssertEqual s:call_count, 1

  " 'cwd' gets resolved with the pre-compiled job.
  let tmpdir = tempname()
  exe 'file '.tmpdir.'/file'
  normal! ifoo

  let dir = fnamemodify(bufname('%'), ':h')
  AssertNeomakeMessage printf(
  \ '\v^unnamed_maker: could not change to maker''s cwd \(\%%:h\): .*%s',
  \ escape(dir, '\'))
  NeomakeTestsWaitForFinishedJobs

  bwipe!

Execute (neomake#configure#reset_automake stops timers):
  if !has('timers')
    NeomakeTestsSkip 'Only with timers feature'
  else
    Save g:neomake

    new
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call neomake#configure#automake({'TextChanged': {'delay': 10}})
    doautocmd TextChanged
    if has('patch-8.0.1494') && !has('patch-8.0.1633')
      doautocmd TextChanged
    endif
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)'
    let timer = g:neomake_test_matchlist[1]
    call neomake#configure#reset_automake()
    AssertNeomakeMessage 'automake: stopping timers: '.timer.'.'
    bwipe
  endif

Execute (Ignores first TextChanged event (Vim issue #2742)):
  Save g:neomake
  if !has('patch-8.0.1494') || has('patch-8.0.1633')
    NeomakeTestsSkip 'Only with affected patches (Vim issue #2742)'
  else
    call neomake#configure#automake('n')
    new
    doautocmd TextChanged
    AssertNeomakeMessage 'automake: Ignoring first TextChanged.'
    doautocmd TextChanged
    AssertNeomakeMessage 'automake: handling event TextChanged.'
    bwipe
  endif

Execute (NeomakeDisableBuffer stops timers):
  if !has('timers')
    NeomakeTestsSkip 'Only with timers feature'
  else
    Save g:neomake

    new
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call neomake#configure#automake({'TextChanged': {'delay': 10}})
    doautocmd TextChanged
    if has('patch-8.0.1494') && !has('patch-8.0.1633')
      AssertNeomakeMessage 'automake: Ignoring first TextChanged.', 3
      doautocmd TextChanged
    endif
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)'
    let timer = g:neomake_test_matchlist[1]
    NeomakeDisableBuffer
    AssertNeomakeMessage 'automake: stopped timer for buffer: '.timer.'.', 3, {'bufnr': bufnr('%')}

    " Re-enabling it kept config.
    NeomakeToggleBuffer
    doautocmd TextChanged
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)'
    bwipe
  endif

Execute (NeomakeDisable stops timers and keeps custom config):
  if !has('timers')
    NeomakeTestsSkip 'Only with timers feature'
  else
    Save g:neomake

    new
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call neomake#configure#automake_for_buffer({'InsertLeave': {'delay': 10}})
    AssertNeomakeMessage 'automake: registered events: InsertLeave.', 3

    doautocmd InsertLeave
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)', 3
    let timer = g:neomake_test_matchlist[1]
    NeomakeDisable
    AssertNeomakeMessage 'automake: disabling globally.', 3
    AssertNeomakeMessage 'automake: stopping timers: '.timer.'.'

    " Re-enabling it kept config.
    NeomakeEnable
    let bufnr = bufnr('%')
    AssertNeomakeMessage 'Neomake is enabled (global).'
    AssertNeomakeMessage "Using setting automake.events={'InsertLeave': {'delay': 10}} from 'buffer'."
    AssertNeomakeMessage 'automake: registered events: InsertLeave.'
    doautocmd InsertLeave
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)'
    bwipe
  endif

Execute (NeomakeDisableTab stops timers):
  if !has('timers')
    NeomakeTestsSkip 'Only with timers feature'
  else
    Save g:neomake

    new
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call neomake#configure#automake({'TextChanged': {'delay': 10}})
    doautocmd TextChanged
    if has('patch-8.0.1494') && !has('patch-8.0.1633')
      AssertNeomakeMessage 'automake: Ignoring first TextChanged.', 3
      doautocmd TextChanged
    endif
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)'
    let timer_buffer = g:neomake_test_matchlist[1]

    tabnew
    set filetype=neomake_tests
    let b:neomake_enabled_makers = [g:true_maker]
    call neomake#configure#automake({'TextChanged': {'delay': 10}})
    doautocmd TextChanged
    if has('patch-8.0.1494') && !has('patch-8.0.1633')
      AssertNeomakeMessage 'automake: Ignoring first TextChanged.', 3
      doautocmd TextChanged
    endif
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)'
    let timer = g:neomake_test_matchlist[1]
    NeomakeDisableTab
    AssertNeomakeMessage 'automake: stopped timer for buffer: '.timer.'.', 3, {'bufnr': bufnr('%')}
    bwipe

    NeomakeDisableBuffer
    AssertNeomakeMessage 'automake: stopped timer for buffer: '.timer_buffer.'.', 3, {'bufnr': bufnr('%')}

    " Re-enabling it kept config.
    NeomakeToggleBuffer
    doautocmd TextChanged
    AssertNeomakeMessage '\vautomake: started timer \(10ms\): (\d+)'
    bwipe
  endif
