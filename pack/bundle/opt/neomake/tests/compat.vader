Include: include/setup.vader

Execute (neomake#compat#uniq):
  AssertEqual neomake#compat#uniq([]), []
  AssertEqual neomake#compat#uniq([1, 2]), [1, 2]
  AssertEqual neomake#compat#uniq([1, 2, 1]), [1, 2, 1]
  AssertEqual neomake#compat#uniq([1, 1, 2]), [1, 2]

Execute (neomake#compat#reltimefloat):
  let r = neomake#compat#reltimefloat()
  AssertEqual type(r), type(0.0)
  let r2 = neomake#compat#reltimefloat()
  Assert r2 > r, '2nd result is bigger'

Execute (neomake#compat#systemlist):
  let r = neomake#compat#systemlist(['echo 1'])
  if has('nvim')
    AssertEqual r, ''
  else
    AssertEqual r, ['/bin/bash: echo 1: command not found']
    AssertEqual v:shell_error, 127
  endif

  AssertEqual neomake#compat#systemlist(['echo', '1']), ['1']
  AssertEqual v:shell_error, 0
  AssertEqual neomake#compat#systemlist(['sh', '-c', 'echo 1; echo  2']), ['1', '2']
  AssertEqual v:shell_error, 0
  AssertEqual neomake#compat#systemlist(['echo', '1 2']), ['1 2']
  AssertEqual v:shell_error, 0
  AssertEqual neomake#compat#systemlist(['printf', '%s\n', '1', '2']), ['1', '2']
  AssertEqual v:shell_error, 0

Execute (neomake#compat#systemlist with empty args):
  AssertEqual neomake#compat#systemlist(''), []
  AssertEqual neomake#compat#systemlist([]), []
  AssertEqual neomake#compat#systemlist('0'), ['/bin/bash: 0: command not found']

Execute (neomake#compat#json_decode):
  AssertEqual neomake#compat#json_decode(''), g:neomake#compat#json_none

Execute (neomake#compat#get_mode):
  AssertEqual neomake#compat#get_mode(), 'n'

  norm! V
  AssertEqual neomake#compat#get_mode(), 'V'
  exe "norm! \<Esc>"
  AssertEqual neomake#compat#get_mode(), 'n'

  if has('nvim')
    let nvim_exe = '/proc/'.getpid().'/exe'
    let nvim = jobstart([nvim_exe, '-u', 'tests/vim/vimrc', '--embed'], {'rpc': v:true})
    call rpcrequest(nvim, 'nvim_call_function', 'feedkeys', ['d', '!'])
    call rpcrequest(nvim, 'nvim_eval', 'assert_equal(neomake#compat#get_mode(), "no")')
    let rpc_errors = rpcrequest(nvim, 'nvim_eval', 'v:errors')
    AssertEqual rpc_errors, []
    call jobstop(nvim)
  elseif exists('*timer_start')
    let b:mode_in_cb = ''
    function s:CB(...)
        let b:mode_in_cb = neomake#compat#get_mode()
        call feedkeys("\<Esc>")
    endfunction
    call timer_start(10, 's:CB')
    call feedkeys('da', 'x!')
    AssertEqual b:mode_in_cb, 'no'
    AssertEqual neomake#compat#get_mode(), 'n'
  endif

Execute (neomake#compat#get_mode with insert mode completion):
  if has('timers')
    Save &complete
    set complete=.
    new
    file file_sleep_efm
    normal! iword1
    normal! oword2

    function s:close_pum(...)
      let s:mode = neomake#compat#get_mode()
      call feedkeys("\<c-e>")
      call feedkeys("\<esc>")
    endfunction

    call timer_start(100, 's:close_pum')
    call feedkeys("oword\<C-p>", 'x!')

    if has('patch-8.0.0283')
      AssertEqual s:mode, 'ic'
    else
      AssertEqual s:mode, 'i'
    endif
    AssertEqual getline('.'), 'word'
    bwipe!
  endif
