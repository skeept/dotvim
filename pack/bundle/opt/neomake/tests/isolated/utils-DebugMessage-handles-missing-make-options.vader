Include: ../include/setup.vader

Execute (neomake#utils#DebugMessage handles missing make_options):
  Save g:neomake_verbose
  unlet g:neomake_test_messages
  unlet! g:neomake_verbose
  call NeomakeTestsSetVimMessagesMarker()
  runtime autoload/neomake/utils.vim
  runtime autoload/neomake.vim

  let s:log_calls = []
  function! neomake#utils#QuietMessage(...)
    let s:log_calls += [a:000]
  endfunction

  call neomake#utils#DebugMessage('msg1')
  AssertEqual NeomakeTestsGetVimMessages(), []

  " Non-existing make_id should not make it verbose.
  call neomake#utils#DebugMessage('msg1', {'make_id': -42})
  AssertEqual s:log_calls, [['warning: missing make_info key: -42']]
  AssertEqual NeomakeTestsGetVimMessages(), []

  let g:neomake_verbose = 3
  let s:log_calls = []
  call neomake#utils#DebugMessage('msg1', {'make_id': -42})
  AssertEqual s:log_calls, [['warning: missing make_info key: -42']]
  let msgs = NeomakeTestsGetVimMessages()
  AssertEqual len(msgs), 1
  Assert msgs[0] =~# '\VNeomake\.\*: [-42.-:-:1] msg1', 'msg matches ('.msgs[0].')'

  " Produces no message with level 0.
  let g:neomake_verbose = 0
  let s:log_calls = []
  call neomake#utils#DebugMessage('msg1', {'make_id': -42})
  AssertEqual s:log_calls, [['warning: missing make_info key: -42']]
  AssertEqual NeomakeTestsGetVimMessages(), []

  let g:neomake_test_messages = []
  runtime autoload/neomake/utils.vim
  runtime autoload/neomake.vim
