Include: include/setup.vader

Execute (python: errorformat):
  new
  e tests/fixtures/errors.py
  call neomake#config#set('b:ft.python.python.exe', 'python3')
  Neomake python
  NeomakeTestsWaitForFinishedJobs

  AssertEqual getloclist(0), [{
  \ 'lnum': 1,
  \ 'bufnr': bufnr('%'),
  \ 'col': 22,
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': -1,
  \ 'type': 'E',
  \ 'pattern': '',
  \ 'text': 'invalid syntax'}]
  bwipe

Execute (python: pylama: errorformat):
  Save &errorformat
  let &errorformat = neomake#makers#ft#python#pylama().errorformat
  new
  file file1.py
  lgetexpr "file1.py:16:1: [C] C901 'load_library' is too complex (13) [mccabe]"
  AssertEqual getloclist(0), [
    \ {'lnum': 16, 'bufnr': bufnr('%'), 'col': 1, 'valid': 1, 'vcol': 0,
    \  'nr': -1, 'type': 'C', 'pattern': '',
    \  'text': 'C901 ''load_library'' is too complex (13) [mccabe]'}]

  let e = getloclist(0)[0]
  call neomake#makers#ft#python#PylamaEntryProcess(e)
  AssertEqual e, {
  \ 'lnum': 16,
  \ 'bufnr': bufnr('%'),
  \ 'col': 1,
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': 901,
  \ 'type': 'I',
  \ 'pattern': '',
  \ 'text': "C901 'load_library' is too complex (13) [mccabe]"}
  bwipe

Execute (python: pylama: cwd):
  let tempdir = tempname()
  call mkdir(tempdir)

  new
  exe 'lcd '.tempdir
  let maker = neomake#makers#ft#python#pylama()
  Assert !has_key(maker, 'cwd'), 'cwd is not set'

  call mkdir('pylama/subdir', 'p')
  call writefile([], 'pylama/setup.cfg')
  lcd pylama/subdir
  let maker = neomake#makers#ft#python#pylama()
  AssertEqual maker.cwd, tempdir . neomake#utils#Slash() . 'pylama'
  bwipe

Execute (python: flake8: errorformat/postprocess: F811):
  Save &errorformat
  let &errorformat = neomake#makers#ft#python#flake8().errorformat

  new
  file file1.py
  norm Iimport os
  norm oimport os . path as os
  norm ofrom os import os
  lgetexpr "file1.py:2:1: F811 redefinition of unused 'os' from line 1"

  AssertEqual [
  \ {'lnum': 2, 'bufnr': bufnr('%'), 'col': 1, 'valid': 1, 'vcol': 0,
  \  'nr': 811, 'type': 'F', 'pattern': '',
  \  'text': "redefinition of unused 'os' from line 1"}], getloclist(0)

  let e = getloclist(0)[0]
  call neomake#makers#ft#python#Flake8EntryProcess(e)
  AssertEqual {
  \ 'lnum': 2,
  \ 'bufnr': bufnr('%'),
  \ 'col': 21,
  \ 'pattern': '',
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': '',
  \ 'length': 2,
  \ 'type': 'E',
  \ 'text': "F811 redefinition of unused 'os' from line 1"}, e

  lgetexpr "file1.py:3:1: F811 redefinition of unused 'os' from line 2"

  AssertEqual [
  \ {'lnum': 3, 'bufnr': bufnr('%'), 'col': 1, 'valid': 1, 'vcol': 0,
  \  'nr': 811, 'type': 'F', 'pattern': '',
  \  'text': "redefinition of unused 'os' from line 2"}], getloclist(0)

  let e = getloclist(0)[0]
  call neomake#makers#ft#python#Flake8EntryProcess(e)
  AssertEqual {
  \ 'lnum': 3,
  \ 'bufnr': bufnr('%'),
  \ 'col': 16,
  \ 'pattern': '',
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': '',
  \ 'length': 2,
  \ 'type': 'E',
  \ 'text': "F811 redefinition of unused 'os' from line 2"}, e
  bwipe!

Execute (neomake#makers#ft#python#Flake8EntryProcess):
  let entry = {'type': 'F', 'nr': 841, 'text': "local variable 'foo' is assigned to but never used"}
  call neomake#makers#ft#python#Flake8EntryProcess(entry)
  AssertEqual entry.type, 'W'

  let entry = {'type': 'F', 'nr': 999, 'text': "something"}
  call neomake#makers#ft#python#Flake8EntryProcess(entry)
  AssertEqual entry.type, 'E'

  let entry = {'type': 'F', 'nr': 404, 'text': "not found"}
  call neomake#makers#ft#python#Flake8EntryProcess(entry)
  AssertEqual entry.type, 'W'

  let entry = {'type': 'F', 'nr': 407, 'text': "no future"}
  call neomake#makers#ft#python#Flake8EntryProcess(entry)
  AssertEqual entry.type, 'E'

Execute (python: flake8):
  Save &errorformat
  let &errorformat = neomake#makers#ft#python#flake8().errorformat

  new
  file foo/bar.py
  lgetexpr 'foo/bar.py:90:1: I001 isort found an import in the wrong position'
  let llist = getloclist(0)
  let bufnr = bufnr('%')
  AssertEqual llist, [
  \ {'lnum': 90, 'bufnr': bufnr, 'col': 1, 'valid': 1, 'vcol': 0,
  \  'nr': 1, 'type': 'I', 'pattern': '',
  \  'text': 'isort found an import in the wrong position'}]
  let entry = llist[0]
  call neomake#makers#ft#python#Flake8EntryProcess(entry)
  AssertEqual entry, {'lnum': 90, 'bufnr': bufnr, 'col': 1, 'valid': 1,
  \ 'vcol': 0, 'nr': '', 'type': 'I', 'pattern': '',
  \ 'text': 'I1 isort found an import in the wrong position'}
  bwipe

Execute (python: pylint):
  let entry = {'type': 'F', 'col': 1}
  call neomake#makers#ft#python#PylintEntryProcess(entry)
  AssertEqual entry.type, 'E'
  AssertEqual entry.col, 2

  let entry = {'type': 'E', 'col': 1}
  call neomake#makers#ft#python#PylintEntryProcess(entry)
  AssertEqual entry.type, 'E'
  AssertEqual entry.col, 2

  let entry = {'type': 'W', 'col': 1}
  call neomake#makers#ft#python#PylintEntryProcess(entry)
  AssertEqual entry.type, 'W'
  AssertEqual entry.col, 2

  let entry = {'type': 'R', 'col': 1}
  call neomake#makers#ft#python#PylintEntryProcess(entry)
  AssertEqual entry.type, 'W'
  AssertEqual entry.col, 2

  let entry = {'type': 'C', 'col': 1}
  call neomake#makers#ft#python#PylintEntryProcess(entry)
  AssertEqual entry.type, 'W'
  AssertEqual entry.col, 2

  let entry = {'type': 'I', 'col': 1}
  call neomake#makers#ft#python#PylintEntryProcess(entry)
  AssertEqual entry.type, 'I'
  AssertEqual entry.col, 2
