Include: include/setup.vader

Execute (Vint: generic postprocessing for highlights):
  runtime autoload/neomake/highlights.vim

  new
  file file1.vim
  norm! iecho l:undefined_var
  let vint_maker = neomake#makers#ft#vim#vint()
  let vint_maker.exe = 'printf'
  let vint_maker.args = ["file1.vim:1:6:warning:Undefined variable: l:undefined_var (ProhibitUsingUndeclaredVariable)"]
  let vint_maker.append_file = 0

  AssertEqual neomake#highlights#_get(), {'file': {}, 'project': {}}

  call neomake#Make(1, [vint_maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual getloclist(0), [{
  \ 'lnum': 1,
  \ 'bufnr': bufnr('%'),
  \ 'col': 6,
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': -1,
  \ 'type': 'w',
  \ 'pattern': '',
  \ 'text': 'Undefined variable: l:undefined_var (ProhibitUsingUndeclaredVariable)'}]

  " Test that length has been used with the highlight.
  let highlights = neomake#highlights#_get()
  if has('nvim')
    AssertEqual has_key(highlights['file'], bufnr('%')), 1, "highlight for file"
  else
    AssertEqual highlights.file[bufnr('%')].NeomakeWarning, [[1, 6, 15]]
  endif
  bwipe!

Execute (vimlint: errorformat):
  Save &efm
  let &efm = neomake#makers#ft#vim#vimlint().errorformat

  new
  file testfile.vim
  lgetexpr 'testfile.vim:33:12:Error: EVP_0: unexpected EOL'
  AssertEqual getloclist(0), [{
  \ 'lnum': 33, 'bufnr': bufnr('%'), 'col': 12, 'valid': 1, 'vcol': 0,
  \ 'nr': 0, 'type': 'E', 'pattern': '', 'text': 'unexpected EOL'}]

  lgetexpr 'testfile.vim:2:0:Error: EVP_E171: Missing :endif:    TOPLEVEL'
  AssertEqual getloclist(0), [{
  \ 'lnum': 2, 'bufnr': bufnr('%'), 'col': 0, 'valid': 1, 'vcol': 0,
  \ 'nr': 171, 'type': 'E', 'pattern': '', 'text': 'Missing :endif:    TOPLEVEL'}]

  lgetexpr 'testfile.vim:1:1:Error: EVL204: constant in conditional context'
  AssertEqual getloclist(0), [{
  \ 'lnum': 1, 'bufnr': bufnr('%'), 'col': 1, 'valid': 1, 'vcol': 0,
  \ 'nr': 204, 'type': 'E', 'pattern': '', 'text': 'constant in conditional context'}]

  lgetexpr 'testfile.vim:2:1:Warning: EVL204: constant in conditional context'
  AssertEqual getloclist(0), [{
  \ 'lnum': 2, 'bufnr': bufnr('%'), 'col': 1, 'valid': 1, 'vcol': 0,
  \ 'nr': 204, 'type': 'W', 'pattern': '', 'text': 'constant in conditional context'}]
  bwipe
