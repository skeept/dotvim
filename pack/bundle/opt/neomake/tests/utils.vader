Include: include/setup.vader

Execute (neomake#utils#LogMessage writes to logfile always):
  Save g:neomake_verbose, g:neomake_logfile
  let neomake_verbose = 0
  let g:neomake_logfile = tempname()
  call neomake#utils#LogMessage(1, 'msg1.')
  call neomake#utils#LogMessage(1, 'msg2.')
  if has('patch-7.4.503')
    let logfile_msg = readfile(g:neomake_logfile)[1]
  else
    let logfile_msg = readfile(g:neomake_logfile)[0]
  endif
  Assert logfile_msg =~# '\v\d\d:\d\d:\d\d \[W      \] msg2.$', 'unexpected msg: '.logfile_msg

  call neomake#utils#LogMessage(1, 'msg3.')
  sleep 10m
  call neomake#utils#LogMessage(1, 'msg4.')
  let logfile_msg = readfile(g:neomake_logfile)[-1]
  Assert logfile_msg =~# '\v\d\d:\d\d:\d\d \[W \+0.0\d\] msg4.$', 'Message does not match: '.logfile_msg

Execute (NeomakeTestsCreateExe creates exe):
  Assert !executable('boobar'), 'boobar is not executable'
  call g:NeomakeTestsCreateExe('boobar', [])
  Assert executable('boobar'), 'boobar is now executable'

Execute (NeomakeTestsCreateExe overrides existing exe):
  let true = system('which true')
  Assert executable('true'), 'true is now executable'
  call g:NeomakeTestsCreateExe('true', [])
  AssertNotEqual system('which true'), true

Execute (neomake#utils#CompressWhitespace):
  function! s:F(text)
    let entry = {'text': a:text}
    call neomake#utils#CompressWhitespace(entry)
    return entry.text
  endfunction
  AssertEqual s:F('foo'), 'foo'
  AssertEqual s:F(' foo'), 'foo'
  AssertEqual s:F('foo '), 'foo'
  AssertEqual s:F('foo bar '), 'foo bar'
  AssertEqual s:F("foo\nbar "), 'foo bar'
  AssertEqual s:F("foo\r\nbar "), 'foo bar'
  AssertEqual s:F("foo\n bar "), 'foo bar'
  AssertEqual s:F("foo\n bar \r\n"), 'foo bar'

Execute (neomake#utils#GetSetting serialize):
  Save g:maker
  let g:maker = {'name': 'mymaker'}
  function! s:GetSetting()
    return neomake#utils#GetSetting('serialize', g:maker, 'default',
                                  \ 'myft', bufnr('%'))
  endfunction

  new
  Save g:neomake_serialize, b:neomake_serialize
  Save g:neomake_mymaker_serialize, b:neomake_mymaker_serialize
  Save g:neomake_myft_mymaker_serialize, b:neomake_myft_mymaker_serialize

  AssertEqual s:GetSetting(), 'default'

  let g:neomake_serialize = 7
  AssertEqual s:GetSetting(), 7
  " maker-only should return default.
  AssertEqual neomake#utils#GetSetting('serialize', g:maker, 'default',
                                \ 'myft', bufnr('%'), 1), 'default'
  let g:neomake_serialize = 0
  AssertEqual s:GetSetting(), 0
  let g:neomake_serialize = 99
  AssertEqual s:GetSetting(), 99

  let b:neomake_serialize = 6
  AssertEqual s:GetSetting(), 6
  let b:neomake_serialize = 0
  AssertEqual s:GetSetting(), 0
  let b:neomake_serialize = 98
  AssertEqual s:GetSetting(), 98

  let g:maker.serialize = 5
  AssertEqual s:GetSetting(), 5
  let g:maker.serialize = 0
  AssertEqual s:GetSetting(), 0
  let g:maker.serialize = 97
  AssertEqual s:GetSetting(), 97

  let g:neomake_mymaker_serialize = 4
  AssertEqual s:GetSetting(), 4
  let g:neomake_mymaker_serialize = 0
  AssertEqual s:GetSetting(), 0
  let g:neomake_mymaker_serialize = 96
  AssertEqual s:GetSetting(), 96

  let b:neomake_mymaker_serialize = 3
  AssertEqual s:GetSetting(), 3
  let b:neomake_mymaker_serialize = 0
  AssertEqual s:GetSetting(), 0
  let b:neomake_mymaker_serialize = 95
  AssertEqual s:GetSetting(), 95

  let g:neomake_myft_mymaker_serialize = 2
  AssertEqual s:GetSetting(), 2
  let g:neomake_myft_mymaker_serialize = 0
  AssertEqual s:GetSetting(), 0
  let g:neomake_myft_mymaker_serialize = 94
  AssertEqual s:GetSetting(), 94

  let b:neomake_myft_mymaker_serialize = 1
  AssertEqual s:GetSetting(), 1
  let b:neomake_myft_mymaker_serialize = 0
  AssertEqual s:GetSetting(), 0
  unlet b:neomake_myft_mymaker_serialize
  let b:neomake_myft_mymaker_serialize = [1]
  AssertEqual s:GetSetting(), [1]

  " Uses b:neomake_serialize
  let g:maker = {'name': ''}
  AssertEqual s:GetSetting(), 98
  let g:maker = {}
  AssertEqual s:GetSetting(), 98
  bwipe

Execute (neomake#utils#GetSetting handles maker-only settings):
  new
  set filetype=myft
  AssertEqual 'default', neomake#utils#GetSetting('exe', {}, 'default', 'myft', bufnr('%'))
  let b:neomake_exe = 'buffer_exe'
  AssertEqual 'buffer_exe', neomake#utils#GetSetting('exe', {}, 'default', 'myft', bufnr('%'))
  AssertEqual 'default', neomake#utils#GetSetting('exe', {}, 'default', 'myft', bufnr('%'), 1)

  let b:neomake_myft_mymaker_maker = {}
  AssertEqual neomake#GetMaker('mymaker', 'myft').exe, 'mymaker'
  bwipe

Execute (neomake#utils#GetSetting handles maker-only settings (dict-config)):
  new
  set filetype=myft
  AssertEqual 'default', neomake#utils#GetSetting('exe', {}, 'default', 'myft', bufnr('%'))
  let b:neomake = {'exe': 'buffer_exe'}
  AssertEqual 'buffer_exe', neomake#utils#GetSetting('exe', {}, 'default', 'myft', bufnr('%'))
  AssertEqual 'default', neomake#utils#GetSetting('exe', {}, 'default', 'myft', bufnr('%'), 1)

  call neomake#config#set('b:ft.myft.mymaker.maker', {})
  AssertEqual neomake#GetMaker('mymaker', 'myft').exe, 'mymaker'
  call neomake#config#set('b:ft.myft.mymaker.maker', {'exe': 'foo'})
  AssertEqual neomake#GetMaker('mymaker', 'myft').exe, 'foo'

  let maker = {}
  AssertEqual neomake#config#get('mymaker.exe', 'default', {'ft': 'myft', 'bufnr': bufnr('%')}), 'default'
  let maker = {'exe': 'maker_exe'}
  AssertEqual neomake#config#get('mymaker.exe', 'default', {'ft': 'myft', 'bufnr': bufnr('%'), 'maker': maker}), 'default'
  let maker = {'name': 'mymaker', 'exe': 'maker_exe'}
  AssertEqual neomake#config#get('mymaker.exe', 'default', {'ft': 'myft', 'bufnr': bufnr('%'), 'maker': maker}), 'maker_exe'
  bwipe

Execute (neomake#utils#GetSetting for multiple fts):
  new
  function! s:GetSetting(key)
    return neomake#utils#GetSetting(a:key, {}, 'default',
                                  \ 'jsx.javascript', bufnr('%'))
  endfunction
  let b:neomake_jsx_javascript_setting = '1'
  AssertEqual s:GetSetting('setting'), '1'
  bwipe

Execute (neomake#utils#GetSetting for multiple fts (new-style)):
  new
  function! s:GetSetting(key)
    return neomake#utils#GetSetting(a:key, {}, 'default',
                                  \ 'jsx.javascript', bufnr('%'))
  endfunction
  call neomake#config#set_buffer(bufnr('%'), ['ft', 'jsx.javascript', 'setting'], 1)
  AssertEqual s:GetSetting('setting'), 1
  call neomake#config#set(['b:ft', 'jsx.javascript', 'setting'], 2)
  AssertEqual s:GetSetting('setting'), 2
  let b:neomake = {'ft': {'jsx.javascript': {'setting': 3}}}
  AssertEqual s:GetSetting('setting'), 3
  let b:neomake = {'ft': {'jsx': {'setting': 4}}}
  AssertEqual s:GetSetting('setting'), 4
  let b:neomake = {'ft': {'javascript': {'setting': 5}}}
  AssertEqual s:GetSetting('setting'), 5
  let b:neomake = {'ft': {'javascript.jsx': {'setting': 6}}}
  AssertEqual s:GetSetting('setting'), 'default'
  bwipe

Execute (neomake#utils#GetSetting accepts lists):
  Save g:maker
  let g:maker = {'name': 'mymaker'}
  function! s:GetSetting()
    return neomake#utils#GetSetting('args', g:maker, 'default',
                                  \ 'myft', bufnr('%'))
  endfunction

  Save g:neomake_myft_mymaker_args, b:neomake_myft_mymaker_args
  let g:neomake_myft_mymaker_args = [ 'global', 'shallow', 'list' ]
  AssertEqual s:GetSetting(), [ 'global', 'shallow', 'list' ]
  let b:neomake_myft_mymaker_args = [ 'buffer', 'shallow', 'list' ]
  AssertEqual s:GetSetting(), [ 'buffer', 'shallow', 'list' ]

  Save g:maker
  Restore
  let g:maker = {'name': 'mymaker'}
  Save b:neomake_myft_mymaker_args
  let b:neomake_myft_mymaker_args = 'string'
  AssertEqual s:GetSetting(), 'string'

Execute (neomake#utils#GetSetting without name):
  Save g:maker
  let g:maker = {}
  function! s:GetSetting(key)
    return neomake#utils#GetSetting(a:key, g:maker, [],
                                  \ 'myft', bufnr('%'))
  endfunction
  AssertEqual s:GetSetting('args'), []

  Save g:neomake_setting, g:neomake_myft_setting
  AssertEqual s:GetSetting('setting'), []
  let g:neomake_setting = 42
  AssertEqual s:GetSetting('setting'), 42
  let g:neomake_myft_setting = {'custom': 1}
  AssertEqual s:GetSetting('setting'), {'custom': 1}

Execute (neomake#utils#GetSetting with new-style config):
  Save g:neomake
  new
  set ft=neomake_tests

  let b:neomake_neomake_tests_foo = 'bar'
  let maker = {'foo': 'baz'}
  AssertEqual neomake#utils#GetSetting(
  \ 'foo', maker, -1, 'neomake_tests', bufnr('%')), 'bar'

  " New-style global setting overrides old-style buffer setting!
  call neomake#config#set('ft.neomake_tests.foo', 'new_bar')
  AssertEqual neomake#utils#GetSetting(
  \ 'foo', maker, -1, 'neomake_tests', bufnr('%')), 'new_bar'
  AssertNeomakeMessage "Using setting foo='new_bar' from 'global' (prefix: ['ft', 'neomake_tests'])."

  call neomake#config#set('ft.neomake_tests.foo', function('tr'))
  AssertEqual neomake#utils#GetSetting(
  \ 'foo', maker, -1, 'neomake_tests', bufnr('%')), function('tr')
  AssertNeomakeMessage "Using setting foo=function('tr') from 'global' (prefix: ['ft', 'neomake_tests'])."

  bwipe

Execute(neomake#utils#redir):
  command! NeomakeTestCommand echo 1 | echo 2
  command! NeomakeTestErrorCommand echoerr 'error'
  AssertEqual neomake#utils#redir('echon 1'), "1"
  AssertEqual neomake#utils#redir('echo 1'), "\n1"
  AssertEqual neomake#utils#redir('NeomakeTestCommand'), "\n1\n2"
  AssertThrows call neomake#utils#redir('NeomakeTestErrorCommand')
  if exists('g:vader_exception')
    " https://github.com/junegunn/vader.vim/issues/86
    AssertEqual g:vader_exception, 'Vim(echoerr):error'
  endif
  AssertEqual neomake#utils#redir(['NeomakeTestCommand', 'echon 3']), "\n1\n23"
  AssertThrows neomake#utils#redir(['NeomakeTestCommand', 'echoerr 3'])

Execute (neomake#utils#ExpandArgs):
  Save $HOME
  let $HOME='/home/sweet'

  new
  file file1.ext
  let isk = &iskeyword
  let args = [
  \ '%',
  \ '%:h',
  \ '%:p:t:r',
  \ '%:rt',
  \ '--foo=%:h',
  \ '%s',
  \ '%z',
  \ '\%',
  \ '%%',
  \ '%:r.o',
  \ '%:r%',
  \ '%:r% %',
  \ '%%%%',
  \ '%%%',
  \ '^%$',
  \ 'C:\\%\\',
  \ 'C:\\%:r\\',
  \ '~',
  \ '\~',
  \ ]
  let expected_args = [
  \ 'file1.ext',
  \ '.',
  \ 'file1',
  \ 'file1',
  \ '--foo=.',
  \ '%s',
  \ '%z',
  \ '\%',
  \ '%',
  \ 'file1.o',
  \ 'file1file1.ext',
  \ 'file1file1.ext file1.ext',
  \ '%%',
  \ '%file1.ext',
  \ '^file1.ext$',
  \ 'C:\\file1.ext\\',
  \ 'C:\\file1\\',
  \ '/home/sweet',
  \ '\~',
  \ ]

  call neomake#utils#ExpandArgs(args)
  AssertEqual expected_args, args
  AssertEqual isk, &iskeyword
  bwipe

Execute (neomake#utils#diff_dict):
  AssertEqual neomake#utils#diff_dict({}, {}), [{}, {}, {}]
  AssertEqual neomake#utils#diff_dict({'a': 1}, {'a': 2}),
    \ [{'a': [1, 2]}, {}, {}]
  AssertEqual neomake#utils#diff_dict({'a': 1}, {'b': 2}),
    \ [{}, {'a': 1}, {'b': 2}]
  AssertEqual neomake#utils#diff_dict({'a': 1}, {'a': 1, 'b': 2}),
    \ [{}, {}, {'b': 2}]

  AssertEqual neomake#utils#diff_dict({'a': '1'}, {'a': 1}),
    \ [{'a': ['1', 1]}, {}, {}]
  AssertEqual neomake#utils#diff_dict({'a': []}, {'a': {}}),
    \ [{'a': [[], {}]}, {}, {}]

Execute (neomake#utils#wstrpart):
  AssertEqual neomake#utils#wstrpart('123', 0, 0), ''
  AssertEqual neomake#utils#wstrpart('123', 0, 1), '1'
  AssertEqual neomake#utils#wstrpart('123', 0, 2), '12'
  AssertEqual neomake#utils#wstrpart('123', 1, 2), '23'
  AssertEqual neomake#utils#wstrpart('123', 1, 1), '2'
  AssertEqual neomake#utils#wstrpart('123', 1, 0), ''

  AssertEqual neomake#utils#wstrpart('…', 0, 1), '…'
  AssertEqual neomake#utils#wstrpart('12…45', 1, 3), '2…4'
  AssertEqual neomake#utils#wstrpart('…after', 1, 10), 'after'

Execute (neomake#utils#sort_by_col):
  function! s:sort(l)
    call sort(a:l, function('neomake#utils#sort_by_col'))
    return a:l
  endfunction

  let a = {'col': 1}
  let b = {'col': 5}
  AssertEqual s:sort([a, b]), [a, b]
  norm i1234
  AssertEqual getpos('.')[2], 4, 'position is correct'
  AssertEqual s:sort([a, b]), [a, b]
  norm a5
  AssertEqual getpos('.')[2], 5, 'position is correct'
  AssertEqual s:sort([a, b]), [b, a]

Execute (neomake#utils#MakerFromCommand splits shell/shellcmdflag):
  Save &shell, &shellcmdflag

  let jobinfo = NeomakeTestsFakeJobinfo()
  let jobinfo.file_mode = 0
  let jobinfo.bufnr = 0

  let &shell = '/bin/bash -o pipefail'
  let &shellcmdflag = '-c'
  let maker = neomake#utils#MakerFromCommand('echo 1')
  if neomake#has_async_support()
    let expected_argv = ['/bin/bash', '-o', 'pipefail', '-c', 'echo 1']
  else
    let expected_argv = "/bin/bash -o pipefail -c 'echo 1'"
  endif
  let bound_maker = neomake#GetMaker(maker).fn(jobinfo)
  AssertEqual bound_maker._get_argv(jobinfo), expected_argv

  let &shell = '/bin/bash'
  let &shellcmdflag = '-o pipefail -c'
  let maker = neomake#utils#MakerFromCommand('echo 2')
  if neomake#has_async_support()
    let expected_argv = ['/bin/bash', '-o', 'pipefail', '-c', 'echo 2']
  else
    let expected_argv = "/bin/bash -o pipefail -c 'echo 2'"
  endif
  let bound_maker = neomake#GetMaker(maker).fn(jobinfo)
  AssertEqual bound_maker._get_argv(jobinfo), expected_argv

Execute (neomake#utils#MakerFromCommand appends args for file_mode (string)):
  let maker = neomake#utils#MakerFromCommand('echo "%" 1')

  new
  edit tests/fixtures/a\ filename\ with\ spaces

  let jobinfo = {'file_mode': 0, 'bufnr': bufnr('%')}
  AssertEqual maker.fn(jobinfo), {
  \ 'args': [&shellcmdflag, 'echo "%" 1'], 'exe': &shell, 'remove_invalid_entries': 0, '_exe_wrapped_in_shell': 'echo'}

  let fname = expand('%:p')
  let jobinfo = NeomakeTestsFakeJobinfo()
  let jobinfo.maker = maker
  let bound_maker = neomake#GetMaker(maker).fn(jobinfo)
  AssertEqual bound_maker.args, [&shellcmdflag, 'echo "%" 1 '.fname]
  AssertEqual bound_maker.append_file, 0
  AssertEqual bound_maker.exe, &shell
  AssertEqual bound_maker.remove_invalid_entries, 0

  call bound_maker._bind_args()
  AssertEqual bound_maker.args, [&shellcmdflag, 'echo "'.bufname('%').'" 1 '.fname]

  CallNeomake 0, [maker]
  AssertEqual getqflist()[0].text, 'tests/fixtures/a filename with spaces 1'
  bwipe

Execute (neomake#utils#MakerFromCommand appends args for file_mode (list)):
  let maker = neomake#utils#MakerFromCommand(['echo', '%', '1'])
  let jobinfo = {'file_mode': 0, 'bufnr': 0}

  AssertEqual maker.fn(jobinfo), {
  \ 'args': ['%', '1'], 'exe': 'echo', 'remove_invalid_entries': 0, '_exe_wrapped_in_shell': ''}

  new
  edit tests/fixtures/a\ filename\ with\ spaces
  let fname = expand('%:p')
  let jobinfo = NeomakeTestsFakeJobinfo()
  let jobinfo.maker = maker
  let bound_maker = neomake#GetMaker(maker).fn(jobinfo)
  AssertEqual bound_maker.args, ['%', '1', fname]
  AssertEqual bound_maker.append_file, 0
  AssertEqual bound_maker.exe, 'echo'
  AssertEqual bound_maker.remove_invalid_entries, 0

  call bound_maker._bind_args()
  AssertEqual bound_maker.args, [bufname('%'), '1', fname]

  CallNeomake 0, [maker]
  AssertEqual getqflist()[0].text, 'tests/fixtures/a filename with spaces 1'
  bwipe

Execute (neomake#utils#Stringify):
  AssertEqual neomake#utils#Stringify(1), 1
  AssertEqual neomake#utils#Stringify('2'), '2'
  AssertEqual neomake#utils#Stringify([1, [2, 3]]), '[1, [2, 3]]'
  AssertEqual neomake#utils#Stringify([1, function('tr')]), "[1, function('tr')]"

  let obj = {'k': 'v'}
  function! obj.f(args) abort dict
  endfunction

  let fnr_base = substitute(string(obj.f), '\v.*''(\d+)''.*', '\1', '')
  AssertEqual neomake#utils#Stringify(obj), "{f: function('".fnr_base."'), k: v}"

  let base = {'base': 1}
  function! base.f2(arg) abort dict
    return a:arg
  endfunction

  let string_displays_partial = has('patch-7.4.1608')

  let obj = {}
  let obj.f2 = base.f2
  AssertEqual obj.f2('called1'), 'called1'
  if string_displays_partial
    AssertEqual neomake#utils#Stringify(obj), "{f2: function('".(fnr_base + 1)."', {…})}"
  else
    AssertEqual neomake#utils#Stringify(obj), "{f2: function('".(fnr_base + 1)."')}"
  endif

  AssertEqual base.f2('called2'), 'called2'
  AssertEqual neomake#utils#Stringify(base), "{f2: function('".(fnr_base + 1)."'), base: 1}"

  let obj = copy(base)
  AssertEqual obj.f2, base.f2
  let obj.base = 0
  AssertEqual neomake#utils#Stringify(obj), "{f2: function('".(fnr_base + 1)."'), base: 0}"
  if string_displays_partial
    " Uses string() for 7.4.1689.
    AssertNotEqual string(obj.f2), string(base.f2)
  else
    AssertEqual obj.f2, base.f2
  endif

  let obj.f2 = base.f2
  if string_displays_partial
    AssertEqual neomake#utils#Stringify(obj.f2), "function('".(fnr_base + 1)."', ".string(obj).")"
  else
    AssertEqual neomake#utils#Stringify(obj.f2), "function('".(fnr_base + 1)."')"
  endif

  let obj = extend(copy(base), {})
  AssertEqual obj.f2('called2'), 'called2'
  if string_displays_partial
    AssertEqual neomake#utils#Stringify(obj.f2), "function('".(fnr_base + 1)."', ".string(obj).")"
  else
    AssertEqual neomake#utils#Stringify(obj.f2), "function('".(fnr_base + 1)."')"
  endif
  AssertEqual neomake#utils#Stringify(obj), "{f2: function('".(fnr_base + 1)."'), base: 1}"

Execute (neomake#utils#MakerFromCommand uses tempfile):
  let maker = neomake#utils#MakerFromCommand('echo')

  new
  edit tests/fixtures/a\ filename\ with\ spaces
  set modified
  let b:neomake_tempfile_enabled = 1
  let jobinfo = NeomakeTestsFakeJobinfo()

  let bound_maker = neomake#GetMaker(maker).fn(jobinfo)
  let make_info = values(neomake#GetStatus().make_info)[0]
  let temp_file = make_info.tempfiles[0]
  AssertEqual bound_maker.args, [&shellcmdflag, 'echo '.temp_file]
  AssertEqual bound_maker.append_file, 0
  AssertEqual bound_maker.exe, &shell
  AssertEqual bound_maker.remove_invalid_entries, 0
  AssertNotEqual temp_file, fnameescape(temp_file)

  doautocmd VimLeave
  Assert empty(glob(temp_file)), 'Temporary file was removed.'
  AssertNeomakeMessage printf('Removing temporary file: "%s".', temp_file)
  bwipe!

Execute (neomake#utils#get_config_fts):
  function! s:F(ft) abort
    return neomake#utils#get_config_fts(a:ft)
  endfunction
  AssertEqual s:F('foo'), ['foo']
  AssertEqual s:F('foo.bar'), ['foo_bar', 'foo', 'bar']
  AssertEqual s:F('bar.foo'), ['bar_foo', 'bar', 'foo']
  AssertEqual s:F('jsx.javascript'), ['jsx_javascript', 'jsx', 'javascript']
  AssertEqual s:F('javascript.jsx'), ['javascript_jsx', 'javascript', 'jsx']
  AssertEqual s:F('jsx'), ['jsx', 'javascript']

Execute (neomake#utils#fnamemodify handles fugitive buffer):
  NeomakeTestsLoadPlugin 'fugitive'
  new
  edit autoload/neomake/debug.vim
  let bufname = bufname('%')
  Gedit
  AssertNotEqual bufname, bufname('%')
  Assert bufname('%') =~# '^fugitive://'

  AssertEqual neomake#utils#fnamemodify(bufnr('%'), ''), bufname
  AssertEqual neomake#utils#fnamemodify(bufnr('%'), ':p'), fnamemodify(bufname, ':p')
  AssertEqual neomake#utils#fnamemodify(bufnr('%'), ':p:h'), fnamemodify(bufname, ':p:h')
  bwipe
  bwipe autoload/neomake/debug.vim

Execute (neomake#utils#fnamemodify handles empty bufname):
  new
  AssertEqual bufname('%'), ''
  AssertEqual neomake#utils#fnamemodify(bufnr('%'), ''), ''
  AssertEqual neomake#utils#fnamemodify(bufnr('%'), ':p'), ''
  bwipe

Execute (neomake#utils#FindGlobFile):
  let tempdir = tempname()
  let slash = neomake#utils#Slash()
  let subdir = tempdir . slash . 'sub'
  call mkdir(subdir, 'p', 0700)

  let tempfile = tempdir.slash.'temp-file'
  call writefile([], tempfile)
  let file_in_tempdir = tempdir.slash.'common-file'
  call writefile([], file_in_tempdir)
  let subfile = subdir.slash.'sub-file'
  call writefile([], subfile)
  let file_in_subdir = subdir.slash.'common-file'
  call writefile([], file_in_subdir)
  let anotherfile_in_subdir = subdir.slash.'common-file-2'
  call writefile([], anotherfile_in_subdir)

  new
  exe 'lcd' subdir
  AssertEqual neomake#utils#FindGlobFile('doesnotexist'), ''
  AssertEqual neomake#utils#FindGlobFile('sub-file'), subfile
  AssertEqual neomake#utils#FindGlobFile('sub-file', tempdir), ''
  AssertEqual neomake#utils#FindGlobFile('common-file'), file_in_subdir
  AssertEqual neomake#utils#FindGlobFile('common-file', tempdir), file_in_tempdir

  exe 'lcd' tempdir
  AssertEqual neomake#utils#FindGlobFile('sub-file'), ''
  AssertEqual neomake#utils#FindGlobFile('sub-file', subdir), subfile
  AssertEqual neomake#utils#FindGlobFile('sub-file', tempdir), ''
  AssertEqual neomake#utils#FindGlobFile('sub-file', tempname()), ''
  AssertEqual neomake#utils#FindGlobFile('common-file'), file_in_tempdir
  AssertEqual neomake#utils#FindGlobFile('common-file'), file_in_tempdir
  AssertEqual neomake#utils#FindGlobFile('common-file', subdir), file_in_subdir

  " Only the first found file gets returned.
  AssertEqual neomake#utils#FindGlobFile('common-file{,-2}', subdir), file_in_subdir
  AssertEqual neomake#utils#FindGlobFile('common-file{-2,}', subdir), anotherfile_in_subdir
  bwipe

Execute (neomake#utils#shellescape):
  AssertEqual neomake#utils#shellescape('foo'), 'foo'
  AssertEqual neomake#utils#shellescape('foo-bar'), 'foo-bar'
  AssertEqual neomake#utils#shellescape('foo_bar'), 'foo_bar'
  AssertEqual neomake#utils#shellescape('foo bar'), "'foo bar'"
  AssertEqual neomake#utils#shellescape('foo bar "baz"'), "'foo bar \"baz\"'"

  Save &shell
  let &shell = 'cmd.exe'
  AssertEqual neomake#utils#shellescape('foo'), 'foo'
  AssertEqual neomake#utils#shellescape('foo-bar'), 'foo-bar'
  AssertEqual neomake#utils#shellescape('foo_bar'), 'foo_bar'
  AssertEqual neomake#utils#shellescape('foo bar'), '"foo bar"'
  AssertEqual neomake#utils#shellescape('foo bar "baz"'), '"foo bar ""baz"""'

  AssertEqual neomake#utils#shellescape('"foo"'), '"""foo"""'
  AssertEqual neomake#utils#shellescape('"foo bar"'), '"""foo bar"""'
  AssertEqual neomake#utils#shellescape('-c "foo bar"'), '"-c ""foo bar"""'

Execute (neomake#utils#fix_self_ref):
  AssertEqual neomake#utils#fix_self_ref(''), ''

  let obj = {'foo': 1, 'bar': {}}
  AssertEqual neomake#utils#fix_self_ref(obj), {
  \ 'foo': 1,
  \ 'bar': {}}
  let fixed = neomake#utils#fix_self_ref(obj)
  Assert fixed isnot obj, 'copies the obj'
  AssertEqual fixed, obj

  let obj.bar.self_ref = obj
  let exception = ''
  try
    let str_obj = string(obj)
  catch /^Vim(let):E724:/
    let exception = v:exception
  endtry
  if has('nvim')
    AssertEqual exception, 'Vim(let):E724: unable to correctly dump variable with self-referencing container'
  elseif has('patch-7.4.1644')
    AssertEqual str_obj, "{'foo': 1, 'bar': {'self_ref': {...}}}"
  else
    AssertEqual exception, 'Vim(let):E724: variable nested too deep for displaying'
  endif
  let fixed = neomake#utils#fix_self_ref(obj)
  call string(fixed)
  AssertEqual fixed, {
  \ 'foo': 1,
  \ 'bar': {'self_ref': '<self-ref-1: bar>'}}

  Assert obj.bar.self_ref is obj, 'self_ref is obj'

  let obj.baz = {}
  let obj.baz.self_ref_obj = obj
  let obj.baz.self_ref_baz = obj.baz
  let fixed = neomake#utils#fix_self_ref(obj)
  AssertEqual fixed, {
  \ 'foo': 1,
  \ 'bar': {'self_ref': '<self-ref-1: bar>'},
  \ 'baz': {
  \   'self_ref_obj': '<self-ref-1: baz>',
  \   'self_ref_baz': {
  \     'self_ref_obj': '<self-ref-1: baz>',
  \     'self_ref_baz': '<self-ref-2: self_ref_baz>'
  \   }
  \ }}

Execute (neomake#utils#write_tempfile):
  Save &endofline, &binary
  let vim_temp = tempname()
  let neomake_temp = tempname()

  if !exists('+fixeol')
    NeomakeTestsSkip 'Skipping +fixeol variants'
    let variants = [
    \ 'endofline   binary',
    \ 'endofline   nobinary',
    \ 'noendofline binary',
    \ 'noendofline nobinary',
    \ ]
  else
    Save &fixeol
    let variants = [
    \ 'fixeol   endofline   binary',
    \ 'fixeol   endofline   nobinary',
    \ 'fixeol   noendofline binary',
    \ 'fixeol   noendofline nobinary',
    \ 'nofixeol endofline   binary',
    \ 'nofixeol endofline   nobinary',
    \ 'nofixeol noendofline binary',
    \ 'nofixeol noendofline nobinary',
    \ ]
  endif

  for variant in variants
    new
    let bufnr = bufnr('%')
    exe 'set' variant

    exe 'w!' vim_temp
    new
    call neomake#utils#write_tempfile(bufnr, neomake_temp)
    AssertEqual readfile(vim_temp, 'b'), readfile(neomake_temp, 'b')

    b#
    normal! ifoo
    exe 'w!' vim_temp
    b#
    call neomake#utils#write_tempfile(bufnr, neomake_temp)
    AssertEqual readfile(vim_temp, 'b'), readfile(neomake_temp, 'b')

    bwipe!
    bwipe
  endfor

Execute (neomake#utils#highlight_is_defined):
  AssertEqual neomake#utils#highlight_is_defined('Error'), 1
  AssertEqual neomake#utils#highlight_is_defined('NeomakeCustomHilight'), 0
  hi clear NeomakeCustomHilight
  AssertEqual neomake#utils#highlight_is_defined('NeomakeCustomHilight'), 0
  hi link NeomakeCustomHilight Error
  AssertEqual neomake#utils#highlight_is_defined('NeomakeCustomHilight'), 1
  hi link NeomakeCustomHilight NONE
  AssertEqual neomake#utils#highlight_is_defined('NeomakeCustomHilight'), 0

Execute (NeomakeTestsGetVimMessages):
  call NeomakeTestsSetVimMessagesMarker()
  AssertEqual NeomakeTestsGetVimMessages(), []
  AssertEqual NeomakeTestsGetVimMessages(), []
  echom 1
  AssertEqual NeomakeTestsGetVimMessages(), ['1']
  echom 2
  echom 3
  AssertEqual NeomakeTestsGetVimMessages(), ['2', '3']

Execute (neomake#utils#DebugMessage handles missing make_options):
  Save g:neomake_verbose
  unlet g:neomake_test_messages
  unlet! g:neomake_verbose
  call NeomakeTestsSetVimMessagesMarker()
  runtime autoload/neomake/utils.vim
  runtime autoload/neomake.vim

  let s:log_calls = []
  function! neomake#utils#QuietMessage(...)
    let s:log_calls += [a:000]
  endfunction

  call neomake#utils#DebugMessage('msg1')
  AssertEqual NeomakeTestsGetVimMessages(), []

  " Non-existing make_id should not make it verbose.
  call neomake#utils#DebugMessage('msg1', {'make_id': -42})
  AssertEqual s:log_calls, [['warning: missing make_info key: -42']]
  AssertEqual NeomakeTestsGetVimMessages(), []

  let g:neomake_verbose = 3
  let s:log_calls = []
  call neomake#utils#DebugMessage('msg1', {'make_id': -42})
  AssertEqual s:log_calls, [['warning: missing make_info key: -42']]
  let msgs = NeomakeTestsGetVimMessages()
  AssertEqual len(msgs), 1
  Assert msgs[0] =~# '\VNeomake\.\*: [-42.-:-:1] msg1', 'msg matches ('.msgs[0].')'

  " Produces no message with level 0.
  let g:neomake_verbose = 0
  let s:log_calls = []
  call neomake#utils#DebugMessage('msg1', {'make_id': -42})
  AssertEqual s:log_calls, [['warning: missing make_info key: -42']]
  AssertEqual NeomakeTestsGetVimMessages(), []

  " Undo monkey-patching / conditional sourcing.
  let g:neomake_test_messages = []
  runtime autoload/neomake/utils.vim
  runtime autoload/neomake.vim

Execute (neomake#utils#DebugMessage throws with missing make_options in tests):
  AssertThrows call neomake#utils#DebugMessage('msg1')
  AssertEqual g:vader_exception, 'Log msg does not end with punctuation: "msg1".'

  " Non-existing make_id should not make it verbose.
  AssertThrows call neomake#utils#DebugMessage('msg1', {'make_id': -42})
  AssertEqual g:vader_exception, 'Vim(return):E716: Key not present in Dictionary: -42'
