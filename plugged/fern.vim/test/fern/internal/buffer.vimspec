Describe fern#internal#buffer
  After all
    %bwipeout!
  End

  Before
    %bwipeout!
    if !has('nvim')
      call prop_type_add('test_prop', { 'highlight': 'Question' })
    endif
  End

  After
    let g:fern#enable_textprop_support = 0
    if !has('nvim')
      call prop_type_delete('test_prop')
    endif
  End

  Describe #replace()
    It replaces a content of a given buffer to a given content
      let bufnr = bufnr('%')
      call setline(1, [
            \ "Hello",
            \ "Darkness",
            \ "My",
            \ "Old",
            \ "Friend",
            \])
      new
      call fern#internal#buffer#replace(bufnr, [
            \ "Hello",
            \ "World",
            \])
      Assert Equals(getbufline(bufnr, 1, '$'), [
            \ "Hello",
            \ "World",
            \])

      let bufnr = bufnr('%')
      call setline(1, [
            \ "Hello",
            \ "Darkness",
            \ "My",
            \ "Old",
            \ "Friend",
            \])
      new
      call fern#internal#buffer#replace(bufnr, [
            \ "hello",
            \ "darkness",
            \ "my",
            \ "old",
            \ "friend",
            \])
      Assert Equals(getbufline(bufnr, 1, '$'), [
            \ "hello",
            \ "darkness",
            \ "my",
            \ "old",
            \ "friend",
            \])
    End

    It success with 'nomodifiable'
      let bufnr = bufnr('%')
      call setline(1, [
            \ "Hello",
            \ "Darkness",
            \ "My",
            \ "Old",
            \ "Friend",
            \])
      setlocal nomodifiable
      new
      call fern#internal#buffer#replace(bufnr, [
            \ "Hello",
            \ "World",
            \])
      Assert Equals(getbufline(bufnr, 1, '$'), [
            \ "Hello",
            \ "World",
            \])
      Assert Equals(getbufvar(bufnr, '&modifiable'), 0)
    End

    It does not touch 'modified'
      let bufnr = bufnr('%')
      call setline(1, [
            \ "Hello",
            \ "Darkness",
            \ "My",
            \ "Old",
            \ "Friend",
            \])
      setlocal nomodified
      new
      call fern#internal#buffer#replace(bufnr, [
            \ "Hello",
            \ "World",
            \])
      Assert Equals(getbufline(bufnr, 1, '$'), [
            \ "Hello",
            \ "World",
            \])
      Assert Equals(getbufvar(bufnr, '&modified'), 0)

      let bufnr = bufnr('%')
      call setline(1, [
            \ "Hello",
            \ "Darkness",
            \ "My",
            \ "Old",
            \ "Friend",
            \])
      setlocal modified
      new
      call fern#internal#buffer#replace(bufnr, [
            \ "Hello",
            \ "World",
            \])
      Assert Equals(getbufline(bufnr, 1, '$'), [
            \ "Hello",
            \ "World",
            \])
      Assert Equals(getbufvar(bufnr, '&modified'), 1)
    End

    It should replace buffer content with text and properties
      if has('nvim')
        Assert Skip('text properties are only supported in vim')
      endif

      let g:fern#enable_textprop_support = 1

      let bufnr = bufnr('%')
      call setline(1, [
            \ "Hello",
            \ "Darkness",
            \ "My",
            \ "Old",
            \ "Friend",
            \])
      new
      call fern#internal#buffer#replace(bufnr, [
            \ { 'text': 'Empty Props', 'props': [] },
            \ { 'text': 'Undefined Props' },
            \ { 'text': 'With Properties!', 'props':
            \   [{ 'col': 1, 'length': 4, 'type': 'test_prop' }]
            \ },
            \])
      Assert Equals(getbufline(bufnr, 1, '$'), [
            \ "Empty Props",
            \ "Undefined Props",
            \ "With Properties!",
            \])

      Assert True(empty(prop_list(1, { 'bufnr': bufnr })))
      Assert True(empty(prop_list(2, { 'bufnr': bufnr })))

      let result_props = prop_list(3, { 'bufnr': bufnr })
      Assert Equal(len(result_props), 1)
      Assert Equal(result_props[0].col, 1)
      Assert Equal(result_props[0].length, 4)
      Assert Equal(result_props[0].type, 'test_prop')
    End
  End

  Describe #open()
    It opens a new buffer with opener
      call fern#internal#buffer#open('hello', {
            \ 'opener': 'edit',
            \})
      Assert Equals(winnr('$'), 1)
      %bwipeout!

      call fern#internal#buffer#open('hello', {
            \ 'opener': 'split',
            \})
      Assert Equals(winnr('$'), 2)
      %bwipeout!

      call fern#internal#buffer#open('hello', {
            \ 'opener': 'vsplit',
            \})
      Assert Equals(winnr('$'), 2)
      %bwipeout!

      call fern#internal#buffer#open('hello1', {
            \ 'opener': 'edit',
            \})
      call fern#internal#buffer#open('hello2', {
            \ 'opener': 'vsplit',
            \})
      call fern#internal#buffer#open('hello1', {
            \ 'opener': 'drop',
            \})
      Assert Equals(winnr(), 2)
      call fern#internal#buffer#open('hello2', {
            \ 'opener': 'drop',
            \})
      Assert Equals(winnr(), 1)
    End
  End
End
