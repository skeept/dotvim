function! DescribeNodes(nodes, ...) abort
  let l:Getter = a:0 ? a:1 : { v -> v._uri }
  return map(copy(a:nodes), { _, v -> l:Getter(v) })
endfunction

Describe fern#internal#node
  Before
    let TIMEOUT = 5000
    let Promise = vital#fern#import('Async.Promise')
    let CancellationToken = vital#fern#import('Async.CancellationToken')
    let token = CancellationToken.none
    let provider = fern#scheme#debug#provider#new()
    let l:Comparator = fern#comparator#default#new()
  End

  Describe #debug()
    It returns a debug information of a given node as string
      let node = fern#internal#node#root('debug:///shallow', provider)
      Assert IsString(fern#internal#node#debug(node))
    End
  End

  Describe #index()
    Before
      let root = fern#internal#node#root('debug:///', provider)
      let [children, _] = Promise.wait(
            \ fern#internal#node#children(root, provider, token),
            \ { 'timeout': TIMEOUT },
            \)
      let nodes = [root] + children
    End

    It returns an index of node which has a given key
      Assert Equals(fern#internal#node#index([], nodes), 0)
      Assert Equals(fern#internal#node#index(['shallow'], nodes), 1)
      Assert Equals(fern#internal#node#index(['deep'], nodes), 2)
      Assert Equals(fern#internal#node#index(['heavy'], nodes), 3)
      Assert Equals(fern#internal#node#index(['leaf'], nodes), 4)
    End

    It returns -1 when no node exists for a given key
      Assert Equals(fern#internal#node#index(['missing'], nodes), -1)
    End
  End

  Describe #find()
    Before
      let root = fern#internal#node#root('debug:///', provider)
      let [children, _] = Promise.wait(
            \ fern#internal#node#children(root, provider, token),
            \ { 'timeout': TIMEOUT },
            \)
      let nodes = [root] + children
    End

    It returns an index of node which has a given key
      Assert Equals(fern#internal#node#find([], nodes), nodes[0])
      Assert Equals(fern#internal#node#find(['shallow'], nodes), nodes[1])
      Assert Equals(fern#internal#node#find(['deep'], nodes), nodes[2])
      Assert Equals(fern#internal#node#find(['heavy'], nodes), nodes[3])
      Assert Equals(fern#internal#node#find(['leaf'], nodes), nodes[4])
    End

    It returns v:null when no node exists for a given key
      Assert Equals(fern#internal#node#find(['missing'], nodes), v:null)
    End
  End

  Describe #root()
    It returns a node instance of a given URL and provider
      let node = fern#internal#node#root('debug:///shallow', provider)
      Assert KeyExists(node, 'name')
      Assert KeyExists(node, 'status')
      Assert KeyExists(node, 'label')
      Assert KeyExists(node, 'hidden')
      Assert KeyExists(node, 'bufname')
      Assert KeyExists(node, '__key')
      Assert KeyExists(node, '__owner')
      Assert KeyExists(node, '__processing')
      Assert KeyExists(node, 'concealed')
      Assert KeyExists(node, 'concealed')
    End
  End

  Describe #parent()
    Before
      let node = fern#internal#node#root('debug:///shallow/alpha', provider)
    End

    It returns a promise
      let p = fern#internal#node#parent(node, provider, token)
      Assert True(Promise.is_promise(p))
    End

    It resolves to a parent node of a given node
      let [r, e] = Promise.wait(
            \ fern#internal#node#parent(node, provider, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(r._uri, '/shallow')

      let [r, e] = Promise.wait(
            \ fern#internal#node#parent(r, provider, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(r._uri, '/')
    End
  End

  Describe #children()
    Before
      let node = fern#internal#node#root('debug:///shallow', provider)
    End

    It returns a promise
      let p = fern#internal#node#children(node, provider, token)
      Assert True(Promise.is_promise(p))
    End

    It resolves to a list of child nodes of a given node
      let [r, e] = Promise.wait(
            \ fern#internal#node#children(node, provider, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/shallow/alpha',
            \ '/shallow/beta',
            \ '/shallow/gamma',
            \])
    End
  End

  Describe #descendants()
    Before
      let node = fern#internal#node#root('debug:///deep', provider)
    End

    It returns a promise
      let p = fern#internal#node#descendants(node, provider, token)
      Assert True(Promise.is_promise(p))
    End

    It resolves to a list of descendant nodes of a given node
      let [r, e] = Promise.wait(
            \ fern#internal#node#descendants(node, provider, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \])
    End
  End

  Describe #expand()
    Before
      let root = fern#internal#node#root('debug:///', provider)
    End

    It returns a promise
      let p = fern#internal#node#expand(root, [root], provider, Comparator, token)
      Assert True(Promise.is_promise(p))
    End

    It resolves to a list of nodes
      let [r, e] = Promise.wait(
            \ fern#internal#node#expand(root, [root], provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let node = r[3]
      let [r, e] = Promise.wait(
            \ fern#internal#node#expand(node, r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/heavy',
            \ '/shallow',
            \ '/shallow/alpha',
            \ '/shallow/beta',
            \ '/shallow/gamma',
            \ '/leaf',
            \])
    End

    It does NOT touch the original nodes
      let nodes = [root]
      let [r, e] = Promise.wait(
            \ fern#internal#node#expand(root, nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])
      Assert Equals(DescribeNodes(nodes), [
            \ '/',
            \])
    End
  End

  Describe #expand_tree()
    Before
      let root = fern#internal#node#root('debug:///', provider)
    End

    It returns a promise
      let p = fern#internal#node#expand_tree(root, [root], provider, Comparator, token)
      Assert True(Promise.is_promise(p))
    End

    It resolves to a list of nodes
      let [r, e] = Promise.wait(
            \ fern#internal#node#expand_tree(root, [root], provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)

      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/heavy/alpha',
            \ '/heavy/beta',
            \ '/heavy/gamma',
            \ '/shallow',
            \ '/shallow/alpha',
            \ '/shallow/beta',
            \ '/shallow/gamma',
            \ '/leaf',
            \])
    End
  End

  Describe #collapse()
    Before
      let root = fern#internal#node#root('debug:///', provider)
      let [nodes, e] = Promise.wait(
            \ fern#internal#node#expand(root, [root], provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      let node = nodes[3]
      let [nodes, e] = Promise.wait(
            \ fern#internal#node#expand(node, nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
    End

    It returns a promise
      let p = fern#internal#node#collapse(node, nodes, provider, Comparator, token)
      Assert True(Promise.is_promise(p))
    End

    It resolves to a list of nodes
      let [r, e] = Promise.wait(
            \ fern#internal#node#collapse(node, nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])
    End

    It does NOT touch the original nodes
      let [r, e] = Promise.wait(
            \ fern#internal#node#collapse(node, nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])
      Assert Equals(DescribeNodes(nodes), [
            \ '/',
            \ '/deep',
            \ '/heavy',
            \ '/shallow',
            \ '/shallow/alpha',
            \ '/shallow/beta',
            \ '/shallow/gamma',
            \ '/leaf',
            \])
    End
  End

  Describe #reload()
    Before
      let root = fern#internal#node#root('debug:///', provider)
      let [nodes, e] = Promise.wait(
            \ fern#internal#node#expand(root, [root], provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      let node = nodes[3]
      let [nodes, e] = Promise.wait(
            \ fern#internal#node#expand(node, nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
    End

    It returns a promise
      let p = fern#internal#node#reload(node, nodes, provider, Comparator, token)
      Assert True(Promise.is_promise(p))
    End

    It resolves to a list of nodes
      let [r, e] = Promise.wait(
            \ fern#internal#node#reload(node, nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/heavy',
            \ '/shallow',
            \ '/shallow/alpha',
            \ '/shallow/beta',
            \ '/shallow/gamma',
            \ '/leaf',
            \])
    End

    It keeps status of nodes
      let [r, e] = Promise.wait(
            \ fern#internal#node#reload(node, nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r, { v -> v.status }), [
            \ g:fern#STATUS_EXPANDED,
            \ g:fern#STATUS_COLLAPSED,
            \ g:fern#STATUS_COLLAPSED,
            \ g:fern#STATUS_EXPANDED,
            \ g:fern#STATUS_COLLAPSED,
            \ g:fern#STATUS_COLLAPSED,
            \ g:fern#STATUS_NONE,
            \ g:fern#STATUS_NONE,
            \])
    End

    It resolves to a list of nodes (root)
      let [r, e] = Promise.wait(
            \ fern#internal#node#reload(nodes[0], nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/heavy',
            \ '/shallow',
            \ '/shallow/alpha',
            \ '/shallow/beta',
            \ '/shallow/gamma',
            \ '/leaf',
            \])
    End

    It keeps status of nodes (root)
      let [r, e] = Promise.wait(
            \ fern#internal#node#reload(nodes[0], nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r, { v -> v.status }), [
            \ g:fern#STATUS_EXPANDED,
            \ g:fern#STATUS_COLLAPSED,
            \ g:fern#STATUS_COLLAPSED,
            \ g:fern#STATUS_EXPANDED,
            \ g:fern#STATUS_COLLAPSED,
            \ g:fern#STATUS_COLLAPSED,
            \ g:fern#STATUS_NONE,
            \ g:fern#STATUS_NONE,
            \])
    End
  End

  Describe #reveal()
    Before
      let root = fern#internal#node#root('debug:///', provider)
      let [nodes, e] = Promise.wait(
            \ fern#internal#node#expand(root, [root], provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
    End

    It returns a promise
      let p = fern#internal#node#reveal([], nodes, provider, Comparator, token)
      Assert True(Promise.is_promise(p))
    End

    It recursively expand nodes to focus specified nodes (1 step)
      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha', 'beta', 'gamma'], nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])
    End

    It recursively expand nodes to focus specified nodes (step by step)
      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep'], nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha'], r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha', 'beta'], r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha', 'beta', 'gamma'], r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha', 'beta', 'gamma', 'UNKNOWN'], r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])
    End

    It recursively expand nodes to focus specified nodes (1 step to UNKNOWN)
      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha', 'beta', 'gamma', 'UNKNOWN'], nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])
    End

    It recursively expand nodes to focus specified nodes (step by step to UNKNOWN)
      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep'], nodes, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha'], r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha', 'beta'], r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha', 'beta', 'gamma'], r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])

      let [r, e] = Promise.wait(
            \ fern#internal#node#reveal(['deep', 'alpha', 'beta', 'gamma', 'UNKNOWN'], r, provider, Comparator, token),
            \ { 'timeout': TIMEOUT },
            \)
      Assert Equals(e, v:null)
      Assert Equals(DescribeNodes(r), [
            \ '/',
            \ '/deep',
            \ '/deep/alpha',
            \ '/deep/alpha/beta',
            \ '/deep/alpha/beta/gamma',
            \ '/heavy',
            \ '/shallow',
            \ '/leaf',
            \])
    End
  End
End
