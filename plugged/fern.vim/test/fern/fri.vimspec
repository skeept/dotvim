Describe fern#fri
  Describe #new()
    It returns FRI from a full FRI
      let want = {
            \ 'scheme': 'ssh',
            \ 'authority': 'user:pass@example.com',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      let full = copy(want)
      Assert Equals(fern#fri#new(full), want)
    End

    It returns FRI from a partial FRI
      Assert Equals(fern#fri#new({ 'scheme': 'hello' }), {
            \ 'scheme': 'hello',
            \ 'authority': '',
            \ 'path': '',
            \ 'query': {},
            \ 'fragment': '',
            \})
      Assert Equals(fern#fri#new({ 'authority': 'hello' }), {
            \ 'scheme': '',
            \ 'authority': 'hello',
            \ 'path': '',
            \ 'query': {},
            \ 'fragment': '',
            \})
      Assert Equals(fern#fri#new({ 'path': 'hello' }), {
            \ 'scheme': '',
            \ 'authority': '',
            \ 'path': 'hello',
            \ 'query': {},
            \ 'fragment': '',
            \})
      Assert Equals(fern#fri#new({ 'query': { 'hello': 'world' } }), {
            \ 'scheme': '',
            \ 'authority': '',
            \ 'path': '',
            \ 'query': {
            \   'hello': 'world',
            \ },
            \ 'fragment': '',
            \})
      Assert Equals(fern#fri#new({ 'fragment': 'hello' }), {
            \ 'scheme': '',
            \ 'authority': '',
            \ 'path': '',
            \ 'query': {},
            \ 'fragment': 'hello',
            \})
    End
  End

  Describe #parse()
    It returns FRI for 'file:///foo/bar'
      let expr = 'file:///foo/bar'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'file:///foo/bar;drawer'
      let expr = 'file:///foo/bar;drawer'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \ },
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'file:///foo/bar;width=50&drawer'
      let expr = 'file:///foo/bar;width=50&drawer'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'file:///foo/bar;width=50&drawer#fragment'
      let expr = 'file:///foo/bar;width=50&drawer#fragment'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'ssh://user:pass@example.com/foo/bar;width=50&drawer#fragment'
      let expr = 'ssh://user:pass@example.com/foo/bar;width=50&drawer#fragment'
      let want = {
            \ 'scheme': 'ssh',
            \ 'authority': 'user:pass@example.com',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'file:///foo%20bar%20baz'
      let expr = 'file:///foo%20bar%20baz'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo bar baz',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'fri://qux/file:///foo%252520bar%252520baz'
      let expr = 'fri://qux/file:///foo%252520bar%252520baz'
      let want = {
            \ 'scheme': 'fri',
            \ 'authority': 'qux',
            \ 'path': 'file:///foo%2520bar%2520baz',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'file:///foobar'
      let expr = 'file:///foobar'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foobar',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End

    It returns FRI for 'ssh://localhost/'
      let expr = 'ssh://localhost/'
      let want = {
            \ 'scheme': 'ssh',
            \ 'authority': 'localhost',
            \ 'path': '',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#parse(expr), want)
    End
  End

  Describe #format()
    It formats FRI to 'file:///foo/bar'
      let expr = 'file:///foo/bar'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'file:///foo/bar;drawer'
      let expr = 'file:///foo/bar;drawer'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \ },
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'file:///foo/bar;width=50&drawer'
      let expr = 'file:///foo/bar;width=50&drawer'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'file:///foo/bar;width=50&drawer#fragment'
      let expr = 'file:///foo/bar;width=50&drawer#fragment'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'ssh://user:pass@example.com/foo/bar;drawer&width=50#fragment'
      let expr = 'ssh://user:pass@example.com/foo/bar;width=50&drawer#fragment'
      let want = {
            \ 'scheme': 'ssh',
            \ 'authority': 'user:pass@example.com',
            \ 'path': 'foo/bar',
            \ 'query': {
            \   'drawer': v:true,
            \   'width': '50',
            \ },
            \ 'fragment': 'fragment',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'file:///foo%20bar%20baz'
      let expr = 'file:///foo%20bar%20baz'
      let want = {
            \ 'scheme': 'file',
            \ 'authority': '',
            \ 'path': 'foo bar baz',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End

    It formats FRI to 'fri://qux/file:///foo%252520bar%252520baz'
      let expr = 'fri://qux/file:///foo%252520bar%252520baz'
      let want = {
            \ 'scheme': 'fri',
            \ 'authority': 'qux',
            \ 'path': 'file:///foo%2520bar%2520baz',
            \ 'query': {},
            \ 'fragment': '',
            \}
      Assert Equals(fern#fri#format(want), expr)
    End
  End

  Describe #encode()
    It encodes percent character (%)
      Assert Equals(fern#fri#encode('%'), '%25')
    End

    It encodes unusable characters (< > | ? *)
      Assert Equals(fern#fri#encode('<'), '%3C')
      Assert Equals(fern#fri#encode('>'), '%3E')
      Assert Equals(fern#fri#encode('|'), '%7C')
      Assert Equals(fern#fri#encode('?'), '%3F')
      Assert Equals(fern#fri#encode('*'), '%2A')
    End

    It encodes characters matches the {pattern}
      let pattern = '[#\[\]= ]'
      Assert Equals(fern#fri#encode('#'), '#')
      Assert Equals(fern#fri#encode('['), '[')
      Assert Equals(fern#fri#encode(']'), ']')
      Assert Equals(fern#fri#encode('='), '=')
      Assert Equals(fern#fri#encode(' '), ' ')
      Assert Equals(fern#fri#encode('#', pattern), '%23')
      Assert Equals(fern#fri#encode('[', pattern), '%5B')
      Assert Equals(fern#fri#encode(']', pattern), '%5D')
      Assert Equals(fern#fri#encode('=', pattern), '%3D')
      Assert Equals(fern#fri#encode(' ', pattern), '%20')
    End

    It encodes all percent character (%)
      Assert Equals(fern#fri#encode('%%'), '%25%25')
    End
  End

  Describe #decode()
    It decodes percent-encoded percent character (%)
      Assert Equals(fern#fri#decode('%25'), '%')
    End

    It decodes percent-encoded unusable characters (< > | ? *)
      Assert Equals(fern#fri#decode('%3C'), '<')
      Assert Equals(fern#fri#decode('%3E'), '>')
      Assert Equals(fern#fri#decode('%7C'), '|')
      Assert Equals(fern#fri#decode('%3F'), '?')
      Assert Equals(fern#fri#decode('%2A'), '*')
    End

    It decodes any percent-encoded characters (# [ ] = )
      Assert Equals(fern#fri#decode('%23'), '#')
      Assert Equals(fern#fri#decode('%5B'), '[')
      Assert Equals(fern#fri#decode('%5D'), ']')
      Assert Equals(fern#fri#decode('%3D'), '=')
      Assert Equals(fern#fri#decode('%20'), ' ')
    End

    It decodes only one depth
      Assert Equals(fern#fri#decode('%252523'), '%2523')
      Assert Equals(fern#fri#decode('%2523'), '%23')
      Assert Equals(fern#fri#decode('%23'), '#')
    End

    It decodes all percent character (%)
      Assert Equals(fern#fri#decode('%23%23'), '##')
    End

    It decodes all percent character (%) only one depth
      Assert Equals(fern#fri#decode('%252523%252523'), '%2523%2523')
      Assert Equals(fern#fri#decode('%2523%2523'), '%23%23')
      Assert Equals(fern#fri#decode('%23%23'), '##')
    End
  End
End
