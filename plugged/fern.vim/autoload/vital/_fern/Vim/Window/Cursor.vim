" ___vital___
" NOTE: lines between '" ___vital___' is generated by :Vitalize.
" Do not modify the code nor insert new lines before '" ___vital___'
function! s:_SID() abort
  return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')
endfunction
execute join(['function! vital#_fern#Vim#Window#Cursor#import() abort', printf("return map({'set_cursor': '', 'get_cursor': ''}, \"vital#_fern#function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")
delfunction s:_SID
" ___vital___
if !exists('*nvim_win_get_cursor')
  function! s:get_cursor(winid) abort
    if win_getid() is# a:winid
      let cursor = getpos('.')
      return [cursor[1], cursor[2] - 1]
    else
      let winid_saved = win_getid()
      try
        call win_gotoid(a:winid)
        return s:get_cursor(a:winid)
      finally
        call win_gotoid(winid_saved)
      endtry
    endif
  endfunction
else
  function! s:get_cursor(winid) abort
    return nvim_win_get_cursor(a:winid)
  endfunction
endif

if !exists('*nvim_win_set_cursor')
  function! s:set_cursor(winid, pos) abort
    if win_getid() is# a:winid
      let cursor = [0, a:pos[0], a:pos[1] + 1, 0]
      call setpos('.', cursor)
    else
      let winid_saved = win_getid()
      try
        call win_gotoid(a:winid)
        call s:set_cursor(a:winid, a:pos)
      finally
        call win_gotoid(winid_saved)
      endtry
    endif
  endfunction
else
  function! s:set_cursor(winid, pos) abort
    try
      call nvim_win_set_cursor(a:winid, a:pos)
    catch /Cursor position outside buffer/
      " Do nothing
    endtry
  endfunction
endif
