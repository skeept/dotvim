# vim: set ft=bash:
#===============================================================
#
# PERSONAL $HOME/.bashrc FILE for bash-2.05 (or later)
#
# This file is read (normally) by interactive shells only.
# Here is the place to define your aliases, functions and
# other interactive features like your prompt.
#
# This file was designed (originally) for Solaris.
# --> Modified for Linux.
# This bashrc file is a bit overcrowded - remember it is just
# just an example. Tailor it to your needs
#
#===============================================================

# --> Comments added by HOWTO author.

#---------------
# Some settings
#---------------

if test "$CUR_SHELL" = "bash"; then
  set -o notify
  set -o noclobber
  #set -o ignoreeof
  set -o nounset
  #set -o xtrace          # useful for debuging

  shopt -s cdspell
  shopt -s cdable_vars
  shopt -s checkhash
  shopt -s checkwinsize
  shopt -s mailwarn
  shopt -s sourcepath
  shopt -s no_empty_cmd_completion
  shopt -s histappend histreedit
  shopt -s extglob        # useful for programmable completion
fi

#-----------------------
# Greeting, motd etc...
#-----------------------

# Define some colors first:
red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'              # No Color
# --> Nice. Has the same effect as using "ansi.sys" in DOS.

# Looks best on a black background.....
#####
#echo -e "${CYAN}This is BASH ${RED}${BASH_VERSION%.*}${CYAN} - DISPLAY on ${RED}$DISPLAY${NC}\n"
#date
#if [ -x /usr/games/fortune ]; then
#    /usr/games/fortune -s     # makes our day a bit more fun.... :-)
#fi


function m2k() {
  ( cd ../../ ; make $@ )
}

function makei()
{
  local nprocs
  if [[ -n "$@" ]] ; then
    nprocs=$1
  else
    nprocs=4
  fi
  cmd="make -j${nprocs} && make -j${nprocs} install"
  echo $cmd
  eval "$cmd"
}



function ud ()
{
  # normally just change DISPLAY and DISPLAY0
  # argument given store change to given arg and store old one
  if [[ "$@" = "" ]] ;  then
    local DISPLAY_="$DISPLAY"
    export DISPLAY="$DISPLAY0"
    export DISPLAY0="$DISPLAY_"
  else
    export DISPLAY0="${DISPLAY}"
    export DISPLAY="$1"
  fi
  echo "DISPLAY=$DISPLAY"
  echo "DISPLAY0=$DISPLAY0"
  echo "TERM=$TERM"
}


function soo () {
  #use this to run a command and pipe the output to less
  # in case the comand does not exist try less on the file
  if
    type "$1" >& /dev/null
  then
    "$@"  | less
  else
    less "$@"
  fi
}

function pre()
{
  if test "a$1" != "a"; then
    eval "echo \${$1}"
  else
    env
  fi
}

#function sa()
#{
  #echo "1: .alias, 2: .bashrc, 3: .bashrc2, 4: .bashrc.local"
  #if test "a$1" = "a1" ; then
    #source "${HOME}/.alias"
  #elif test "a$1" = "a2"; then
    #source "${HOME}/.bashrc"
  #elif test "a$1" = "a3"; then
    #source "${HOME}/.bashrc2"
  #elif test "a$1" = "a4"; then
    #source "${HOME}/.bashrc.local"
  #fi
#}

#function sae()
#{
  #echo "1: .alias, 2: .bashrc, 3: .bashrc2, 4: .bashrc.local"
  #if test "a$1" = "a1" ; then
    #vim "${HOME}/.alias"
  #elif test "a$1" = "a2"; then
    #vim "${HOME}/.bashrc"
  #elif test "a$1" = "a3"; then
    #vim "${HOME}/.bashrc2"
  #elif test "a$1" = "a4"; then
    #vim "${HOME}/.bashrc.local"
  #fi
#}


function _exit()        # function to run upon exit of shell
{
  echo -e "${RED}Hasta la vista, baby${NC}"
}
trap _exit 0

#---------------
# Shell prompt
#---------------

function fastprompt()
{
  unset PROMPT_COMMAND
  case $TERM in
    *term | rxvt )
      PS1="[\h] \W > \[\033]0;[\u@\h] \w\007\]" ;;
    *)
      PS1="[\h] \W > " ;;
  esac
}


MYHOST=`hostname`
function powerprompt()
{
  _powerprompt()
  {
    LOAD=$(uptime|sed -e "s/.*: \([^,]*\).*/\1/" -e "s/ //g")
    TIME=$(date +%H:%M)
  }

PROMPT_COMMAND=_powerprompt
case $TERM in
  *term | rxvt  )
    #            PS1="$USER\w> \[\033]0;[\u@\h] \w\007\]" ;;
    PS1="[$MYHOST\w]> \[\033]0;[\u@\h] \w\007\]" ;;
  linux )
    PS1="$USER\w> " ;;
  * )
    PS1="$USER\w> " ;;
esac
}



#powerprompt     # this is the default prompt - might be slow
# If too slow, use fastprompt instead....


#===============================================================
#
# ALIASES AND FUNCTIONS
#
# Arguably, some functions defined here are quite big
# (ie 'lowercase') but my workstation has 512Meg of RAM, so .....
# If you want to make this file smaller, these functions can
# be converted into scripts.
#
# Many functions were taken (almost) straight from the bash-2.04
# examples.
#
#===============================================================

#-------------------
# Personnal Aliases
#-------------------

#alias rm='rm -i'
#alias cp='cp -i'
#alias mv='mv -i'
# -> Prevents accidentally clobbering files.

export PAGER=less
#export LESSCHARSET='latin1'
#export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>& /dev/null' # Use this if lesspipe.sh exists
export LESSOPEN='|/usr/bin/lesspipe.sh %s >& /dev/null' # Use this if lesspipe.sh exists

#export LESS='-i -N -w  -z-4 -g -e -M -X -F -R -P%t?f%f \
#:stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'
export LESS='-i      -e -M -X  -R -P%t?f%f \
  :stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

#----------------
# a few fun ones
#----------------

function xtitle ()
{
  #case $TERM in
  #*term | rxvt)
  #echo -n -e "\033]0;$*\007" ;;
#*)  ;;
#esac
echo -n -e "\033]0;$*\007"
}


function ll(){ ls -l "$@"| egrep "^d" ; ls -lXB "$@" 2>&-| egrep -v "^d|total "; }


#function te()  # wrapper around xemacs/gnuserv
#{
#if [ "$(gnuclient -batch -eval t 2>&-)" == "t" ]; then
#gnuclient -q "$@";
#else
#( xemacs "$@" & );
#fi
#}

#-----------------------------------
# File & strings related functions:
#-----------------------------------

function ff() { local pat=$1; shift; find . -iname '*'${pat}'*' $@; }
function ffe()
{ 
  # find a file and run $2 on it
  if [ -z "$1" ]; then
    1>&2 echo "usage: ${FUNCNAME[0]} pattern [command]"
  else
    local pat=$1
    shift
    if [ -z "$1" ]; then
      find . -iname '*'${pat}'*' -print0 | xargs --null -n1 echo
    else
      find . -iname '*'${pat}'*' -print0 | xargs --null -n1 $@
    fi
  fi
}

#function fstr() # find a string in a set of files
#{
  #if [ "$#" -gt 2 ]; then
    #echo "Usage: fstr \"pattern\" [files] "
    #return;
  #fi
  #SMSO=$(tput smso)
  #RMSO=$(tput rmso)
  #find . -type f -name "${2:-*}" -print | xargs grep -sin "$1" | \
    #sed "s/$1/$SMSO$1$RMSO/gI"
#}

#function cuttail() # cut last n lines in file, 10 by default
#{
  #nlines=${2:-10}
  #sed -n -e :a -e "1,${nlines}!{P;N;D;};N;ba" $1
#}

function lowercase()  # move filenames to lowercase
{
  for file ; do
    filename=${file##*/}
    case "$filename" in
      */*) dirname==${file%/*} ;;
      *) dirname=.;;
    esac
    nf=$(echo $filename | tr A-Z a-z)
    newname="${dirname}/${nf}"
    if [ "$nf" != "$filename" ]; then
      mv "$file" "$newname"
      echo "lowercase: $file --> $newname"
    else
      echo "lowercase: $file not changed."
    fi
  done
}

function swap()         # swap 2 filenames around
{
  local TMPFILE=tmp.$$
  mv $1 $TMPFILE
  mv $2 $1
  mv $TMPFILE $2
}

#-----------------------------------
# Process/system related functions:
#-----------------------------------

function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }

# This function is roughly the same as 'killall' on linux
# but has no equivalent (that I know of) on Solaris
function killps()   # kill by process name
{
  local pid pname sig="-TERM"   # default signal
  if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    echo "Usage: killps [-SIGNAL] pattern"
    return;
  fi
  if [ $# = 2 ]; then sig=$1 ; fi
  for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} ) ; do
    pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
    if ask "Kill process $pid <$pname> with signal $sig?"
    then kill $sig $pid
    fi
  done
}

#function my_ip() # get IP adresses
#{
#MY_IP=$(/sbin/ifconfig ppp0 | awk '/inet/ { print $2 } ' | sed -e s/addr://)
#MY_ISP=$(/sbin/ifconfig ppp0 | awk '/P-t-P/ { print $3 } ' | sed -e s/P-t-P://)
#}

function iii()   # get current host related info
{
  echo -e "\nYou are logged on ${RED}$HOST"
  echo -e "\nAdditionnal information:$NC " ; uname -a
  echo -e "\n${RED}Users logged on:$NC " ; w -h
  echo -e "\n${RED}Current date :$NC " ; date
  echo -e "\n${RED}Machine stats :$NC " ; uptime
  echo -e "\n${RED}Memory stats :$NC " ; free
  my_ip 2>&- ;
  echo -e "\n${RED}Local IP Address :$NC" ; echo ${MY_IP:-"Not connected"}
  echo -e "\n${RED}ISP Address :$NC" ; echo ${MY_ISP:-"Not connected"}
  echo
}


# Misc utilities:

function repeat()       # repeat n times command
{
  local i max
  max=$1; shift;
  for ((i=1; i <= max ; i++)); do  # --> C-like syntax
    eval "$@";
  done
}

function ask()
{
  echo -n "$@" '[y/n] ' ; read ans
  case "$ans" in
    y*|Y*) return 0 ;;
    *) return 1 ;;
  esac
}

#=========================================================================
#
# PROGRAMMABLE COMPLETION - ONLY SINCE BASH-2.04
# (Most are taken from the bash 2.05 documentation)
# You will in fact need bash-2.05 for some features
#
#=========================================================================

if [ "${BASH_VERSION%.*}" \< "2.05" ]; then
  echo "You will need to upgrade to version 2.05 for programmable completion"
  return
fi

shopt -s extglob        # necessary
set +o nounset          # otherwise some completions will fail

complete -A hostname   rsh rcp telnet rlogin r ftp ping disk
complete -A command    nohup exec eval trace gdb ddd
complete -A command    command type which
complete -A export     printenv
complete -A variable   export local readonly unset
complete -A enabled    builtin
complete -A alias      alias unalias
complete -A function   function
complete -A user       su mail finger

complete -A helptopic  help     # currently same as builtins
complete -A shopt      shopt
complete -A stopped -P '%' bg
complete -A job -P '%'     fg jobs disown

complete -A directory  mkdir rmdir
complete -A directory   -o default cd d

complete -f -d -X '*.gz'  gzip tar
complete -f -d -X '*.bz2' bzip2 tar
complete -f -d -X '*.rar' unrar
complete -f -o default -X '!*.gz'  gunzip tar
complete -f -o default -X '!*.bz2' bunzip2 tar
complete -f -o default -X '!*.zip' unzip
complete -f -o default -X '!*.tar' tar
complete -f -o default -X '!*.rar' unrar
complete -f -o default -X '!*.pl'  perl perl5 p
complete -f -o default -X '!*.ps'  gs ghostview ps2pdf ps2ascii kghostview gv
complete -f -o default -X '!*.dvi' dvips dvipdf xdvi dviselect dvitype kdvi
complete -f -o default -X '!*.pdf' acroread pdf2ps kpdf xpdf
complete -f -o default -X '!*.+(pdf|ps)' gv ggv
complete -f -o default -X '!*.texi*' makeinfo texi2dvi texi2html texi2pdf
complete -f -o default -X '!*.tex' tex latex slitex pdflatex vim xemacs emacs te gvim kile
complete -f -o default -X '!*.lyx' lyx
complete -f -o default -X '!*.+(jpg|gif|xpm|png|bmp)' xv gimp display
complete -f -o default -X '!*.mp3' mpg123 mplayer
complete -f -o default -X '!*.ogg' ogg123 mplayer
complete -f -o default -X '!*.c' vim vi gvim emacs xemacs nedit joe jed kate kwrite gedit
complete -f -o default -X '!*.cc' vim vi gvim emacs xemacs nedit joe jed kate kwrite gedit
complete -f -o default -X '!*.cpp' vim vi gvim emacs xemacs nedit joe jed kate kwrite gedit
complete -f -o default -X '!*.c++' vim vi gvim emacs xemacs nedit joe jed kate kwrite gedit
complete -f -o default -X '!*.py' vim vi gvim emacs xemacs nedit joe jed kate kwrite gedit \
  py.exe py python python.exe ipython wpy wpy.exe \
  epy
  complete -f -o default -X '!*.gdx' gdxdump gdxdump.exe
  complete -f -o default -X '!*.gms' gams gr
  complete -f -o default -X '!*.sh' bash sh
  complete -A variable path dupremove pre
  complete -f -o default -X '!*.zpl' scip cubic ./cubic ./r ./r.sh rr r1 r2


# This is a 'universal' completion function - it works when commands have
# a so-called 'long options' mode , ie: 'ls --all' instead of 'ls -a'
_universal_func ()
{
  case "$2" in
    -*)     ;;
    *)      return ;;
  esac

  case "$1" in
    \~*)    eval cmd=$1 ;;
    *)      cmd="$1" ;;
  esac
  COMPREPLY=( $("$cmd" --help | sed  -e '/--/!d' -e 's/.*--\([^ ]*\).*/--\1/'| \
    grep ^"$2" |sort -u) )
  }
complete  -o default -F _universal_func ldd wget bash id info


_make_targets ()
{
  local mdef makef gcmd cur prev i

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}

    # if prev argument is -f, return possible filename completions.
    # we could be a little smarter here and return matches against
    # `makefile Makefile *.mk', whatever exists
    case "$prev" in
      -*f)    COMPREPLY=( $(compgen -f $cur ) ); return 0;;
    esac

    # if we want an option, return the possible posix options
    case "$cur" in
      -)      COMPREPLY=(-e -f -i -k -n -p -q -r -S -s -t); return 0;;
    esac

    # make reads `makefile' before `Makefile'
    if [ -f makefile ]; then
      mdef=makefile
    elif [ -f Makefile ]; then
      mdef=Makefile
    else
      mdef=*.mk               # local convention
    fi

    # before we scan for targets, see if a makefile name was specified
    # with -f
    for (( i=0; i < ${#COMP_WORDS[@]}; i++ )); do
      if [[ ${COMP_WORDS[i]} == -*f ]]; then
        eval makef=${COMP_WORDS[i+1]}       # eval for tilde expansion
        break
      fi
    done

    [ -z "$makef" ] && makef=$mdef

    # if we have a partial word to complete, restrict completions to
    # matches of that word
    if [ -n "$2" ]; then gcmd='grep "^$2"' ; else gcmd=cat ; fi

    # if we don't want to use *.mk, we can take out the cat and use
    # test -f $makef and input redirection
    COMPREPLY=( $(cat $makef 2>/dev/null | awk 'BEGIN {FS=":"} /^[^.#   ][^=]*:/ {print $1}' | tr -s ' ' '\012' | sort -u | eval $gcmd ) )
  }

complete -F _make_targets -X '+($*|*.[cho])' make gmake pmake

_configure_func ()
{
  case "$2" in
    -*)     ;;
    *)      return ;;
  esac

  case "$1" in
    \~*)    eval cmd=$1 ;;
    *)      cmd="$1" ;;
  esac

  COMPREPLY=( $("$cmd" --help | awk '{if ($1 ~ /--.*/) print $1}' | grep ^"$2" | sort -u) )
}

complete -F _configure_func configure

# cvs(1) completion
_cvs ()
{
  local cur prev
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}

  if [ $COMP_CWORD -eq 1 ] || [ "${prev:0:1}" = "-" ]; then
    COMPREPLY=( $( compgen -W 'add admin checkout commit diff \
      export history import log rdiff release remove rtag status \
      tag update' $cur ))
        else
          COMPREPLY=( $( compgen -f $cur ))
  fi
  return 0
}
complete -F _cvs cvs


_killall ()
{
  local cur prev
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}

    # get a list of processes (the first sed evaluation
    # takes care of swapped out processes, the second
    # takes care of getting the basename of the process)
    COMPREPLY=( $( ps -u $USER -o comm  | \
      sed -e '1,1d' -e 's#[]\[]##g' -e 's#^.*/##'| \
      awk '{if ($0 ~ /^'$cur'/) print $0}' ))

    return 0
  }

complete -F _killall killall killps

# Local Variables:
# mode:shell-script
# sh-shell:bash
# End:




function ddo() #try to do something with every file passed on the command line
{
  command=$1
  shift
  for file ; do
    eval "($command $file &)"
  done
}

function qp()
{
  # default folder is ~/x/quickput
  ( for f in $@; do ( scp -r $f acme:Documents/quickput/ & ) ; done &> /dev/null )
  cp -rf $@ ~/x/quickput/
  (
  cd ~/x/quickput;
  git add . ;
  git commit -a -m "$(date)" ;
  git push --force origin master
  hg add . ;
  hg commit -m "$(date)"
)
}

function qg()
{
  git pull
}


function __javastart( ) {
if test -e  /opt/hinacio/usr/local/packages/jre1.6.0_01/bin/ ; then
  cd  /opt/hinacio/usr/local/packages/jre1.6.0_01/bin/ >& /dev/null
  ./java >& /dev/null
  cd - >& /dev/null
fi
}
__javastart

function path ( )
{
  if test -z "$1"; then
    echo -e ${PATH//:/\\n}
  else
    VARNAME='echo -e ${'
    VARNAME=$VARNAME"$1"
    VARNAME=$VARNAME'//:/\\n}'
    eval "$VARNAME"
  fi
}

function dupremove()
{
  local __dupremovevar
  local _result
  if test "a$1" = "a"; then
    dupremove PATH
    dupremove LD_LIBRARY_PATH
    dupremove MANPATH
    return
  fi
  eval __dupremovevar=\$$1
  _result=$(gawk 'BEGIN{ORS=":";RS="[:\n]"}!a[$0]++' <<<"${__dupremovevar%:}" | \
    sed -e 's/\:\:/\:/g' -e 's/:$//')
      if test "a${_result}" = "a"; then
        eval "export ${1}=\"\$$1\" "
      else
        eval "export ${1}=\"${_result}\" "
      fi
    }

  test -s "$HOME/.completion-git.sh" && . "$HOME/.completion-git.sh"
  test -s "$HOME/.completion-eg.sh" && . "$HOME/.completion-eg.sh"
  test -s "$HOME/.git-prompt.sh" && . "$HOME/.git-prompt.sh"


  PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '


  function gtp()
  {
    GIT_PS1_SHOWDIRTYSTATE=1
    PS1="[\h] \W $(__git_ps1) > "
  }
#the following assumes 'alias g='git '
complete -o default -o nospace -F _git g

#also use the screen completion for the alias s (screen)
#complete -o default -o nospace -F _screen s

if true; then
  # try new implementation for d
  __d_add_folder()
  {
    local name_orig=$1
    [ -z "${name_orig}" ] && echo "__d_add_folder: cannot add. Nothing provided." && return 1
    #[ ! -d "${name}" ] && echo "cannot add. Folder ${name} missing." && return 1

    if ! name=$(eval "cd $name_orig" >& /dev/null && readlink -e . ); then
      echo "__d_add_folder: $name_orig not found. Cannot add"
      return 1
    fi
    local key=$2

  # use a vector where is element is another vector
  local size=${#_dirs_data_keys[@]}
  if [ ${size} -eq 0 ]; then
    _dirs_data_names=()
    _dirs_data_keys=()
  fi

  # check if the elements already exist
  for((i=0; i < size; i++)); do
    n="${_dirs_data_names[$i]}"
    k="${_dirs_data_keys[$i]}"

    if [ "${n}" = "${name}" ]; then
      if [ ! "${k}" = "${key}" ] && [ -n "${key}" ]; then
        echo "__d_add_folder: replacing key ${k} by $key for ${name}"
        _dirs_data_keys[$i]="${key}"
      fi
      return
    fi
  done

  # not found, add new one
  _dirs_data_names+=("${name}")
  _dirs_data_keys+=("${key}")
  [ -n "${key}" ] && eval "export ${key}=\"${name}\""
}

__print_folder_keys()
{
  local size=${#_dirs_data_names[@]}
  local name
  local key
  local curdir="$(readlink -e .)"
  curdir="${curdir/${HOME}/~}"
  for((i=0; i < size; i++)); do
    name="${_dirs_data_names[$i]/${HOME}/~}"
    [ "${name}" = "${curdir}" ] && indicator_cur="*" || indicator_cur=" "
    key="${_dirs_data_keys[$i]}"
    if [ "$1" = "-n" ]; then # print only numbers
      printf "${indicator_cur} %-2s  %-30s\n" "$i" "${name}"
    else
      printf "${indicator_cur} %-2s  %-20s  %-30s\n" "$i" "${key}" "${name}"
    fi
  done
}

d()
{
  # implement changing logic
  [ -z "$@" ] && __print_folder_keys && return

  # can be name or key
  target=$1
  [ "${target}" = "-" ] && cd - && return

  # if dir exists change to it regardless
  if [ -d  "${target}" ]; then
    __d_add_folder $@
    cd "${target}"
    return
  fi

  # which one to prioritize? keys or numbers. Here we go by keys
  local size=${#_dirs_data_names[@]}
  for((i=0; i < size; i++)); do
    if [ "${_dirs_data_keys[$i]}" = "${target}" ]; then
      cd "${_dirs_data_names[$i]}"
      return
    fi
  done


  # try to look for number index
  if [ -z "${target//[0-9]}" ] && [ $target -lt $size ]; then
    name="${_dirs_data_names[$target]}"
    cd "$name"
    return
  fi

  echo "key or index not found. run this without argument. trying cd directly"
  if cd "$@"; then
    shift
    __d_add_folder . $@
  fi
}

function _d()
{
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(eval "compgen -W \"${_dirs_data_keys[@]}\" -- $cur") )
}
complete -o plusdirs -o nospace -F _d d

dn()
{
  val="$1"
  [ -z "${val}" ] && __print_folder_keys -n && return
  [ -n "${val//[0-9]}" ] && echo "$val is not a number" && return 1
  local size=${#_dirs_data_names[@]}
  [ $val -ge $size ] && echo "$val is outside range. size=$size" && return 1
  name="${_dirs_data_names[$val]}"
  echo name=$name
  cd "$name"
}

elif test ${BASH_VERSION:0:1} -ge 4 ; then
  if test -z "${_my_dirs_data}" ; then declare -A _my_dirs_data; fi

  function d()
  {
    # get current folders in _my_dirs_data and dirs -v
    # will list each key followed by dirs
    local key
    local dkey
    local -A ff_tag
    local -A ff_dirs
    local -a mdirs
    local one_dir_key

    for key in "${!_my_dirs_data[@]}" ; do
      dkey="${_my_dirs_data[${key}]}"
      if test -z "${ff_tag[${dkey}]}";  then
        ff_tag[${dkey}]="${key}"
      else
        ff_tag[${dkey}]="${ff_tag[${dkey}]}:${key}"
      fi
    done

    mdirs=($(dirs -l -p))
    local idx=-1
    for dkey in "${mdirs[@]}"; do
      let idx++
      if test $idx -eq 0; then continue; fi
      if test -z "${ff_dirs[${dkey}]}";  then
        ff_dirs[${dkey}]="${idx}"
      else
        ff_dirs[${dkey}]="${ff_dirs[${dkey}]}:${idx}"
      fi
    done

    if test $# -eq 0; then
      for key in "${!ff_tag[@]}"; do
        one_dir_key=${ff_dirs[${key}]}
        one_dir_key=(${one_dir_key//:/ })
        one_dir_key=${one_dir_key[0]}
        printf "%-10s %2s %-s\n" "${ff_tag[${key}]}" "${one_dir_key}" "${key/${HOME}/~}"
      done
      for key in "${!ff_dirs[@]}"; do
        if test -n "${ff_tag[${key}]}"; then continue; fi
        one_dir_key=${ff_dirs[${key}]}
        one_dir_key=(${one_dir_key//:/ })
        one_dir_key=${one_dir_key[0]}
        printf "%-10s %2s %-s\n" " " "${one_dir_key}" "${key/${HOME}/~}"
      done
      return
    fi

    local curdir=${PWD}

    if test "$1" = "-"; then
      command cd -
      return
    fi

    local -a tmp_arr

    if test "$1" = "--"; then
      local deldir
      if test -z "$2"; then
        deldir="${curdir}"
      elif test -n "${_my_dirs_data[${2}]}"; then
        deldir="${_my_dirs_data[${2}]}"
      elif test "$2" -ge 0 >& /dev/null; then
        deldir=$(eval "dirs -l +${2}")
      else
        deldir=$(realpath "$2")
      fi
      if test -n "${ff_tag[${deldir}]}"; then
        IFS=':' read -a tmp_arr <<< ${ff_tag[${deldir}]}
        tmp_arr=(${tmp_arr})
        for i in "${tmp_arr[@]}"; do
          unset _my_dirs_data[${i}]
        done
      fi

      if test -n "${ff_dirs[${deldir}]}"; then
        IFS=':' read -a tmp_arr <<< ${ff_dirs[${deldir}]}
        tmp_arr=(${tmp_arr})
        for((i=${#tmp_arr[@]}-1; i>=0; i--)); do
          eval "popd -n +${tmp_arr[$i]}" > /dev/null
        done
      fi
      return
    fi

    if test "$1" = "+"; then
      # add folder to dirs even it exists already
      if test -n "$2"; then
        pushd "$2" > /dev/null
        pushd -n +1
      else
        pushd "${curdir}" > /dev/null
        pushd -n +1
      fi
      return
    fi

    if test "${1:0:1}" = "+"; then
      # add tag (bookmark)
      local tag
      tag="${1:1}"
      if test -n "$2"; then
        pushd "$2" > /dev/null
        pushd -n +1
      else
        pushd "${PWD}" > /dev/null
        pushd -n +1
      fi
      _my_dirs_data[${tag}]=$(realpath "${PWD}")
      return
    fi

    # when to add info to the correct hash array
    # finally cd to the current folder
    if test -n "${_my_dirs_data[${1}]}"; then
      eval "cd ${_my_dirs_data[${1}]}"
      __save_folder_hist "$PWD"
    elif test "$1" -ge 0 >& /dev/null; then
      eval "cd $(dirs +$1)"
      __save_folder_hist "$PWD"
    else
      cd $1
      __save_folder_hist "$PWD"
    fi
    return
  }

__list_folder_hist()
{
  # first argument is folder to be kept in history.
  # history will not be deleted so don't need much manipulation
  let i=0
  for key in "${__my_dirs_history[@]}"; do
    printf "%-30s   --  %s\n" "${key/${HOME}/~}" "$i"
    let i+=1
  done
}
__save_folder_hist()
{
  local cand=$1
  for key in "${__my_dirs_history[@]}"; do
    if test "${cand}" = "${key}"; then
      return
    fi
  done
  # got here just add it to end of list
  __my_dirs_history+=("${cand}")
}
__change_folder_hist()
{
  # change to a folder in history specifying a key
  # we assume the key will be valid
  if test "$1" -ge "${#__my_dirs_history[@]}" >& /dev/null; then
    return
  fi
  d "${__my_dirs_history[$1]}"
}
#interface function
dh() {
  if test "a$1" = "a"; then
    __list_folder_hist
  else
    __change_folder_hist "$1"
  fi
}

function _d()
{
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(eval "compgen -W \"${!_my_dirs_data[@]}\" -- $cur") )
}
complete -o plusdirs -o nospace -F _d d

function __d_add_folder()
{
  #echo --1=$1-- --2=$2--
  # usage: $0 destination tag
  if test "a$1" = "a"; then return; fi
  # check if key already added, to many for push/popd
  existing=0
  for key in ${_my_dirs_data[@]}; do
    if test "$key" = "$1"; then
      existing=1;
      break;
    fi
  done
  if test "$existing" = "0"; then
    pushd -n "$1" > /dev/null
  fi
  if test "a$2" = "a"; then return; fi
  _my_dirs_data["$2"]="$1"
}
else
  function d()
  {
    if test $# -eq 0; then
      dirs -v
    else
      if test $1 -ge 1 -o $1 -le 20 >& /dev/null; then
        eval "cd ~$1"
      else
        if test "$1" = "-"; then
          cd -
        else
          pushd $1 >& /dev/null
          if test $? -ne 0; then pushd $1 ; fi
        fi
      fi
    fi
  }
fi

function tt()
{
  if test "a$1" = "a"; then export TERM=xterm; else export TERM="$1"; fi
  echo "TERM=$TERM"
}


function gi()
{
  local pattern=$1
  local def_loc="."
  shift
  if [[ -n "$@" ]]; then
    local def_loc=$@
  fi
  grep -iR --exclude={tags,*.{{obj,o,idb,pdb,exe}} \
    --exclude-dir=.{git,hg,svn} --binary-files=without-match "${pattern}" ${def_loc}
  }

function gib()
{
  local pattern=$1
  local def_loc="."
  shift
  if [[ -n "$@" ]]; then
    local def_loc=$@
  fi
  grep -iR --exclude={tags,*.{{obj,o,idb,pdb,exe}} \
    --exclude-dir=.{git,hg,svn} "${pattern}" ${def_loc}
  }

# completion for vim
function _vim()
{
  local cur prev idx ext

  COMPREPLY=()
  _get_comp_words_by_ref cur prev

  case $prev in
    -h|--help|-v|--version)
      return 0
      ;;
  esac

  if [[ "$cur" == -* ]] ; then
    local _vopts='-v -e -E -s -d -y -R -Z -m -M -b -l -C'
    _vopts="${_vopts} -N -V -D -n -r -r -L -A -H -F -T -u"
    _vopts="${_vopts} --noplugin -p -o -O --cmd -c -S -s -w -W"
    _vopts="${_vopts} -x -X --remote --remote-silent --remote-wait"
    _vopts="${_vopts} --remote-wait-silent --remote-tab --remote-send"
    _vopts="${_vopts} --remote-expr --serverlist --servername"
    _vopts="${_vopts} --startuptime -i -h --help --version"
    COMPREPLY=( $( compgen -W "${_vopts}" \
      -- "$cur" ) )
          return 0
  fi

  local _VIM_IGNORE=(pdf xdvi jpg pyc exe tar zip ps)
  _filedir
  for idx in ${!COMPREPLY[@]}; do
    ext=${COMPREPLY[$idx]}
    ext=${ext##*.}
    for iext in ${_VIM_IGNORE[@]}; do
      if test "$ext" = "$iext"; then
        unset -v COMPREPLY[$idx]
        break
      fi
    done
  done
  return 0
}
complete -F _vim vim vi v gv vd va

function e()
{
  if [ -x "$(command -v nvim)" ]; then
    nvim $@
  else
    vim $@
  fi
}


__imp_v()
{
  # first argument is to decide mode
  local mode=$1
  shift
  [ "${mode}" = "X" ] && mode=
  local remote_open="RemoteOpenMod$mode"
  if [ "$(type -t __get_gvim_win)" = "function" ] && [ -n "$(__get_gvim_win)" ]; then
    ("$(__get_gvim_win)" -c "${remote_open} $(__args_to_win $@)" &)
  elif [ -x "$(command -v gvim)" -a -n "${DISPLAY}" ]; then
    gvim -c "${remote_open} $@"
  else
    vim $@
  fi
}

v()
{
  __imp_v X $@
  #if [ "$(type -t __get_gvim_win)" = "function" ] && [ -n "$(__get_gvim_win)" ]; then
    #("$(__get_gvim_win)" -c "RemoteOpenMod $(__args_to_win $@)" &)
  #elif [ -x "$(command -v gvim)" -a -n "${DISPLAY}"]; then
    #gvim -c "RemoteOpenMod $@"
  #else
    #vim $@
  #fi
}

#vn()
#{
  #__imp_v N $@
#}

vs()
{
  __imp_v S $@
}

vt()
{
  __imp_v T $@
}

g()
{
  [ -z "$1" ] && git status || git $@
}

first_alternative()
{
  for cand in "$@"; do
    [ -e "${cand}" ] && echo "${cand}" && break
    [ -d "${cand}" ] && echo "${cand}" && break
  done
}

irr()
{
  # this function serves as a helper to run the python script run_irops.py
  # may need to consider explicity location for where this script is for now
  # we start with windows

  # also in the future we should see if there is a nice way to use tmux to start the run in a pane
  # for now just start directly

  local candidates=("/mnt/c/Tools" "/project/ezcrew_new/helder/c_tools")
  local pyfile="$(first_alternative ${candidates[@]})/run_irops.py"
  if [ -e "${pyfile}" ]; then
    python "${pyfile}" $@
  else
    echo "folder with run_irops.py not found in list... Please add it"
  fi
}


copy-static()
{
  # use this to call script to copy scenario
  local rt_candidates=(/mnt/c/OR/IROPS/rt/ /project/ezcrew_new/helder/irops/rt)
  local copy_py="$(first_alternative ${rt_candidates[@]})/Scripts/copy_static.py"
  if [ ! -e "${copy_py}" ]; then
    echo "couldn't find copy_static.py script in rt_candidates=${rt_candidates[@]}"
    return 1
  fi

  local static_cand=(/mnt/c/OR/IROPS/reaccomm-static /project/ezcrew_new/helder/irops/reaccomm-static)
  local static_f="$(first_alternative ${static_cand[@]})"
  if [ ! -d "${static_f}" ]; then
    echo "couldn't find static files in static_cand=${static_cand[@]}"
    echo "invoking script directly"
    python "${copy_py}" $@
    return
  fi

  python "${copy_py}" -i "${static_f}" $@
}

function dirdiff()
{
  # Shell-escape each path:
  DIR1=$(printf '%q' "$1"); shift
  DIR2=$(printf '%q' "$1"); shift
  vim $@ -c "DirDiff $DIR1 $DIR2"
}

fz()
{
  if [ -x "$(command -v bat)" ]; then
    fzf --preview 'bat --style=plain --color=always --line-range :500 {}' $@
  else
    fzf --preview 'head -n 120 {}'
  fi
}

star()
{
  if [ -z "${1}" ]; then
    eval "$(starship init bash)"
  else
    eval "$(oh-my-posh prompt init bash --config ~/.vim/test/keep/posh-themes/my_negligible.omp.json)"
  fi
}

function zp()
{
  test -n "$1" && select1=("--select-1" "-q") || select1=()
  if (type bat >& /dev/null); then
    fzf --preview "bat --style=plain --color=always --line-range :500 {}" ${select1[@]} $@
  else
    fzf --preview "head -n 500 {}" ${select1[@]} $@
  fi

}

function vv()
{
  for fname in $@; do
    if [ -e "${fname}" ]; then
      __imp_v X $@
      return $?
    fi
  done

  if (type fzf >& /dev/null); then name="$(zp $@)"; else name=$@; fi
  [ -n "${name}" ] && __imp_v X "${name}"
}

function vn()
{
  for fname in $@; do
    if [ -e "${fname}" ]; then __imp_v N $@; return $?; fi
  done

  if (type fzf >& /dev/null); then name="$(zp $@)"; else name=$@; fi
  [ -n "${name}" ] && __imp_v N "${name}"
}

# cd to a nested folder
dd() {
  local dir
  local ok=0
  if [ -n "${1}" -a \( -d "${1}" -o "${1}" = "-" \) ]; then dir=$1
  elif type -p fd >& /dev/null; then
    dir=$(fd -I --type d ${1:-.} | fzf --select-1 +m)
    ok=$?
  else
    local arg="$([ -n "${1}" ] && echo -q \'$@)"
    dir=$(find . -path '*/\.*' -prune -o -type d -print 2> /dev/null \
        | grep -v "^\.$"| fzf --select-1 +m $arg)
    ok=$?
  fi

  if [ "${ok}" -eq "0" ] ; then
    if type d >& /dev/null; then
      d ${dir}
    else
      cd ${dir}
    fi
  fi
}

function j()
{
  if [ -n "$1"  ]; then
    export LAST_JJ_ARGS="$@"
  fi

  ${LAST_JJ_ARGS[@]}
}

function pt()
{
  if [ -n  "$1" ]; then
    if [ "$1" = "-cc" ]; then
      export LAST_PYTEST_ARGS=
    else
      export LAST_PYTEST_ARGS="$@"
    fi
  fi

  pytest ${LAST_PYTEST_ARGS[@]}
}

if type zoxide >& /dev/null; then
  #export _ZO_DATA_DIR="${HOME}/.sabre2/cache/zoxide"
  #mkdir -p "${_ZO_DATA_DIR}"
  _zoxide_add()
  {
    test -d $1 && zoxide add $1
  }

  #_zoxide_add ~/src/t1/users/sg0216489/irops_micros
  #_zoxide_add ~/src/sabre2
  _zoxide_add /mnt/c/Users/SG0216489/vimfiles
  _zoxide_add  /mnt/c/OR/IRops/Engines/Reaccomm
  _zoxide_add /mnt/c/zl/ML

  eval "$(zoxide init bash)"
fi

test -e ~/.local/bash-completion/etc/profile.d/bash_completion.sh && source ~/.local/bash-completion/etc/profile.d/bash_completion.sh

