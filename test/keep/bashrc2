# vim: set ft=bash:
#===============================================================
#
# PERSONAL $HOME/.bashrc FILE for bash-2.05 (or later)
#
# This file is read (normally) by interactive shells only.
# Here is the place to define your aliases, functions and
# other interactive features like your prompt.
#
# This file was designed (originally) for Solaris.
# --> Modified for Linux.
# This bashrc file is a bit overcrowded - remember it is just
# just an example. Tailor it to your needs
#
#===============================================================

# --> Comments added by HOWTO author.

#---------------
# Some settings
#---------------

if [ "$CURSHELL" = "bash" ]; then
  set -o notify
  #[ "$(hostname)"  != "sabre" ] && set -o noclobber
  # we assume if this folder exists we are in nix setup
  [ -d ~/src/SABRE2/sabre2/ ] || set -o noclobber
  #set -o ignoreeof
  set -o nounset
  #set -o xtrace          # useful for debuging

  shopt -s cdspell
  shopt -s cdable_vars
  shopt -s checkhash
  shopt -s checkwinsize
  shopt -s mailwarn
  shopt -s sourcepath
  shopt -s no_empty_cmd_completion
  shopt -s histappend histreedit
  shopt -s extglob        # useful for programmable completion
fi

export CONFIG_HOME="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}"  )" &> /dev/null && pwd )"

MTIMER_ENABLED=0
function mtimer()
{
  [ "${MTIMER_ENABLED}" != "1" ] && return
  local now=$(date +%s%3N)
  [ -z ${MTIMER_START+x} ] && MTIMER_START=$now
  [ -z ${MTIMER_LAST+x} ] && MTIMER_LAST=$now
  local total=$((now - MTIMER_START))
  local last=$((now - MTIMER_LAST))
  echo "$@ Total: $total last: $last"
  MTIMER_LAST=$(date +%s%3N)
}

mtimer right after start

#-----------------------
# Greeting, motd etc...
#-----------------------

# Define some colors first:
red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'              # No Color
# --> Nice. Has the same effect as using "ansi.sys" in DOS.

function py() {
  # should we go with python by default or python 3?
  type python3 >& /dev/null && PYTHON_EXE=python3 || PYTHON_EXE=python
  "${PYTHON_EXE}" $@
}

function pym {
  # assume script is first argument
  script_root=$(dirname $1)
  type python3 >& /dev/null && PYTHON_EXE=python3 || PYTHON_EXE=python
  PYTHONPATH="$script_root:$PYTHONPATH" "${PYTHON_EXE}" $@
}

function ud ()
{
  # normally just change DISPLAY and DISPLAY0
  # argument given store change to given arg and store old one
  if [[ "$@" = "" ]] ;  then
    local DISPLAY_="$DISPLAY"
    export DISPLAY="$DISPLAY0"
    export DISPLAY0="$DISPLAY_"
  else
    export DISPLAY0="${DISPLAY}"
    export DISPLAY="$1"
  fi
  echo "DISPLAY=$DISPLAY"
  echo "DISPLAY0=$DISPLAY0"
  echo "TERM=$TERM"
}


function _exit()        # function to run upon exit of shell
{
  echo -e "${RED}Hasta la vista, baby${NC}"
}
trap _exit 0

#===============================================================
#
# ALIASES AND FUNCTIONS
#
# Arguably, some functions defined here are quite big
# (ie 'lowercase') but my workstation has 512Meg of RAM, so .....
# If you want to make this file smaller, these functions can
# be converted into scripts.
#
# Many functions were taken (almost) straight from the bash-2.04
# examples.
#
#===============================================================

export PAGER=less
#export LESSCHARSET='latin1'
#export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>& /dev/null' # Use this if lesspipe.sh exists
export LESSOPEN='|/usr/bin/lesspipe.sh %s >& /dev/null' # Use this if lesspipe.sh exists

#export LESS='-i -N -w  -z-4 -g -e -M -X -F -R -P%t?f%f \
#:stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'
export LESS='-i      -e -M -X  -R -P%t?f%f \
  :stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc
export LF_CONFIG_HOME="${CONFIG_HOME}"
export STARSHIP_LOG=error

#----------------
# a few fun ones
#----------------

function xtitle ()
{
  echo -n -e "\033]0;$*\007"
}

function ll() {
  if type eza >& /dev/null; then
    eza -l --git --icons "$@"
  else
    ls -l "$@"| egrep "^d" ; ls -lXB "$@" 2>&-| egrep -v "^d|total "
  fi
}

#-----------------------------------
# File & strings related functions:
#-----------------------------------

function ff() { local pat=$1; shift; find . -iname '*'${pat}'*' $@; }
function ffe()
{
  # find a file and run $2 on it
  if [ -z "$1" ]; then
    1>&2 echo "usage: ${FUNCNAME[0]} pattern [command]"
  else
    local pat=$1
    shift
    if [ -z "$1" ]; then
      find . -iname '*'${pat}'*' -print0 | xargs --null -n1 echo
    else
      find . -iname '*'${pat}'*' -print0 | xargs --null -n1 $@
    fi
  fi
}

#-----------------------------------
# Process/system related functions:
#-----------------------------------

function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }

# This function is roughly the same as 'killall' on linux
# but has no equivalent (that I know of) on Solaris
function killps()   # kill by process name
{
  local pid pname sig="-TERM"   # default signal
  if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    echo "Usage: killps [-SIGNAL] pattern"
    return;
  fi
  if [ $# = 2 ]; then sig=$1 ; fi
  for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} ) ; do
    pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
    if ask "Kill process $pid <$pname> with signal $sig?"
    then kill $sig $pid
    fi
  done
}

function iii()   # get current host related info
{
  echo -e "\nYou are logged on ${RED}$HOST"
  echo -e "\nAdditionnal information:$NC " ; uname -a
  echo -e "\n${RED}Users logged on:$NC " ; w -h
  echo -e "\n${RED}Current date :$NC " ; date
  echo -e "\n${RED}Machine stats :$NC " ; uptime
  echo -e "\n${RED}Memory stats :$NC " ; free
  my_ip 2>&- ;
  echo -e "\n${RED}Local IP Address :$NC" ; echo ${MY_IP:-"Not connected"}
  echo -e "\n${RED}ISP Address :$NC" ; echo ${MY_ISP:-"Not connected"}
  echo
}


# Misc utilities:

function repeat()       # repeat n times command
{
  local i max
  max=$1; shift;
  for ((i=1; i <= max ; i++)); do  # --> C-like syntax
    eval "$@";
  done
}

function ask()
{
  echo -n "$@" '[y/n] ' ; read ans
  case "$ans" in
    y*|Y*) return 0 ;;
    *) return 1 ;;
  esac
}

[ -e $HOME/.cargo/env ] && source $HOME/.cargo/env
[[ -e ${CONFIG_HOME}/setup_completion.sh ]] && source ${CONFIG_HOME}/setup_completion.sh

function ddo() #try to do something with every file passed on the command line
{
  command=$1
  shift
  for file ; do
    eval "($command $file &)"
  done
}

function cr()
{
  # do a command at the repo root
  local repo_root="$(git rev-parse --show-toplevel 2> /dev/null || echo -n .)"
  if ! git rev-parse 2> /dev/null; then
    echo "`pwd` is not in a git repo. Excuting in place" >&2
  fi
  [ -n "$1" ] && (cd ${repo_root}; eval "$@")
}

function path ( )
{
  if test -z "$1"; then
    echo -e ${PATH//:/\\n}
  else
    VARNAME='echo -e ${'
    VARNAME=$VARNAME"$1"
    VARNAME=$VARNAME'//:/\\n}'
    eval "$VARNAME"
  fi
}

function dupremove()
{
  local __dupremovevar
  local _result
  if [ -z "$1" ]; then
    dupremove PATH
    dupremove LD_LIBRARY_PATH
    dupremove MANPATH
    return
  fi
  eval __dupremovevar=\$$1
  _result=$(gawk 'BEGIN{ORS=":";RS="[:\n]"}!a[$0]++' <<<"${__dupremovevar%:}" | \
    sed -e 's/\:\:/\:/g' -e 's/:$//')

  if [ -z "${_result}" ]; then
    eval "export ${1}=\"\$$1\" "
  else
    eval "export ${1}=\"${_result}\" "
  fi
}

function gtp()
{
  GIT_PS1_SHOWDIRTYSTATE=1
  PS1="[\h] \W $(__git_ps1) > "
}

## d imp {{{
__d_add_folder()
{
  local name_orig=$1
  [ -z "${name_orig}" ] && echo "__d_add_folder: cannot add. Nothing provided." && return 1
  #[ ! -d "${name}" ] && echo "cannot add. Folder ${name} missing." && return 1

  if ! name=$(eval "cd $name_orig" >& /dev/null && readlink -e . ); then
    echo "__d_add_folder: $name_orig not found. Cannot add"
    return 1
  fi
  local key=$2

  # use a vector where is element is another vector
  local size=${#_dirs_data_keys[@]}
  if [ ${size} -eq 0 ]; then
    _dirs_data_names=()
    _dirs_data_keys=()
  fi

  # check if the elements already exist
  for((i=0; i < size; i++)); do
    n="${_dirs_data_names[$i]}"
    k="${_dirs_data_keys[$i]}"

    if [ "${n}" = "${name}" ]; then
      if [ ! "${k}" = "${key}" ] && [ -n "${key}" ]; then
        echo "__d_add_folder: replacing key ${k} by $key for ${name}"
        _dirs_data_keys[$i]="${key}"
      fi
      return
    fi
  done

  # not found, add new one
  _dirs_data_names+=("${name}")
  _dirs_data_keys+=("${key}")
  [ -n "${key}" ] && eval "export ${key}=\"${name}\""
}

__print_folder_keys()
{
  local size=${#_dirs_data_names[@]}
  local name
  local key
  local curdir="$(readlink -e .)"
  curdir="${curdir/${HOME}/~}"
  for((i=0; i < size; i++)); do
    name="${_dirs_data_names[$i]/${HOME}/~}"
    [ "${name}" = "${curdir}" ] && indicator_cur="*" || indicator_cur=" "
    key="${_dirs_data_keys[$i]}"
    if [ "$1" = "-n" ]; then # print only numbers
      printf "${indicator_cur} %-2s  %-30s\n" "$i" "${name}"
    else
      printf "${indicator_cur} %-2s  %-20s  %-30s\n" "$i" "${key}" "${name}"
    fi
  done
}

d()
{
  # implement changing logic
  local CD_OP="$(type z >& /dev/null && type zoxide >& /dev/null && echo z || echo cd)"
  [ -z "$@" ] && __print_folder_keys && return

  # can be name or key
  target=$1
  [ "${target}" = "-" ] && ${CD_OP} - && return

  # if dir exists change to it regardless
  if [ -d  "${target}" ]; then
    __d_add_folder $@
    ${CD_OP} "${target}"
    return
  fi

  # which one to prioritize? keys or numbers. Here we go by keys
  local size=${#_dirs_data_names[@]}
  for((i=0; i < size; i++)); do
    if [ "${_dirs_data_keys[$i]}" = "${target}" ]; then
      ${CD_OP} "${_dirs_data_names[$i]}"
      return
    fi
  done


  # try to look for number index
  if [ -z "${target//[0-9]}" ] && [ $target -lt $size ]; then
    name="${_dirs_data_names[$target]}"
    ${CD_OP} "$name"
    return
  fi

  if ${CD_OP} "$@"; then
    shift
    __d_add_folder . $@
  fi
}

function _d()
{
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(eval "compgen -W \"${_dirs_data_keys[@]}\" -- $cur") )
}
complete -o plusdirs -o nospace -F _d d

dn()
{
  val="$1"
  [ -z "${val}" ] && __print_folder_keys -n && return
  [ -n "${val//[0-9]}" ] && echo "$val is not a number" && return 1
  local size=${#_dirs_data_names[@]}
  [ $val -ge $size ] && echo "$val is outside range. size=$size" && return 1
  name="${_dirs_data_names[$val]}"
  echo name=$name
  cd "$name"
}
## d imp }}}

function gi()
{
  local pattern=$1
  local def_loc="."
  shift
  if [[ -n "$@" ]]; then
    local def_loc=$@
  fi
  grep -iR --exclude={tags,*.{{obj,o,idb,pdb,exe}} \
    --exclude-dir=.{git,hg,svn} --binary-files=without-match "${pattern}" ${def_loc}
  }

  function gib()
  {
    local pattern=$1
    local def_loc="."
    shift
    if [[ -n "$@" ]]; then
      local def_loc=$@
    fi
    grep -iR --exclude={tags,*.{{obj,o,idb,pdb,exe}} \
      --exclude-dir=.{git,hg,svn} "${pattern}" ${def_loc}
  }

__imp_v()
{
  # first argument is to decide mode
  local mode=$1
  shift
  args=()
  for arg in $@; do
    [ -e $arg ] && args+=("$(realpath $arg)") || args+=("$arg")
  done

  [ "${mode}" = "X" ] && mode=
  local remote_open="RemoteOpenMod$mode"
  if [ "$(type -t __get_gvim_win)" = "function" ] && [ -n "$(__get_gvim_win)" ]; then
    ("$(__get_gvim_win)" -c "${remote_open} $(__args_to_win $@)" &)
  elif [ -x "$(command -v gvim)" -a -n "${DISPLAY}" ]; then
    gvim -c "${remote_open} ${args[@]}"
  else
    vim ${args[@]}
  fi
}

vs()
{
  __imp_v S $@
}

vt()
{
  __imp_v T $@
}

g()
{
  local first_arg="$([ -z "$1" ] && echo -n status || echo -n $1 )"
  shift
  case "$first_arg" in
    st) arg=(status)
      ;;
    co) arg=(checkout)
      ;;
    ci) arg=(commit)
      ;;
    ciam) arg=(commit -a -m)
      ;;
    br) arg=(branch)
      ;;
    df) arg=(diff)
      ;;
    dt) arg=(difftool)
      ;;
    dn) arg=(diff --name-status)
      ;;
    ll) arg=(log --oneline)
      ;;
    *) arg=(${first_arg})
      ;;
  esac
  git ${arg[@]} "$@"
}

first_alternative()
{
  for cand in "$@"; do
    [ -e "${cand}" ] && echo "${cand}" && break
    [ -d "${cand}" ] && echo "${cand}" && break
  done
}

irr()
{
  # this function serves as a helper to run the python script run_irops.py
  # may need to consider explicity location for where this script is for now
  # we start with windows

  # also in the future we should see if there is a nice way to use tmux to start the run in a pane
  # for now just start directly

  local candidates=("/mnt/c/mt" "/project/ezcrew_new/helder/c_tools")
  local pyfile="$(first_alternative ${candidates[@]})/run_irops.py"
  if [ -e "${pyfile}" ]; then
    python "${pyfile}" $@
  else
    echo "folder with run_irops.py not found in list... Please add it"
  fi
}

copy-static()
{
  # use this to call script to copy scenario
  local rt_candidates=(/mnt/c/OR/IROPS/rt/ /project/ezcrew_new/helder/irops/rt)
  local copy_py="$(first_alternative ${rt_candidates[@]})/Scripts/copy_static.py"
  if [ ! -e "${copy_py}" ]; then
    echo "couldn't find copy_static.py script in rt_candidates=${rt_candidates[@]}"
    return 1
  fi

  local static_cand=(/mnt/c/OR/IROPS/reaccomm-static /project/ezcrew_new/helder/irops/reaccomm-static)
  local static_f="$(first_alternative ${static_cand[@]})"
  if [ ! -d "${static_f}" ]; then
    echo "couldn't find static files in static_cand=${static_cand[@]}"
    echo "invoking script directly"
    python "${copy_py}" $@
    return
  fi

  python "${copy_py}" -i "${static_f}" $@
}

fz()
{
  if [ -x "$(command -v bat)" ]; then
    fzf --preview 'bat --style=plain --color=always --line-range :500 {}' $@
  else
    fzf --preview 'head -n 120 {}'
  fi
}

function zp()
{
  [[ -n "$1" ]] && select1=(--select-1 -q "$1") || select1=()
  preview_cmd="head -n 500 {}"
  command -v bat &>/dev/null && preview_cmd="bat --style=plain --color=always --line-range :500 {}"

  fd --type f --hidden --follow --exclude .git . \
    | fzf --preview "$preview_cmd" "${select1[@]}"
}

function zp2()
{
  [[ -n  "$1" ]] && select1=(--exit-0 --select-1 -q "$1") || select1=()
  preview_cmd="head -n 500 {}"
  command -v bat &>/dev/null && preview_cmd="bat --style=plain --color=always --line-range :500 {}"

  result=$(fd --type f --hidden --follow \
    --exclude .git -E .venv -E __pycache__ -E node_modules . \
    | fzf --preview "$preview_cmd" "${select1[@]}")

  if [[ -z "$result" ]]; then
    echo "$1"
  else
    echo "$result"
  fi
}

function ve()
{
  for fname in $@; do
    if [ -e "${fname}" ]; then
      __imp_v X $@
      return $?
    fi
  done

  if (type fzf >& /dev/null); then name="$(zp $@)"; else name=$@; fi
  [ -n "${name}" ] && __imp_v X "${name}"
}

function vv
{
  echo "start using ve"
}

function vn()
{
  for fname in $@; do
    if [ -e "${fname}" ]; then __imp_v N $@; return $?; fi
  done

  if (type fzf >& /dev/null); then name="$(zp $@)"; else name=$@; fi
  [ -n "${name}" ] && __imp_v N "${name}"
}

function vp()
{
  ei $(zp2 $@)
}

function ei()
{
  # need to determine if nvim can be run
  if [ -x "$(command -v nvim)" ] && nvim -h >& /dev/null; then
    XDG_CONFIG_HOME=~/.vim/test nvim $@
  else
    vim $@
  fi
}


### NVIM START
function e()
{
  # need to determine if nvim can be run
  if [ -x "$(command -v nvim)" ] && nvim -h >& /dev/null; then
    nvim $@
  else
    vim $@
  fi
}

function ef()
{
  nvim $(zp2 $@)
}

eg()
{
  # does nvim support opening in same window?
  gvi -nvim $@
}

complete -o  default ee

efg()
{
  gvi -nvim "$(zp2 $@)"
}
### NVIM END

# cd to a nested folder
cdf()
{
  local dir
  local ok=0
  if [ -n "${1}" -a \( -d "${1}" -o "${1}" = "-" \) ]; then dir=$1
  elif type -p fd >& /dev/null; then
    dir=$(fd -I --type d ${1:-.} | fzf --select-1 +m)
    ok=$?
  else
    local arg="$([ -n "${1}" ] && echo -q \'$@)"
    dir=$(find . -path '*/\.*' -prune -o -type d -print 2> /dev/null \
      | grep -v "^\.$"| fzf --select-1 +m $arg)
          ok=$?
  fi

  if [ "${ok}" -eq "0" ] ; then
    if type d >& /dev/null; then
      d ${dir}
    else
      cd ${dir}
    fi
  fi
}

function j()
{
  if [ -n "$1"  ]; then
    export LAST_JJ_ARGS="$@"
  fi

  ${LAST_JJ_ARGS[@]}
}

function pt()
{
  if [ -n  "$1" ]; then
    if [ "$1" = "-cc" ]; then
      export LAST_PYTEST_ARGS=
    else
      export LAST_PYTEST_ARGS="$@"
    fi
  fi

  pytest ${LAST_PYTEST_ARGS[@]}
}

dr() {
  # Show help if requested
  if [ "$1" = "-h" ]; then
    cat <<EOF
Usage: dr <image> [entrypoint_starting_with_/] [-v host_path[:container_path]] [command_and_args...] [-- command_after_--...]
Options:
  <image>          Docker image name (e.g., ubuntu:latest)
  /path            Optional. Override entrypoint if it starts with "/"
  -v <path_spec>   Mount volume. Host path is resolved to absolute path.
                   Use 'host_path' for /v, or 'host_path:container_path' for custom mount point.
  --               All arguments after '--' are treated as command and args
Examples:
  dr ubuntu:latest /bin/sh -c 'echo hello'
  dr alpine ls -l /
  dr myapp /my/entrypoint -- arg1 arg2
EOF
    return 0
  fi

  # Use previous args if none provided
  if [ $# -eq 0 ] && [ -n "$__previous_dr_args" ]; then
    set -- $__previous_dr_args
    echo "Re-running: dr $*"
  elif [ $# -gt 0 ]; then
    __previous_dr_args="$*"
  else
    echo "No arguments provided. Use 'dr -h' for help." >&2
    return 1
  fi

  # Parse image and optional entrypoint
  local image="$1"; shift
  local entrypoint=""
  [[ "$1" == /* ]] && entrypoint="$1" && shift
  [ "$entrypoint" = "/" ] && entrypoint="/bin/bash"

  # Parse remaining options
  local -a docker_opts creds_mount
  local -a command_args
  local parsing_command=false

  while (( "$#" )); do
    if [ "$1" = "--" ]; then
      parsing_command=true
      shift
      continue
    fi

    if $parsing_command; then
      command_args+=("$1")
    elif [ "$1" = "-v" ]; then
      shift
      local volume="${1:-}"
      [[ "$volume" == *:* ]] || volume="$volume:/v"
      docker_opts+=("-v" "$(realpath "${volume%:*}"):${volume##*:}")
    else
      command_args+=("$1")
    fi
    shift
  done

  # Handle Google Cloud credentials mount if exists
  local gcreds_dir="${HOME}/tmp/target/gcloud"
  if [ -d "$gcreds_dir" ]; then
    creds_mount=(
      -e GOOGLE_APPLICATION_CREDENTIALS=/gcreds/application_default_credentials.json
      --mount "type=bind,source=${gcreds_dir},target=/gcreds,readonly"
    )
  else
    echo "Warning: GCP credentials directory not found, skipping mount." >&2
  fi

  local -a env_file_opt
  if env_file_path=$(_find_dotenv); then
      env_file_opt=("--env-file" "$env_file_path")
  fi

  local -a docker_and_args
  docker_and_args=(docker run --rm -it)
  docker_and_args+=("${creds_mount[@]}")
  docker_and_args+=("${docker_opts[@]}")
  if [ -n "$entrypoint" ]; then
    docker_and_args+=(--entrypoint "$entrypoint")
  fi
  docker_and_args+=("${env_file_opt[@]}")
  docker_and_args+=("$image")
  docker_and_args+=("${command_args[@]}")


  # print command
  printf ' %q' "${docker_and_args[@]}"
  printf '\n'
  "${docker_and_args[@]}"
   #Build and run the docker command
  #docker run --rm -it \
    #"${creds_mount[@]}" \
    #"${docker_opts[@]}" \
    #${entrypoint:+--entrypoint "$entrypoint"} \
    #"${env_file_opt[@]}" \
    #"$image" \
    #"${command_args[@]}"
}

declare -A __wk_keys

function __wk_populate_keys()
{
  util=/mnt/c/OR/IRops/util
  reg=/mnt/c/OR/IROPS/rt
  myscripts=/mnt/c/jT
  mldeps=/mnt/c/zl/ss/B6/23May/mldeps

  __wk_keys[irr]="$myscripts/run_irops.py"
  __wk_keys[exp]="$myscripts/experiment.py"
  __wk_keys[enhance]="$util/src/enhance_sol.py"
  __wk_keys[mod]="$util/src/mod_scen.py"
  __wk_keys[copy_static]="$reg/Scripts/copy_static.py"
}

function wk()
{
  # interface for running some useful scripts
  # should declare a array with names, scripts
  # declare the paths
  # the scripts to run are mostly in 3 locations: util, reg and myscripts, also mldeps
  # for now harcode paths

  __wk_populate_keys
  local userkey userval
  userkey=$1
  userval=""
  shift
  [ -v "__wk_keys[$userkey]" ] && userval="${__wk_keys[$userkey]}"
  if [ -z "$userval" ]; then
    for key in "${!__wk_keys[@]}"; do
      printf "%-15s - %s\n" "$key" "${__wk_keys[$key]}"
    done
  else
    python "$userval" $@
  fi
}

# generate completion
function _wk_comp()
{
  __wk_populate_keys
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(eval "compgen -W \"${!__wk_keys[@]}\" -- $cur") )
  return 0
}

complete -F _wk_comp wk

pwc() {
  local current_dir
  current_dir="$(pwd)"

  if command -v clip.exe >/dev/null 2>&1; then
    printf "%s" "$current_dir" | clip.exe
  elif command -v xclip >/dev/null 2>&1; then
    printf "%s" "$current_dir" | xclip -selection clipboard
  fi

  printf "%s\n" "$current_dir"
}

if { type zoxide && ! type zi; } >& /dev/null ; then
  _ZO_DOCTOR=0
  #export _ZO_DATA_DIR="${HOME}/.sabre2/cache/zoxide"
  #mkdir -p "${_ZO_DATA_DIR}"
  _zoxide_add()
  {
    test -d $1 && zoxide add $1
  }

  eval "$(zoxide init bash)"
else
  alias z=d
  alias zi=d
fi

function state()
{
  python ~/bin/state2.py $@
}

function stateclear()
{
  if [ -z "$1" ]; then
    state list
  else
    state clear $@
  fi
}

function sr()
{
  # reset state for specific command. If no args simply clear
  cmd="$1"
  shift
  state get $cmd
  state clear $cmd
  if [ -n "$1" ]; then
    "${cmd}" $@
  fi
}

function kl()
{
  local -a new_args=( $(state get kl "$@") )
  echo "kubectl ${new_args[@]}"
  kubectl "${new_args[@]}"
}
alias lk=kl


function kc()
{
  local print_info=0
  [ "$1" = "-i" ] && print_info=1 && shift
  [ "$1" = "-n" ] && __ns=("$1" "$2") && shift && shift
  [ -z "${__ns}" ] && __ns=(-n stai-snd1-fulf)
  if [ "$print_info"  = "1" ]; then
    echo kubectl "${__ns[@]}" $@
  fi
  kubectl "${__ns[@]}" $@
}
complete -o default -F __start_kubectl kc

function fixnix() {
  # put ~/bin first in the path as some older tools are used in nix which messes up things
  export PATH=${HOME}/bin:${HOME}/bin/links:$PATH
  dupremove PATH
}

function cdr()
{
  # cd to repo root
  local cd_cmd="$(type z 1>2 >& /dev/null && echo z || echo cd)"
  # local first_arg=$([ -n "$1" ]  && echo "$1" || echo $(git rev-parse --show-toplevel))
  local target_dir="${1:-$(git rev-parse --show-toplevel 2>/dev/null)}"
  $cd_cmd $target_dir
}

# function nsh() {
#   if [ -d ~/src/SABRE2/ ]; then
#     local folder="sabre2"
#     [ -n "$1" ] && folder="$1"
#     cd ~/src/SABRE2/${folder}
#     nix-shell
#   fi
# }

function lfr() {
  ( cdr && lf $@; )
}

# if [ -x "$(command -v nvim)" ] && nvim -h >& /dev/null; then
if [ -x "$(command -v lnav)" ]; then
  function le()
  {
    if [ -n "$1" ]; then
      lnav -e "$*"
    else
      lnav
    fi
  }
fi

_activate_pyve() {
  local name="${1:-}"  # optional argument
  local dir="$PWD"

  while [[ "$dir" != "/" ]]; do
    if [[ -n "$name" ]]; then
      if [[ -d "$dir/$name/bin" ]]; then
        . "$dir/$name/bin/activate"
        echo "✅ Activated: $VIRTUAL_ENV ($(python --version 2>&1))"
        return 0
      fi
    else
      # Try standard folders
      for candidate in ".venv" "venv"; do
        if [[ -d "$dir/$candidate/bin" ]]; then
          . "$dir/$candidate/bin/activate"
          echo "✅ Activated: $VIRTUAL_ENV ($(python --version 2>&1))"
          return 0
        fi
      done

      # Try venv_* folders
      local matches=()
      while IFS= read -r match; do
        matches+=("$match")
      done < <(find "$dir" -maxdepth 1 -type d -name 'venv_*' -exec test -d '{}/bin' \; -print)

      if (( ${#matches[@]} == 1 )); then
        . "${matches[0]}/bin/activate"
        echo "✅ Activated: $VIRTUAL_ENV ($(python --version 2>&1))"
        return 0
      elif (( ${#matches[@]} > 1 )); then
        echo "⚠️  Multiple venv_* directories found in $dir:" >&2
        printf ' - %s\n' "${matches[@]}" >&2
        echo "❌ Please specify one explicitly: _activate_pyve <name>" >&2
        return 1
      fi
    fi

    dir="$(dirname "$dir")"
  done

  echo "❌ No virtual environment found." >&2
  return 1
}

# activate environment
function ae() {
  _activate_pyve "$@"
}

# environment run
function er() {
  _activate_pyve
  if [ -n "$1" ]; then
    python $@
  fi
}

# python run in virtual environment
# Note: pr is a linux command. use command pr if needed
function pr() {
  _activate_pyve
  if [ -n "$1" ]; then
    python $@
  fi
}

function lfd() {
  # run lf searching for dirs
  # local query="${1:-}"  # Default to empty if not provided
  local dir
  dir=$(fd -I --type d "$@" | fzf --select-1 --exit-0)
  lf "${dir}"
}

# Search for a .env file from current dir up to Git repo root
function _find_dotenv() {
  local dir="$PWD"
  local rel=".env"
  local repo_root
  repo_root="$(git rev-parse --show-toplevel 2>/dev/null)" || repo_root="/"

  while [ "$dir" != "/" ]; do
    if [ -f "$dir/.env" ]; then
      echo "${rel}"
      return 0
    fi
    [ "$dir" = "$repo_root" ] && break
    dir="$(dirname "$dir")"
    rel="../${rel}"
  done

  return 1  # Not found
}

if [ -z "${FORCE_ONLY_ONE_EVAL_ATUIN+x}" ]; then
  # atuin related configs
  if [ -x "$(command -v atuin)" ]; then
    use_ble=0 && [ "$use_ble" != 1 ] && use_ble=
    [[ -n "$use_ble" && -e ~/tmp/ble-nightly/ble.sh ]] && . ~/tmp/ble-nightly/ble.sh
    [[ -z "$use_ble" && -e ~/.vim/keep/3rdparty/bash-preexec.sh ]] && . ~/.vim/keep/3rdparty/bash-preexec.sh
    eval "$(atuin init bash --disable-up-arrow)"
    bind -x '"\C-p": __atuin_history'
    unset use_ble
  fi
  # export FORCE_ONLY_ONE_EVAL_ATUIN=1
fi

mtimer end of bashrc
