
export PATH="/mnt/c/Work/RMC/Tools/ILOG/Cplex/12.6.0.1/cplex/bin/x64_win64:$PATH"
#export PATH="$PATH":"/cygdrive/c/Program Files/WinRAR"
#export PATH="$PATH":"/cygdrive/c/Users/sg0216489/Programs/PApps/PortableApps/Latex/miktex/bin"

unset PYTHONHOME

#export CDPATH="${HOME}"

# use the following convention c -> code, s -> scenarios.

WIN_HOME=/mnt/c/Users/sg0216489
ONEDRIVE_WIN="/mnt/c/Users/sg0216489/OneDrive - Sabre"
OR_BASE=/mnt/c/OR
WORK_BASE=/mnt/c/zl

__d_add_folder "/mnt/c/ht/vim" vsrc
__d_add_folder "${WIN_HOME}/vimfiles" vim
__d_add_folder "'${ONEDRIVE_WIN}/Documents'" doc
__d_add_folder "${WIN_HOME}/Downloads" down
__d_add_folder "${OR_BASE}/RMC/Engines/V0" v0
__d_add_folder "${OR_BASE}/IROPS/Engines/Reaccomm/src" ir
__d_add_folder "${WORK_BASE}/ml" ml


alias c='command'
alias ls='ls --color'


#disable control flow
stty -ixon

function gi()
{
  local pattern=$1
  local def_loc="."
  shift
  if [[ -n "$@" ]]; then
    local def_loc=$@
  fi
  grep -iR --exclude={tags,*.{obj,idb,pdb,exe,dll,png,jpg,vlt,dat,tff,ico}} "${pattern}" ${def_loc}
}

function __process_arg_to_cygwin()
{
  path_util=wslpath
  ! [ -x "$(command -v $path_util)" ] && path_util=cygpath
  arg_list=
  while [[ -n $@ ]]; do
    curr_arg=$1
    if [[ $curr_arg == -* ]] || [[ $curr_arg == +* ]]; then
      arg_list="$arg_list $curr_arg"
    else
      arg_list="$arg_list $(${path_util} -a -w $curr_arg)"
    fi
    shift
  done
  arg_list="$(echo $arg_list | sed -e 's/^ *//' | sed -e 's/ *$//')"
  echo $arg_list
}

function vg()
{
  gvim $(__process_arg_to_cygwin -u "${HOME}/vimfiles/simple.vim" --noplugins $@) &
}

function vdg()
{
  gvim.bat $(__process_arg_to_cygwin -u "${HOME}/vimfiles/simple.vim" --noplugins -d $@)
}

function gv()
{
  gvim.bat $(__process_arg_to_cygwin $@)
}

function gr()
{
  local _REMOTE_SILENT=" "
  if test "a$1" != "a"; then
    _REMOTE_SILENT='--remote-silent'
  fi
  gvim.bat $(__process_arg_to_cygwin ${_REMOTE_SILENT} $@)
}

function np()
{
  /cygdrive/c/Program\ Files/Notepad++/notepad++.exe \
    $(__process_arg_to_cygwin $@) >& /dev/null &
}

xmlformat ()
{
  local temp_name=$(basename $(mktemp));
  if xmllint -format "$1" > ${temp_name}; then
    rm "$1";
    mv -i "${temp_name}" "$1";
  fi
}

e()
{
  unset gvim
  [ -x "$(command -v gvim)" ] && gvim=gvim
  [ -z ${gvim+x} ] && [ -x "$(command -v gvim.exe)" ] && gvim=gvim.exe
  "${gvim}" -c "RemoteOpenMod $(__process_arg_to_cygwin $@)" &
}


tc()
{
  totalcmd="/mnt/c/Program Files/totalcmd/TOTALCMD64.EXE"

  # handle up to a couple arguments
  a1="$1"
  shift
  a2="$1"
  [ -z "$a1" ] && a1="."
  [ -e "${a1}" ] && a1="$(winpath "$a1")"
  [ -e "$a2" ] && a2="$(winpath "$a2")"

  [ -z "$a2" ] && left="/P=L"

  "${totalcmd}" "$left" "$a1" "$a2"
}


_conda_setup=$(/conda/condabin/conda 'shell.bash' 'hook')
if [ $? -eq 0 ]; then
  eval "${_conda_setup}"
fi

if test ${BASH_VERSION:0:1} -ge 3 ; then dupremove; fi
