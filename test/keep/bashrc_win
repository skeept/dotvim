
alias c='command'
alias ls='ls --color'

#disable control flow
stty -ixon


# backslash is weird in git windows
if [ -z "$bs" ]; then
  function _get_backslash()
  {
    local s="$(uname -a)"
    [ "${s%Msys}" = "${s}" ] && echo "/" || echo "//"
  }
  export bs="$(_get_backslash)"
fi

function gi()
{
  local pattern=$1
  local def_loc="."
  shift
  if [[ -n "$@" ]]; then
    local def_loc=$@
  fi
  grep -iR --exclude={tags,*.{obj,idb,pdb,exe,dll,png,jpg,vlt,dat,tff,ico}} "${pattern}" ${def_loc}
}

function __args_to_win()
{
  path_util=wslpath
  ! [ -x "$(command -v $path_util)" ] && path_util=cygpath
  arg_list=
  while [[ -n $@ ]]; do
    curr_arg=$1
    if [[ $curr_arg == -* ]] || [[ $curr_arg == +* ]]; then
      arg_list="$arg_list $curr_arg"
    else
      arg_list="$arg_list $(${path_util} -a -w $curr_arg)"
    fi
    shift
  done
  arg_list="$(echo $arg_list | sed -e 's/^ *//' | sed -e 's/ *$//')"
  echo $arg_list
}

function __win_base()
{
  local cmd=$(command -v cmd.exe)
  cmd=${cmd,,} # convert to lowercase
  echo "${cmd/\/windows*/}"
}

function __get_gvim_win()
{
  # we try different options to get windows gvim
  if command -v gvim.exe >& /dev/null; then
    echo gvim.exe
    return
  fi
  gvim1="$(__win_base)/Program Files/vim/vim82/gvim.exe"
  if [ -e "${gvim1}" ]; then
    echo "${gvim1}"
    return
  fi

  gvim2="$(__win_base)/ht/nvim-win64/bin/nvim-qt.exe"
  if [ -e "${gvim2}" ]; then
    echo "${gvim2}"
    return
  fi
}

function __get_vim_config_folder()
{
  if [ -d ~/vimfiles ]; then
    (cd ~/vimfiles; realpath .)
  elif [ -d ~/.vim ]; then
    (cd ~/.vim; realpath .)
  fi
}

function vg()
{
  "$(__get_gvim_win)" $(__args_to_win -u "$(__get_vim_config_folder)/simple.vim" --noplugins $@) &
}

function vdg()
{
  "$(__get_gvim_win)" $(__args_to_win -u "$(__get_vim_config_folder)/simple.vim" --noplugins -d $@)
}

function gr()
{
  local _REMOTE_SILENT=" "
  if test "a$1" != "a"; then
    _REMOTE_SILENT='--remote-silent'
  fi
  "$(__get_gvim_win)" $(__args_to_win ${_REMOTE_SILENT} $@)
}

function np()
{
  local npp="$(__win_base)/Program Files/Notepad++/notepad++.exe"
  [ ! -e "${npp}" ] && npp=notepad.exe
  "${npp}" $(__args_to_win $@) &
}

xmlformat ()
{
  local temp_name=$(basename $(mktemp));
  if xmllint -format "$1" > ${temp_name}; then
    rm "$1";
    mv -i "${temp_name}" "$1";
  fi
}

ev()
{
  gvi -nvim $@ 
}
__ev()
{
  unset gvim

  # nvim-qt doesn't seem to be able to add remote files; try again later

  if [ -z "$ev_nvim" ]; then
  [ -x "$(command -v nvim-qt.exe)" ] && gvim=nvim-qt.exe
  local c1="$(__win_base)/ht/nvim-win64/bin/nvim-qt.exe"
  [ -z ${gvim+x} ] && [ -e "${c1}" ] && gvim="${c1}"
  fi

  # if gvim.exe exists means we are on windows and show use that
  [ -z ${gvim+x} ] && [ -x "$(command -v gvim.exe)" ] && gvim=gvim.exe
  [ -z ${gvim+x} ] && [ -x "$(command -v nvim-qt.exe)" ] && gvim=nvim-qt.exe
  [ -z ${gvim+x} ] && [ -x "$(command -v gvim)" ] && gvim=gvim
  dash_dash=
  if [[ $gvim == *nvim* ]]; then
    dash_dash="--"
  fi
  if [ -n ${gvim+x} ]; then
    #("${gvim}" -c "RemoteOpenMod $(__args_to_win $@)" > /dev/null) &
    ("${gvim}" ${dash_dash} -c "RemoteOpenMod $(__args_to_win $@)" &)
  elif [ -x "$(command -v nvim)" ]; then
    nvim $@
  else
    vim $@
  fi
}

tc()
{
  _TOTALCMD_PATH="$(__win_base)/Program Files/totalcmd/TOTALCMD64.EXE"
  [ ! -e "${_TOTALCMD_PATH}" ] && _TOTALCMD_PATH="$(__win_base)/totalcmd/TOTALCMD64.EXE"
  if [ ! -e "${_TOTALCMD_PATH}" ]; then
   explorer.exe $@ &
   return
  fi

  # handle up to a couple arguments
  local a1="$1"
  shift
  local a2="$1"
  [ -z "$a1" ] && a1="."
  [ -e "${a1}" ] && a1="$(wpath -f "$a1")"
  [ -e "$a2" ] && a2="$(wpath -f "$a2")"

  "${_TOTALCMD_PATH}" ${bs}O "$a1" "$a2" &
}

tcr()
{
  local arg="$1"
  [ -z "${arg}" ] && arg="."
  tc "${bs}R=$(wpath -f $arg)"
}

bc4()
{
  _BC_CMD1="$(__win_base)/Program Files/Beyond Compare 4/BCompare.exe"
  local arg1="$(wpath $1)"
  local arg2="$(wpath $2)"
  shift; shift
  "${_BC_CMD1}" "${arg1}" "${arg2}" $@ &
}

if [ -e /conda/envs/dvc/bin/vd ]; then
  alias vsd=/conda/envs/dvc/bin/vd
fi

if test ${BASH_VERSION:0:1} -ge 3 ; then dupremove; fi

# vim: set ft=bash:
