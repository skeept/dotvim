set previewer ~/.vim/test/keep/lf/lf_previewer.sh

cmd mkdir push %mkdir<space>
map i $bat --style=plain --color=always --paging=auto $f
map <c-j> shell
map <enter> read
map ; read

cmd vdiff ${{
  vdf $fx
}}

cmd wdiff $bcp $fx

map d
map dd cut
map dv vdiff
map dc wdiff
map du ${{
  [ -d $f  ] && dua interactive $f || dua interactive $(dirname $f)
}}
map dD delete
map <delete> delete

map r
map rr rename
map rg $lazygit

cmd on-cd &{{
    export STARSHIP_SHELL=
    fmt="$(starship prompt)"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza -ld --color=always "$f")\""
}}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search
map gi $lg

cmd copy_to_clip &{{
  if command -v clip.exe >& /dev/null; then
    echo "$fx" | clip.exe
  fi
}}

map gy :copy_to_clip


cmd fzf_file_jump ${{
    res="$(fd | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}
map gf :fzf_file_jump

cmd z %{{
    result="$(zoxide query --exclude "$PWD" "$@" | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
    zoxide add "$PWD"
}}
map zz zi

# open operations
map oc $code $f
map oe $nvim $f
map oi $gvi -nvim $f
map om $emacs -nw $f
map on &gvi :N $f
map oo &gvi $f
map ov $vim $f
map oz &7zFM.exe $f
map D &gio trash $fx

map c
map cw rename
map cc clear

# map all common operations to a (for action) prefix
map aa invert
map ap paste
map ay copy
map av invert
map ad cut
map ac clear

map v

map vv invert
map ve $vim $f
map vd $visidata $fx

map y
map yy copy
map yb ${{ basename $f | clip.exe }}
map yd ${{ dirname $f | clip.exe }}
