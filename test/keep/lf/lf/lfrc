# interpreter for shell commands
#set shell cmd
set shell pwsh

set shellopts -noprofile

# Shell commands with multiline definitions and/or positional arguments and/or
# quotes do not work in Windows. For anything but the simplest shell commands,
# it is recommended to create separate script files and simply call them here
# in commands or mappings.

# change the editor used in default editor keybinding
# There is no builtin terminal editor installed in Windows. The default editor
# mapping uses 'notepad' which launches in a separate GUI window. You may
# instead install a terminal editor of your choice and replace the default
# editor keybinding accordingly.
map e $vim ($env:fx -split '\n')

# change the pager used in default pager keybinding
# The standard pager used in Windows is 'more' which is not a very capable
# pager. You may instead install a pager of your choice and replace the default
# pager keybinding accordingly.
map i $bat --style=plain --color=always --paging=auto $env:f

# change the shell used in default shell keybinding
map w $pwsh -noprofile

# change 'doc' command to use a different pager
cmd doc $lf -doc | bat --style=plain --color=always


cmd maps $lf -remote "query $env:id maps" | bat --style=plain --color=always --paging=always
cmd cmaps $lf -remote "query $env:id cmaps" | bat --style=plain --color=always --paging=always
cmd cmds $lf -remote "query $env:id cmds" | bat --style=plain --color=always --paging=always

cmd diff ${{
  #gvim ($env:fx -split '\n')
  #msg * "C:\Program Files\Beyond Compare 4\BCompare.exe" $env:fx
  & "C:\Program Files\Beyond Compare 4\BCompare.exe" ($env:fx -split '\n')
}}
#cmd diff $& "C:\Program Files\Beyond Compare 4\BCompare.exe" ($env:fx -split '\n')

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> read
map ; read

# copy current file to a folder where it can be easily found
#set previewer C:\\jT\\preview.bat
set previewer ~\\vimfiles\\test\\keep\\lf\\lf\\preview.bat

map oc $code ($env:fx -split '\n')
map ov $gvim ($env:fx -split '\n')

cmd vdiff $gvim -d ($env:fx -split '\n')

map d
map dd cut
map dv $gvim -d ($env:fx -split '\n')
map dc diff
map du ${{
  $item = Get-Item $env:f
  $target = if($item.PSIsContainer) {$item.name} else {"."}
  wsl -e ncdu $target
}}
map c
map cc rename
map cl clear

# map all common operations to a (for action) prefix
map ap paste
map ay copy
map av invert
map ad cut
map ac clear
map aD delete
map ar rename
