# interpreter for shell commands
#set shell cmd
set shell pwsh

set shellopts -noprofile

# Shell commands with multiline definitions and/or positional arguments and/or
# quotes do not work in Windows. For anything but the simplest shell commands,
# it is recommended to create separate script files and simply call them here
# in commands or mappings.

# change the editor used in default editor keybinding
# There is no builtin terminal editor installed in Windows. The default editor
# mapping uses 'notepad' which launches in a separate GUI window. You may
# instead install a terminal editor of your choice and replace the default
# editor keybinding accordingly.
map e $vim ($env:fx -split '\n')

# change the pager used in default pager keybinding
# The standard pager used in Windows is 'more' which is not a very capable
# pager. You may instead install a pager of your choice and replace the default
# pager keybinding accordingly.
map i $bat --style=plain --color=always --paging=auto $env:f

# change the shell used in default shell keybinding
map w $pwsh -noprofile

# change 'doc' command to use a different pager
cmd doc $lf -doc | bat --style=plain --color=always

cmd maps $lf -remote "query $env:id maps" | bat --style=plain --color=always --paging=always
cmd cmaps $lf -remote "query $env:id cmaps" | bat --style=plain --color=always --paging=always
cmd cmds $lf -remote "query $env:id cmds" | bat --style=plain --color=always --paging=always

cmd diff ${{
  #gvim ($env:fx -split '\n')
  #msg * "C:\Program Files\Beyond Compare 4\BCompare.exe" $env:fx
  & "C:\Program Files\Beyond Compare 4\BCompare.exe" ($env:fx -split '\n')
}}
#cmd diff $& "C:\Program Files\Beyond Compare 4\BCompare.exe" ($env:fx -split '\n')

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> read
map ; read

# copy current file to a folder where it can be easily found
#set previewer C:\\jT\\preview.bat
set previewer ~\\vimfiles\\test\\keep\\lf\\lf\\preview.bat

map oc $code ($env:fx -split '\n')
map ov $gvim ($env:fx -split '\n')
map oz &7zFM ($env:fx -split '\n')

cmd vdiff $gvim -d ($env:fx -split '\n')

map d
map dd cut
map dv $gvim -d ($env:fx -split '\n')
map dc diff
map du ${{
  #$item = Get-Item $env:f
  #$target = if($item.PSIsContainer) {$item.name} else {"."}
  #wsl -e ncdu $target
  #dua interative $target
  if((Get-Item $env:f).PSIsContainer) { dua interactive $f } else { dua interactive }
}}
map dD delete
map df ${{
  & "C:\Program Files\Beyond Compare 4\BCompare.exe" "$env:f/BL" "$env:f/TR"
}}

map c
map cw rename
map cc :clear ; unselect

map <delete> delete

map r
map rr rename
map rg $lg.exe


# map all common operations to a (for action) prefix
map ap paste
map ay copy
map av invert
map ad cut
map ac clear

map v
map vv invert
map ve $vim $f
map vd $wsl -e /home/sabre/.local/bin/visidata (Get-item $env:f).name

map gi $lg

cmd on-cd &{{
    export STARSHIP_SHELL=
    fmt="$(starship prompt)"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza -ld --color=always "$f")\""
}}

cmd fzf_search ${{
    $cmd = "rg --column --line-number --no-heading --color=always --smart-case"
    $result = (fzf --ansi --disabled --layout=reverse --height="100%" --header="Search in files" --delimiter=":" `
        --bind "start:reload($cmd {q})" `
        --bind "change:reload($cmd {q})" `
        --preview 'bat --color=always --style=plain --highlight-line={2} -- {1}' `
    )
    if($result -ne $null) {
      $result = [regex]::escape($result.split(':')[0])
    }

    lf -remote "send $env:id select `"$result`""
}}

map gs fzf_search

cmd fzf_file_jump ${{
  $res = "$((fd  | fzf --reverse --header='Jump to location').trim())"
  if([bool]$res) {
    if ((get-item $res)  -is [System.IO.DirectoryInfo]) { $cmd = "cd" } else { $cmd = "select" }
    $res = [regex]::escape($res)
    lf -remote "send $id $cmd $res"
  }
}}

map gf fzf_file_jump

set shellflag "-cwa"

cmd z ${{
    [Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("UTF-8")
    $result = ((zoxide query --exclude $PWD $args[0]) -replace "/", "//")
    lf -remote "send $env:id cd '$result'"
}}

cmd zi ${{
    [Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("UTF-8")
    $result=((zoxide query -i) -replace "/", "//")
    lf -remote "send $id cd '$result'"
}}

map gr ${{
    [Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding("UTF-8")
    $t=(git rev-parse --show-toplevel 2> $null || '.')
    lf -remote "send $id cd '$t'"
}}

cmd on-cd &{{
    zoxide add "$PWD"
}}

map zz zi
